ARM GAS  C:\Users\Andres\AppData\Local\Temp\ccONmjfL.s 			page 1


   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 1
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"MOTOR.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.MOTOR_Init,"ax",%progbits
  18              		.align	2
  19              		.global	MOTOR_Init
  20              		.code	16
  21              		.thumb_func
  22              		.type	MOTOR_Init, %function
  23              	MOTOR_Init:
  24              	.LFB2:
  25              		.file 1 "Generated_Source\\PSoC4\\MOTOR.c"
   1:Generated_Source\PSoC4/MOTOR.c **** /*******************************************************************************
   2:Generated_Source\PSoC4/MOTOR.c **** * File Name: MOTOR.c
   3:Generated_Source\PSoC4/MOTOR.c **** * Version 2.50
   4:Generated_Source\PSoC4/MOTOR.c **** *
   5:Generated_Source\PSoC4/MOTOR.c **** * Description:
   6:Generated_Source\PSoC4/MOTOR.c **** *  This file provides all API functionality of the UART component
   7:Generated_Source\PSoC4/MOTOR.c **** *
   8:Generated_Source\PSoC4/MOTOR.c **** * Note:
   9:Generated_Source\PSoC4/MOTOR.c **** *
  10:Generated_Source\PSoC4/MOTOR.c **** ********************************************************************************
  11:Generated_Source\PSoC4/MOTOR.c **** * Copyright 2008-2015, Cypress Semiconductor Corporation.  All rights reserved.
  12:Generated_Source\PSoC4/MOTOR.c **** * You may use this file only in accordance with the license, terms, conditions,
  13:Generated_Source\PSoC4/MOTOR.c **** * disclaimers, and limitations in the end user license agreement accompanying
  14:Generated_Source\PSoC4/MOTOR.c **** * the software package with which this file was provided.
  15:Generated_Source\PSoC4/MOTOR.c **** *******************************************************************************/
  16:Generated_Source\PSoC4/MOTOR.c **** 
  17:Generated_Source\PSoC4/MOTOR.c **** #include "MOTOR.h"
  18:Generated_Source\PSoC4/MOTOR.c **** #if (MOTOR_INTERNAL_CLOCK_USED)
  19:Generated_Source\PSoC4/MOTOR.c ****     #include "MOTOR_IntClock.h"
  20:Generated_Source\PSoC4/MOTOR.c **** #endif /* End MOTOR_INTERNAL_CLOCK_USED */
  21:Generated_Source\PSoC4/MOTOR.c **** 
  22:Generated_Source\PSoC4/MOTOR.c **** 
  23:Generated_Source\PSoC4/MOTOR.c **** /***************************************
  24:Generated_Source\PSoC4/MOTOR.c **** * Global data allocation
  25:Generated_Source\PSoC4/MOTOR.c **** ***************************************/
  26:Generated_Source\PSoC4/MOTOR.c **** 
  27:Generated_Source\PSoC4/MOTOR.c **** uint8 MOTOR_initVar = 0u;
  28:Generated_Source\PSoC4/MOTOR.c **** 
  29:Generated_Source\PSoC4/MOTOR.c **** #if (MOTOR_TX_INTERRUPT_ENABLED && MOTOR_TX_ENABLED)
  30:Generated_Source\PSoC4/MOTOR.c ****     volatile uint8 MOTOR_txBuffer[MOTOR_TX_BUFFER_SIZE];
  31:Generated_Source\PSoC4/MOTOR.c ****     volatile uint8 MOTOR_txBufferRead = 0u;
  32:Generated_Source\PSoC4/MOTOR.c ****     uint8 MOTOR_txBufferWrite = 0u;
ARM GAS  C:\Users\Andres\AppData\Local\Temp\ccONmjfL.s 			page 2


  33:Generated_Source\PSoC4/MOTOR.c **** #endif /* (MOTOR_TX_INTERRUPT_ENABLED && MOTOR_TX_ENABLED) */
  34:Generated_Source\PSoC4/MOTOR.c **** 
  35:Generated_Source\PSoC4/MOTOR.c **** #if (MOTOR_RX_INTERRUPT_ENABLED && (MOTOR_RX_ENABLED || MOTOR_HD_ENABLED))
  36:Generated_Source\PSoC4/MOTOR.c ****     uint8 MOTOR_errorStatus = 0u;
  37:Generated_Source\PSoC4/MOTOR.c ****     volatile uint8 MOTOR_rxBuffer[MOTOR_RX_BUFFER_SIZE];
  38:Generated_Source\PSoC4/MOTOR.c ****     volatile uint8 MOTOR_rxBufferRead  = 0u;
  39:Generated_Source\PSoC4/MOTOR.c ****     volatile uint8 MOTOR_rxBufferWrite = 0u;
  40:Generated_Source\PSoC4/MOTOR.c ****     volatile uint8 MOTOR_rxBufferLoopDetect = 0u;
  41:Generated_Source\PSoC4/MOTOR.c ****     volatile uint8 MOTOR_rxBufferOverflow   = 0u;
  42:Generated_Source\PSoC4/MOTOR.c ****     #if (MOTOR_RXHW_ADDRESS_ENABLED)
  43:Generated_Source\PSoC4/MOTOR.c ****         volatile uint8 MOTOR_rxAddressMode = MOTOR_RX_ADDRESS_MODE;
  44:Generated_Source\PSoC4/MOTOR.c ****         volatile uint8 MOTOR_rxAddressDetected = 0u;
  45:Generated_Source\PSoC4/MOTOR.c ****     #endif /* (MOTOR_RXHW_ADDRESS_ENABLED) */
  46:Generated_Source\PSoC4/MOTOR.c **** #endif /* (MOTOR_RX_INTERRUPT_ENABLED && (MOTOR_RX_ENABLED || MOTOR_HD_ENABLED)) */
  47:Generated_Source\PSoC4/MOTOR.c **** 
  48:Generated_Source\PSoC4/MOTOR.c **** 
  49:Generated_Source\PSoC4/MOTOR.c **** /*******************************************************************************
  50:Generated_Source\PSoC4/MOTOR.c **** * Function Name: MOTOR_Start
  51:Generated_Source\PSoC4/MOTOR.c **** ********************************************************************************
  52:Generated_Source\PSoC4/MOTOR.c **** *
  53:Generated_Source\PSoC4/MOTOR.c **** * Summary:
  54:Generated_Source\PSoC4/MOTOR.c **** *  This is the preferred method to begin component operation.
  55:Generated_Source\PSoC4/MOTOR.c **** *  MOTOR_Start() sets the initVar variable, calls the
  56:Generated_Source\PSoC4/MOTOR.c **** *  MOTOR_Init() function, and then calls the
  57:Generated_Source\PSoC4/MOTOR.c **** *  MOTOR_Enable() function.
  58:Generated_Source\PSoC4/MOTOR.c **** *
  59:Generated_Source\PSoC4/MOTOR.c **** * Parameters:
  60:Generated_Source\PSoC4/MOTOR.c **** *  None.
  61:Generated_Source\PSoC4/MOTOR.c **** *
  62:Generated_Source\PSoC4/MOTOR.c **** * Return:
  63:Generated_Source\PSoC4/MOTOR.c **** *  None.
  64:Generated_Source\PSoC4/MOTOR.c **** *
  65:Generated_Source\PSoC4/MOTOR.c **** * Global variables:
  66:Generated_Source\PSoC4/MOTOR.c **** *  The MOTOR_intiVar variable is used to indicate initial
  67:Generated_Source\PSoC4/MOTOR.c **** *  configuration of this component. The variable is initialized to zero (0u)
  68:Generated_Source\PSoC4/MOTOR.c **** *  and set to one (1u) the first time MOTOR_Start() is called. This
  69:Generated_Source\PSoC4/MOTOR.c **** *  allows for component initialization without re-initialization in all
  70:Generated_Source\PSoC4/MOTOR.c **** *  subsequent calls to the MOTOR_Start() routine.
  71:Generated_Source\PSoC4/MOTOR.c **** *
  72:Generated_Source\PSoC4/MOTOR.c **** * Reentrant:
  73:Generated_Source\PSoC4/MOTOR.c **** *  No.
  74:Generated_Source\PSoC4/MOTOR.c **** *
  75:Generated_Source\PSoC4/MOTOR.c **** *******************************************************************************/
  76:Generated_Source\PSoC4/MOTOR.c **** void MOTOR_Start(void) 
  77:Generated_Source\PSoC4/MOTOR.c **** {
  78:Generated_Source\PSoC4/MOTOR.c ****     /* If not initialized then initialize all required hardware and software */
  79:Generated_Source\PSoC4/MOTOR.c ****     if(MOTOR_initVar == 0u)
  80:Generated_Source\PSoC4/MOTOR.c ****     {
  81:Generated_Source\PSoC4/MOTOR.c ****         MOTOR_Init();
  82:Generated_Source\PSoC4/MOTOR.c ****         MOTOR_initVar = 1u;
  83:Generated_Source\PSoC4/MOTOR.c ****     }
  84:Generated_Source\PSoC4/MOTOR.c **** 
  85:Generated_Source\PSoC4/MOTOR.c ****     MOTOR_Enable();
  86:Generated_Source\PSoC4/MOTOR.c **** }
  87:Generated_Source\PSoC4/MOTOR.c **** 
  88:Generated_Source\PSoC4/MOTOR.c **** 
  89:Generated_Source\PSoC4/MOTOR.c **** /*******************************************************************************
ARM GAS  C:\Users\Andres\AppData\Local\Temp\ccONmjfL.s 			page 3


  90:Generated_Source\PSoC4/MOTOR.c **** * Function Name: MOTOR_Init
  91:Generated_Source\PSoC4/MOTOR.c **** ********************************************************************************
  92:Generated_Source\PSoC4/MOTOR.c **** *
  93:Generated_Source\PSoC4/MOTOR.c **** * Summary:
  94:Generated_Source\PSoC4/MOTOR.c **** *  Initializes or restores the component according to the customizer Configure
  95:Generated_Source\PSoC4/MOTOR.c **** *  dialog settings. It is not necessary to call MOTOR_Init() because
  96:Generated_Source\PSoC4/MOTOR.c **** *  the MOTOR_Start() API calls this function and is the preferred
  97:Generated_Source\PSoC4/MOTOR.c **** *  method to begin component operation.
  98:Generated_Source\PSoC4/MOTOR.c **** *
  99:Generated_Source\PSoC4/MOTOR.c **** * Parameters:
 100:Generated_Source\PSoC4/MOTOR.c **** *  None.
 101:Generated_Source\PSoC4/MOTOR.c **** *
 102:Generated_Source\PSoC4/MOTOR.c **** * Return:
 103:Generated_Source\PSoC4/MOTOR.c **** *  None.
 104:Generated_Source\PSoC4/MOTOR.c **** *
 105:Generated_Source\PSoC4/MOTOR.c **** *******************************************************************************/
 106:Generated_Source\PSoC4/MOTOR.c **** void MOTOR_Init(void) 
 107:Generated_Source\PSoC4/MOTOR.c **** {
  26              		.loc 1 107 0
  27              		.cfi_startproc
 108:Generated_Source\PSoC4/MOTOR.c ****     #if(MOTOR_RX_ENABLED || MOTOR_HD_ENABLED)
 109:Generated_Source\PSoC4/MOTOR.c **** 
 110:Generated_Source\PSoC4/MOTOR.c ****         #if (MOTOR_RX_INTERRUPT_ENABLED)
 111:Generated_Source\PSoC4/MOTOR.c ****             /* Set RX interrupt vector and priority */
 112:Generated_Source\PSoC4/MOTOR.c ****             (void) CyIntSetVector(MOTOR_RX_VECT_NUM, &MOTOR_RXISR);
 113:Generated_Source\PSoC4/MOTOR.c ****             CyIntSetPriority(MOTOR_RX_VECT_NUM, MOTOR_RX_PRIOR_NUM);
 114:Generated_Source\PSoC4/MOTOR.c ****             MOTOR_errorStatus = 0u;
 115:Generated_Source\PSoC4/MOTOR.c ****         #endif /* (MOTOR_RX_INTERRUPT_ENABLED) */
 116:Generated_Source\PSoC4/MOTOR.c **** 
 117:Generated_Source\PSoC4/MOTOR.c ****         #if (MOTOR_RXHW_ADDRESS_ENABLED)
 118:Generated_Source\PSoC4/MOTOR.c ****             MOTOR_SetRxAddressMode(MOTOR_RX_ADDRESS_MODE);
 119:Generated_Source\PSoC4/MOTOR.c ****             MOTOR_SetRxAddress1(MOTOR_RX_HW_ADDRESS1);
 120:Generated_Source\PSoC4/MOTOR.c ****             MOTOR_SetRxAddress2(MOTOR_RX_HW_ADDRESS2);
 121:Generated_Source\PSoC4/MOTOR.c ****         #endif /* End MOTOR_RXHW_ADDRESS_ENABLED */
 122:Generated_Source\PSoC4/MOTOR.c **** 
 123:Generated_Source\PSoC4/MOTOR.c ****         /* Init Count7 period */
 124:Generated_Source\PSoC4/MOTOR.c ****         MOTOR_RXBITCTR_PERIOD_REG = MOTOR_RXBITCTR_INIT;
 125:Generated_Source\PSoC4/MOTOR.c ****         /* Configure the Initial RX interrupt mask */
 126:Generated_Source\PSoC4/MOTOR.c ****         MOTOR_RXSTATUS_MASK_REG  = MOTOR_INIT_RX_INTERRUPTS_MASK;
 127:Generated_Source\PSoC4/MOTOR.c ****     #endif /* End MOTOR_RX_ENABLED || MOTOR_HD_ENABLED*/
 128:Generated_Source\PSoC4/MOTOR.c **** 
 129:Generated_Source\PSoC4/MOTOR.c ****     #if(MOTOR_TX_ENABLED)
 130:Generated_Source\PSoC4/MOTOR.c ****         #if (MOTOR_TX_INTERRUPT_ENABLED)
 131:Generated_Source\PSoC4/MOTOR.c ****             /* Set TX interrupt vector and priority */
 132:Generated_Source\PSoC4/MOTOR.c ****             (void) CyIntSetVector(MOTOR_TX_VECT_NUM, &MOTOR_TXISR);
 133:Generated_Source\PSoC4/MOTOR.c ****             CyIntSetPriority(MOTOR_TX_VECT_NUM, MOTOR_TX_PRIOR_NUM);
 134:Generated_Source\PSoC4/MOTOR.c ****         #endif /* (MOTOR_TX_INTERRUPT_ENABLED) */
 135:Generated_Source\PSoC4/MOTOR.c **** 
 136:Generated_Source\PSoC4/MOTOR.c ****         /* Write Counter Value for TX Bit Clk Generator*/
 137:Generated_Source\PSoC4/MOTOR.c ****         #if (MOTOR_TXCLKGEN_DP)
 138:Generated_Source\PSoC4/MOTOR.c ****             MOTOR_TXBITCLKGEN_CTR_REG = MOTOR_BIT_CENTER;
  28              		.loc 1 138 0
  29 0000 0622     		mov	r2, #6
  30 0002 044B     		ldr	r3, .L2
  31 0004 1A70     		strb	r2, [r3]
 139:Generated_Source\PSoC4/MOTOR.c ****             MOTOR_TXBITCLKTX_COMPLETE_REG = ((MOTOR_NUMBER_OF_DATA_BITS +
  32              		.loc 1 139 0
ARM GAS  C:\Users\Andres\AppData\Local\Temp\ccONmjfL.s 			page 4


  33 0006 4132     		add	r2, r2, #65
  34 0008 034B     		ldr	r3, .L2+4
  35 000a 1A70     		strb	r2, [r3]
 140:Generated_Source\PSoC4/MOTOR.c ****                         MOTOR_NUMBER_OF_START_BIT) * MOTOR_OVER_SAMPLE_COUNT) - 1u;
 141:Generated_Source\PSoC4/MOTOR.c ****         #else
 142:Generated_Source\PSoC4/MOTOR.c ****             MOTOR_TXBITCTR_PERIOD_REG = ((MOTOR_NUMBER_OF_DATA_BITS +
 143:Generated_Source\PSoC4/MOTOR.c ****                         MOTOR_NUMBER_OF_START_BIT) * MOTOR_OVER_SAMPLE_8) - 1u;
 144:Generated_Source\PSoC4/MOTOR.c ****         #endif /* End MOTOR_TXCLKGEN_DP */
 145:Generated_Source\PSoC4/MOTOR.c **** 
 146:Generated_Source\PSoC4/MOTOR.c ****         /* Configure the Initial TX interrupt mask */
 147:Generated_Source\PSoC4/MOTOR.c ****         #if (MOTOR_TX_INTERRUPT_ENABLED)
 148:Generated_Source\PSoC4/MOTOR.c ****             MOTOR_TXSTATUS_MASK_REG = MOTOR_TX_STS_FIFO_EMPTY;
 149:Generated_Source\PSoC4/MOTOR.c ****         #else
 150:Generated_Source\PSoC4/MOTOR.c ****             MOTOR_TXSTATUS_MASK_REG = MOTOR_INIT_TX_INTERRUPTS_MASK;
  36              		.loc 1 150 0
  37 000c 453A     		sub	r2, r2, #69
  38 000e 034B     		ldr	r3, .L2+8
  39 0010 1A70     		strb	r2, [r3]
 151:Generated_Source\PSoC4/MOTOR.c ****         #endif /*End MOTOR_TX_INTERRUPT_ENABLED*/
 152:Generated_Source\PSoC4/MOTOR.c **** 
 153:Generated_Source\PSoC4/MOTOR.c ****     #endif /* End MOTOR_TX_ENABLED */
 154:Generated_Source\PSoC4/MOTOR.c **** 
 155:Generated_Source\PSoC4/MOTOR.c ****     #if(MOTOR_PARITY_TYPE_SW)  /* Write Parity to Control Register */
 156:Generated_Source\PSoC4/MOTOR.c ****         MOTOR_WriteControlRegister( \
 157:Generated_Source\PSoC4/MOTOR.c ****             (MOTOR_ReadControlRegister() & (uint8)~MOTOR_CTRL_PARITY_TYPE_MASK) | \
 158:Generated_Source\PSoC4/MOTOR.c ****             (uint8)(MOTOR_PARITY_TYPE << MOTOR_CTRL_PARITY_TYPE0_SHIFT) );
 159:Generated_Source\PSoC4/MOTOR.c ****     #endif /* End MOTOR_PARITY_TYPE_SW */
 160:Generated_Source\PSoC4/MOTOR.c **** }
  40              		.loc 1 160 0
  41              		@ sp needed
  42 0012 7047     		bx	lr
  43              	.L3:
  44              		.align	2
  45              	.L2:
  46 0014 20000F40 		.word	1074724896
  47 0018 30000F40 		.word	1074724912
  48 001c 81000F40 		.word	1074724993
  49              		.cfi_endproc
  50              	.LFE2:
  51              		.size	MOTOR_Init, .-MOTOR_Init
  52              		.section	.text.MOTOR_Enable,"ax",%progbits
  53              		.align	2
  54              		.global	MOTOR_Enable
  55              		.code	16
  56              		.thumb_func
  57              		.type	MOTOR_Enable, %function
  58              	MOTOR_Enable:
  59              	.LFB3:
 161:Generated_Source\PSoC4/MOTOR.c **** 
 162:Generated_Source\PSoC4/MOTOR.c **** 
 163:Generated_Source\PSoC4/MOTOR.c **** /*******************************************************************************
 164:Generated_Source\PSoC4/MOTOR.c **** * Function Name: MOTOR_Enable
 165:Generated_Source\PSoC4/MOTOR.c **** ********************************************************************************
 166:Generated_Source\PSoC4/MOTOR.c **** *
 167:Generated_Source\PSoC4/MOTOR.c **** * Summary:
 168:Generated_Source\PSoC4/MOTOR.c **** *  Activates the hardware and begins component operation. It is not necessary
 169:Generated_Source\PSoC4/MOTOR.c **** *  to call MOTOR_Enable() because the MOTOR_Start() API
ARM GAS  C:\Users\Andres\AppData\Local\Temp\ccONmjfL.s 			page 5


 170:Generated_Source\PSoC4/MOTOR.c **** *  calls this function, which is the preferred method to begin component
 171:Generated_Source\PSoC4/MOTOR.c **** *  operation.
 172:Generated_Source\PSoC4/MOTOR.c **** 
 173:Generated_Source\PSoC4/MOTOR.c **** * Parameters:
 174:Generated_Source\PSoC4/MOTOR.c **** *  None.
 175:Generated_Source\PSoC4/MOTOR.c **** *
 176:Generated_Source\PSoC4/MOTOR.c **** * Return:
 177:Generated_Source\PSoC4/MOTOR.c **** *  None.
 178:Generated_Source\PSoC4/MOTOR.c **** *
 179:Generated_Source\PSoC4/MOTOR.c **** * Global Variables:
 180:Generated_Source\PSoC4/MOTOR.c **** *  MOTOR_rxAddressDetected - set to initial state (0).
 181:Generated_Source\PSoC4/MOTOR.c **** *
 182:Generated_Source\PSoC4/MOTOR.c **** *******************************************************************************/
 183:Generated_Source\PSoC4/MOTOR.c **** void MOTOR_Enable(void) 
 184:Generated_Source\PSoC4/MOTOR.c **** {
  60              		.loc 1 184 0
  61              		.cfi_startproc
  62 0000 10B5     		push	{r4, lr}
  63              		.cfi_def_cfa_offset 8
  64              		.cfi_offset 4, -8
  65              		.cfi_offset 14, -4
 185:Generated_Source\PSoC4/MOTOR.c ****     uint8 enableInterrupts;
 186:Generated_Source\PSoC4/MOTOR.c ****     enableInterrupts = CyEnterCriticalSection();
  66              		.loc 1 186 0
  67 0002 FFF7FEFF 		bl	CyEnterCriticalSection
  68              	.LVL0:
  69 0006 041C     		mov	r4, r0
  70              	.LVL1:
 187:Generated_Source\PSoC4/MOTOR.c **** 
 188:Generated_Source\PSoC4/MOTOR.c ****     #if (MOTOR_RX_ENABLED || MOTOR_HD_ENABLED)
 189:Generated_Source\PSoC4/MOTOR.c ****         /* RX Counter (Count7) Enable */
 190:Generated_Source\PSoC4/MOTOR.c ****         MOTOR_RXBITCTR_CONTROL_REG |= MOTOR_CNTR_ENABLE;
 191:Generated_Source\PSoC4/MOTOR.c **** 
 192:Generated_Source\PSoC4/MOTOR.c ****         /* Enable the RX Interrupt */
 193:Generated_Source\PSoC4/MOTOR.c ****         MOTOR_RXSTATUS_ACTL_REG  |= MOTOR_INT_ENABLE;
 194:Generated_Source\PSoC4/MOTOR.c **** 
 195:Generated_Source\PSoC4/MOTOR.c ****         #if (MOTOR_RX_INTERRUPT_ENABLED)
 196:Generated_Source\PSoC4/MOTOR.c ****             MOTOR_EnableRxInt();
 197:Generated_Source\PSoC4/MOTOR.c **** 
 198:Generated_Source\PSoC4/MOTOR.c ****             #if (MOTOR_RXHW_ADDRESS_ENABLED)
 199:Generated_Source\PSoC4/MOTOR.c ****                 MOTOR_rxAddressDetected = 0u;
 200:Generated_Source\PSoC4/MOTOR.c ****             #endif /* (MOTOR_RXHW_ADDRESS_ENABLED) */
 201:Generated_Source\PSoC4/MOTOR.c ****         #endif /* (MOTOR_RX_INTERRUPT_ENABLED) */
 202:Generated_Source\PSoC4/MOTOR.c ****     #endif /* (MOTOR_RX_ENABLED || MOTOR_HD_ENABLED) */
 203:Generated_Source\PSoC4/MOTOR.c **** 
 204:Generated_Source\PSoC4/MOTOR.c ****     #if(MOTOR_TX_ENABLED)
 205:Generated_Source\PSoC4/MOTOR.c ****         /* TX Counter (DP/Count7) Enable */
 206:Generated_Source\PSoC4/MOTOR.c ****         #if(!MOTOR_TXCLKGEN_DP)
 207:Generated_Source\PSoC4/MOTOR.c ****             MOTOR_TXBITCTR_CONTROL_REG |= MOTOR_CNTR_ENABLE;
 208:Generated_Source\PSoC4/MOTOR.c ****         #endif /* End MOTOR_TXCLKGEN_DP */
 209:Generated_Source\PSoC4/MOTOR.c **** 
 210:Generated_Source\PSoC4/MOTOR.c ****         /* Enable the TX Interrupt */
 211:Generated_Source\PSoC4/MOTOR.c ****         MOTOR_TXSTATUS_ACTL_REG |= MOTOR_INT_ENABLE;
  71              		.loc 1 211 0
  72 0008 054A     		ldr	r2, .L5
  73 000a 1178     		ldrb	r1, [r2]
  74 000c 1023     		mov	r3, #16
ARM GAS  C:\Users\Andres\AppData\Local\Temp\ccONmjfL.s 			page 6


  75 000e 0B43     		orr	r3, r1
  76 0010 1370     		strb	r3, [r2]
 212:Generated_Source\PSoC4/MOTOR.c ****         #if (MOTOR_TX_INTERRUPT_ENABLED)
 213:Generated_Source\PSoC4/MOTOR.c ****             MOTOR_ClearPendingTxInt(); /* Clear history of TX_NOT_EMPTY */
 214:Generated_Source\PSoC4/MOTOR.c ****             MOTOR_EnableTxInt();
 215:Generated_Source\PSoC4/MOTOR.c ****         #endif /* (MOTOR_TX_INTERRUPT_ENABLED) */
 216:Generated_Source\PSoC4/MOTOR.c ****      #endif /* (MOTOR_TX_INTERRUPT_ENABLED) */
 217:Generated_Source\PSoC4/MOTOR.c **** 
 218:Generated_Source\PSoC4/MOTOR.c ****     #if (MOTOR_INTERNAL_CLOCK_USED)
 219:Generated_Source\PSoC4/MOTOR.c ****         MOTOR_IntClock_Start();  /* Enable the clock */
  77              		.loc 1 219 0
  78 0012 FF20     		mov	r0, #255
  79 0014 FFF7FEFF 		bl	MOTOR_IntClock_StartEx
  80              	.LVL2:
 220:Generated_Source\PSoC4/MOTOR.c ****     #endif /* (MOTOR_INTERNAL_CLOCK_USED) */
 221:Generated_Source\PSoC4/MOTOR.c **** 
 222:Generated_Source\PSoC4/MOTOR.c ****     CyExitCriticalSection(enableInterrupts);
  81              		.loc 1 222 0
  82 0018 201C     		mov	r0, r4
  83 001a FFF7FEFF 		bl	CyExitCriticalSection
  84              	.LVL3:
 223:Generated_Source\PSoC4/MOTOR.c **** }
  85              		.loc 1 223 0
  86              		@ sp needed
  87              	.LVL4:
  88 001e 10BD     		pop	{r4, pc}
  89              	.L6:
  90              		.align	2
  91              	.L5:
  92 0020 91000F40 		.word	1074725009
  93              		.cfi_endproc
  94              	.LFE3:
  95              		.size	MOTOR_Enable, .-MOTOR_Enable
  96              		.section	.text.MOTOR_Start,"ax",%progbits
  97              		.align	2
  98              		.global	MOTOR_Start
  99              		.code	16
 100              		.thumb_func
 101              		.type	MOTOR_Start, %function
 102              	MOTOR_Start:
 103              	.LFB1:
  77:Generated_Source\PSoC4/MOTOR.c ****     /* If not initialized then initialize all required hardware and software */
 104              		.loc 1 77 0
 105              		.cfi_startproc
 106 0000 08B5     		push	{r3, lr}
 107              		.cfi_def_cfa_offset 8
 108              		.cfi_offset 3, -8
 109              		.cfi_offset 14, -4
  79:Generated_Source\PSoC4/MOTOR.c ****     {
 110              		.loc 1 79 0
 111 0002 064B     		ldr	r3, .L9
 112 0004 1B78     		ldrb	r3, [r3]
 113 0006 002B     		cmp	r3, #0
 114 0008 04D1     		bne	.L8
  81:Generated_Source\PSoC4/MOTOR.c ****         MOTOR_initVar = 1u;
 115              		.loc 1 81 0
 116 000a FFF7FEFF 		bl	MOTOR_Init
ARM GAS  C:\Users\Andres\AppData\Local\Temp\ccONmjfL.s 			page 7


 117              	.LVL5:
  82:Generated_Source\PSoC4/MOTOR.c ****     }
 118              		.loc 1 82 0
 119 000e 0122     		mov	r2, #1
 120 0010 024B     		ldr	r3, .L9
 121 0012 1A70     		strb	r2, [r3]
 122              	.L8:
  85:Generated_Source\PSoC4/MOTOR.c **** }
 123              		.loc 1 85 0
 124 0014 FFF7FEFF 		bl	MOTOR_Enable
 125              	.LVL6:
  86:Generated_Source\PSoC4/MOTOR.c **** 
 126              		.loc 1 86 0
 127              		@ sp needed
 128 0018 08BD     		pop	{r3, pc}
 129              	.L10:
 130 001a C046     		.align	2
 131              	.L9:
 132 001c 00000000 		.word	.LANCHOR0
 133              		.cfi_endproc
 134              	.LFE1:
 135              		.size	MOTOR_Start, .-MOTOR_Start
 136              		.section	.text.MOTOR_Stop,"ax",%progbits
 137              		.align	2
 138              		.global	MOTOR_Stop
 139              		.code	16
 140              		.thumb_func
 141              		.type	MOTOR_Stop, %function
 142              	MOTOR_Stop:
 143              	.LFB4:
 224:Generated_Source\PSoC4/MOTOR.c **** 
 225:Generated_Source\PSoC4/MOTOR.c **** 
 226:Generated_Source\PSoC4/MOTOR.c **** /*******************************************************************************
 227:Generated_Source\PSoC4/MOTOR.c **** * Function Name: MOTOR_Stop
 228:Generated_Source\PSoC4/MOTOR.c **** ********************************************************************************
 229:Generated_Source\PSoC4/MOTOR.c **** *
 230:Generated_Source\PSoC4/MOTOR.c **** * Summary:
 231:Generated_Source\PSoC4/MOTOR.c **** *  Disables the UART operation.
 232:Generated_Source\PSoC4/MOTOR.c **** *
 233:Generated_Source\PSoC4/MOTOR.c **** * Parameters:
 234:Generated_Source\PSoC4/MOTOR.c **** *  None.
 235:Generated_Source\PSoC4/MOTOR.c **** *
 236:Generated_Source\PSoC4/MOTOR.c **** * Return:
 237:Generated_Source\PSoC4/MOTOR.c **** *  None.
 238:Generated_Source\PSoC4/MOTOR.c **** *
 239:Generated_Source\PSoC4/MOTOR.c **** *******************************************************************************/
 240:Generated_Source\PSoC4/MOTOR.c **** void MOTOR_Stop(void) 
 241:Generated_Source\PSoC4/MOTOR.c **** {
 144              		.loc 1 241 0
 145              		.cfi_startproc
 146 0000 10B5     		push	{r4, lr}
 147              		.cfi_def_cfa_offset 8
 148              		.cfi_offset 4, -8
 149              		.cfi_offset 14, -4
 242:Generated_Source\PSoC4/MOTOR.c ****     uint8 enableInterrupts;
 243:Generated_Source\PSoC4/MOTOR.c ****     enableInterrupts = CyEnterCriticalSection();
 150              		.loc 1 243 0
ARM GAS  C:\Users\Andres\AppData\Local\Temp\ccONmjfL.s 			page 8


 151 0002 FFF7FEFF 		bl	CyEnterCriticalSection
 152              	.LVL7:
 153 0006 041C     		mov	r4, r0
 154              	.LVL8:
 244:Generated_Source\PSoC4/MOTOR.c **** 
 245:Generated_Source\PSoC4/MOTOR.c ****     /* Write Bit Counter Disable */
 246:Generated_Source\PSoC4/MOTOR.c ****     #if (MOTOR_RX_ENABLED || MOTOR_HD_ENABLED)
 247:Generated_Source\PSoC4/MOTOR.c ****         MOTOR_RXBITCTR_CONTROL_REG &= (uint8) ~MOTOR_CNTR_ENABLE;
 248:Generated_Source\PSoC4/MOTOR.c ****     #endif /* (MOTOR_RX_ENABLED || MOTOR_HD_ENABLED) */
 249:Generated_Source\PSoC4/MOTOR.c **** 
 250:Generated_Source\PSoC4/MOTOR.c ****     #if (MOTOR_TX_ENABLED)
 251:Generated_Source\PSoC4/MOTOR.c ****         #if(!MOTOR_TXCLKGEN_DP)
 252:Generated_Source\PSoC4/MOTOR.c ****             MOTOR_TXBITCTR_CONTROL_REG &= (uint8) ~MOTOR_CNTR_ENABLE;
 253:Generated_Source\PSoC4/MOTOR.c ****         #endif /* (!MOTOR_TXCLKGEN_DP) */
 254:Generated_Source\PSoC4/MOTOR.c ****     #endif /* (MOTOR_TX_ENABLED) */
 255:Generated_Source\PSoC4/MOTOR.c **** 
 256:Generated_Source\PSoC4/MOTOR.c ****     #if (MOTOR_INTERNAL_CLOCK_USED)
 257:Generated_Source\PSoC4/MOTOR.c ****         MOTOR_IntClock_Stop();   /* Disable the clock */
 155              		.loc 1 257 0
 156 0008 FFF7FEFF 		bl	MOTOR_IntClock_Stop
 157              	.LVL9:
 258:Generated_Source\PSoC4/MOTOR.c ****     #endif /* (MOTOR_INTERNAL_CLOCK_USED) */
 259:Generated_Source\PSoC4/MOTOR.c **** 
 260:Generated_Source\PSoC4/MOTOR.c ****     /* Disable internal interrupt component */
 261:Generated_Source\PSoC4/MOTOR.c ****     #if (MOTOR_RX_ENABLED || MOTOR_HD_ENABLED)
 262:Generated_Source\PSoC4/MOTOR.c ****         MOTOR_RXSTATUS_ACTL_REG  &= (uint8) ~MOTOR_INT_ENABLE;
 263:Generated_Source\PSoC4/MOTOR.c **** 
 264:Generated_Source\PSoC4/MOTOR.c ****         #if (MOTOR_RX_INTERRUPT_ENABLED)
 265:Generated_Source\PSoC4/MOTOR.c ****             MOTOR_DisableRxInt();
 266:Generated_Source\PSoC4/MOTOR.c ****         #endif /* (MOTOR_RX_INTERRUPT_ENABLED) */
 267:Generated_Source\PSoC4/MOTOR.c ****     #endif /* (MOTOR_RX_ENABLED || MOTOR_HD_ENABLED) */
 268:Generated_Source\PSoC4/MOTOR.c **** 
 269:Generated_Source\PSoC4/MOTOR.c ****     #if (MOTOR_TX_ENABLED)
 270:Generated_Source\PSoC4/MOTOR.c ****         MOTOR_TXSTATUS_ACTL_REG &= (uint8) ~MOTOR_INT_ENABLE;
 158              		.loc 1 270 0
 159 000c 044A     		ldr	r2, .L12
 160 000e 1378     		ldrb	r3, [r2]
 161 0010 1021     		mov	r1, #16
 162 0012 8B43     		bic	r3, r1
 163 0014 1370     		strb	r3, [r2]
 271:Generated_Source\PSoC4/MOTOR.c **** 
 272:Generated_Source\PSoC4/MOTOR.c ****         #if (MOTOR_TX_INTERRUPT_ENABLED)
 273:Generated_Source\PSoC4/MOTOR.c ****             MOTOR_DisableTxInt();
 274:Generated_Source\PSoC4/MOTOR.c ****         #endif /* (MOTOR_TX_INTERRUPT_ENABLED) */
 275:Generated_Source\PSoC4/MOTOR.c ****     #endif /* (MOTOR_TX_ENABLED) */
 276:Generated_Source\PSoC4/MOTOR.c **** 
 277:Generated_Source\PSoC4/MOTOR.c ****     CyExitCriticalSection(enableInterrupts);
 164              		.loc 1 277 0
 165 0016 201C     		mov	r0, r4
 166 0018 FFF7FEFF 		bl	CyExitCriticalSection
 167              	.LVL10:
 278:Generated_Source\PSoC4/MOTOR.c **** }
 168              		.loc 1 278 0
 169              		@ sp needed
 170              	.LVL11:
 171 001c 10BD     		pop	{r4, pc}
 172              	.L13:
ARM GAS  C:\Users\Andres\AppData\Local\Temp\ccONmjfL.s 			page 9


 173 001e C046     		.align	2
 174              	.L12:
 175 0020 91000F40 		.word	1074725009
 176              		.cfi_endproc
 177              	.LFE4:
 178              		.size	MOTOR_Stop, .-MOTOR_Stop
 179              		.section	.text.MOTOR_ReadControlRegister,"ax",%progbits
 180              		.align	2
 181              		.global	MOTOR_ReadControlRegister
 182              		.code	16
 183              		.thumb_func
 184              		.type	MOTOR_ReadControlRegister, %function
 185              	MOTOR_ReadControlRegister:
 186              	.LFB5:
 279:Generated_Source\PSoC4/MOTOR.c **** 
 280:Generated_Source\PSoC4/MOTOR.c **** 
 281:Generated_Source\PSoC4/MOTOR.c **** /*******************************************************************************
 282:Generated_Source\PSoC4/MOTOR.c **** * Function Name: MOTOR_ReadControlRegister
 283:Generated_Source\PSoC4/MOTOR.c **** ********************************************************************************
 284:Generated_Source\PSoC4/MOTOR.c **** *
 285:Generated_Source\PSoC4/MOTOR.c **** * Summary:
 286:Generated_Source\PSoC4/MOTOR.c **** *  Returns the current value of the control register.
 287:Generated_Source\PSoC4/MOTOR.c **** *
 288:Generated_Source\PSoC4/MOTOR.c **** * Parameters:
 289:Generated_Source\PSoC4/MOTOR.c **** *  None.
 290:Generated_Source\PSoC4/MOTOR.c **** *
 291:Generated_Source\PSoC4/MOTOR.c **** * Return:
 292:Generated_Source\PSoC4/MOTOR.c **** *  Contents of the control register.
 293:Generated_Source\PSoC4/MOTOR.c **** *
 294:Generated_Source\PSoC4/MOTOR.c **** *******************************************************************************/
 295:Generated_Source\PSoC4/MOTOR.c **** uint8 MOTOR_ReadControlRegister(void) 
 296:Generated_Source\PSoC4/MOTOR.c **** {
 187              		.loc 1 296 0
 188              		.cfi_startproc
 297:Generated_Source\PSoC4/MOTOR.c ****     #if (MOTOR_CONTROL_REG_REMOVED)
 298:Generated_Source\PSoC4/MOTOR.c ****         return(0u);
 299:Generated_Source\PSoC4/MOTOR.c ****     #else
 300:Generated_Source\PSoC4/MOTOR.c ****         return(MOTOR_CONTROL_REG);
 301:Generated_Source\PSoC4/MOTOR.c ****     #endif /* (MOTOR_CONTROL_REG_REMOVED) */
 302:Generated_Source\PSoC4/MOTOR.c **** }
 189              		.loc 1 302 0
 190 0000 0020     		mov	r0, #0
 191              		@ sp needed
 192 0002 7047     		bx	lr
 193              		.cfi_endproc
 194              	.LFE5:
 195              		.size	MOTOR_ReadControlRegister, .-MOTOR_ReadControlRegister
 196              		.section	.text.MOTOR_WriteControlRegister,"ax",%progbits
 197              		.align	2
 198              		.global	MOTOR_WriteControlRegister
 199              		.code	16
 200              		.thumb_func
 201              		.type	MOTOR_WriteControlRegister, %function
 202              	MOTOR_WriteControlRegister:
 203              	.LFB6:
 303:Generated_Source\PSoC4/MOTOR.c **** 
 304:Generated_Source\PSoC4/MOTOR.c **** 
ARM GAS  C:\Users\Andres\AppData\Local\Temp\ccONmjfL.s 			page 10


 305:Generated_Source\PSoC4/MOTOR.c **** /*******************************************************************************
 306:Generated_Source\PSoC4/MOTOR.c **** * Function Name: MOTOR_WriteControlRegister
 307:Generated_Source\PSoC4/MOTOR.c **** ********************************************************************************
 308:Generated_Source\PSoC4/MOTOR.c **** *
 309:Generated_Source\PSoC4/MOTOR.c **** * Summary:
 310:Generated_Source\PSoC4/MOTOR.c **** *  Writes an 8-bit value into the control register
 311:Generated_Source\PSoC4/MOTOR.c **** *
 312:Generated_Source\PSoC4/MOTOR.c **** * Parameters:
 313:Generated_Source\PSoC4/MOTOR.c **** *  control:  control register value
 314:Generated_Source\PSoC4/MOTOR.c **** *
 315:Generated_Source\PSoC4/MOTOR.c **** * Return:
 316:Generated_Source\PSoC4/MOTOR.c **** *  None.
 317:Generated_Source\PSoC4/MOTOR.c **** *
 318:Generated_Source\PSoC4/MOTOR.c **** *******************************************************************************/
 319:Generated_Source\PSoC4/MOTOR.c **** void  MOTOR_WriteControlRegister(uint8 control) 
 320:Generated_Source\PSoC4/MOTOR.c **** {
 204              		.loc 1 320 0
 205              		.cfi_startproc
 206              	.LVL12:
 321:Generated_Source\PSoC4/MOTOR.c ****     #if (MOTOR_CONTROL_REG_REMOVED)
 322:Generated_Source\PSoC4/MOTOR.c ****         if(0u != control)
 323:Generated_Source\PSoC4/MOTOR.c ****         {
 324:Generated_Source\PSoC4/MOTOR.c ****             /* Suppress compiler warning */
 325:Generated_Source\PSoC4/MOTOR.c ****         }
 326:Generated_Source\PSoC4/MOTOR.c ****     #else
 327:Generated_Source\PSoC4/MOTOR.c ****        MOTOR_CONTROL_REG = control;
 328:Generated_Source\PSoC4/MOTOR.c ****     #endif /* (MOTOR_CONTROL_REG_REMOVED) */
 329:Generated_Source\PSoC4/MOTOR.c **** }
 207              		.loc 1 329 0
 208              		@ sp needed
 209 0000 7047     		bx	lr
 210              		.cfi_endproc
 211              	.LFE6:
 212              		.size	MOTOR_WriteControlRegister, .-MOTOR_WriteControlRegister
 213 0002 C046     		.section	.text.MOTOR_SetTxInterruptMode,"ax",%progbits
 214              		.align	2
 215              		.global	MOTOR_SetTxInterruptMode
 216              		.code	16
 217              		.thumb_func
 218              		.type	MOTOR_SetTxInterruptMode, %function
 219              	MOTOR_SetTxInterruptMode:
 220              	.LFB7:
 330:Generated_Source\PSoC4/MOTOR.c **** 
 331:Generated_Source\PSoC4/MOTOR.c **** 
 332:Generated_Source\PSoC4/MOTOR.c **** #if(MOTOR_RX_ENABLED || MOTOR_HD_ENABLED)
 333:Generated_Source\PSoC4/MOTOR.c ****     /*******************************************************************************
 334:Generated_Source\PSoC4/MOTOR.c ****     * Function Name: MOTOR_SetRxInterruptMode
 335:Generated_Source\PSoC4/MOTOR.c ****     ********************************************************************************
 336:Generated_Source\PSoC4/MOTOR.c ****     *
 337:Generated_Source\PSoC4/MOTOR.c ****     * Summary:
 338:Generated_Source\PSoC4/MOTOR.c ****     *  Configures the RX interrupt sources enabled.
 339:Generated_Source\PSoC4/MOTOR.c ****     *
 340:Generated_Source\PSoC4/MOTOR.c ****     * Parameters:
 341:Generated_Source\PSoC4/MOTOR.c ****     *  IntSrc:  Bit field containing the RX interrupts to enable. Based on the 
 342:Generated_Source\PSoC4/MOTOR.c ****     *  bit-field arrangement of the status register. This value must be a 
 343:Generated_Source\PSoC4/MOTOR.c ****     *  combination of status register bit-masks shown below:
 344:Generated_Source\PSoC4/MOTOR.c ****     *      MOTOR_RX_STS_FIFO_NOTEMPTY    Interrupt on byte received.
ARM GAS  C:\Users\Andres\AppData\Local\Temp\ccONmjfL.s 			page 11


 345:Generated_Source\PSoC4/MOTOR.c ****     *      MOTOR_RX_STS_PAR_ERROR        Interrupt on parity error.
 346:Generated_Source\PSoC4/MOTOR.c ****     *      MOTOR_RX_STS_STOP_ERROR       Interrupt on stop error.
 347:Generated_Source\PSoC4/MOTOR.c ****     *      MOTOR_RX_STS_BREAK            Interrupt on break.
 348:Generated_Source\PSoC4/MOTOR.c ****     *      MOTOR_RX_STS_OVERRUN          Interrupt on overrun error.
 349:Generated_Source\PSoC4/MOTOR.c ****     *      MOTOR_RX_STS_ADDR_MATCH       Interrupt on address match.
 350:Generated_Source\PSoC4/MOTOR.c ****     *      MOTOR_RX_STS_MRKSPC           Interrupt on address detect.
 351:Generated_Source\PSoC4/MOTOR.c ****     *
 352:Generated_Source\PSoC4/MOTOR.c ****     * Return:
 353:Generated_Source\PSoC4/MOTOR.c ****     *  None.
 354:Generated_Source\PSoC4/MOTOR.c ****     *
 355:Generated_Source\PSoC4/MOTOR.c ****     * Theory:
 356:Generated_Source\PSoC4/MOTOR.c ****     *  Enables the output of specific status bits to the interrupt controller
 357:Generated_Source\PSoC4/MOTOR.c ****     *
 358:Generated_Source\PSoC4/MOTOR.c ****     *******************************************************************************/
 359:Generated_Source\PSoC4/MOTOR.c ****     void MOTOR_SetRxInterruptMode(uint8 intSrc) 
 360:Generated_Source\PSoC4/MOTOR.c ****     {
 361:Generated_Source\PSoC4/MOTOR.c ****         MOTOR_RXSTATUS_MASK_REG  = intSrc;
 362:Generated_Source\PSoC4/MOTOR.c ****     }
 363:Generated_Source\PSoC4/MOTOR.c **** 
 364:Generated_Source\PSoC4/MOTOR.c **** 
 365:Generated_Source\PSoC4/MOTOR.c ****     /*******************************************************************************
 366:Generated_Source\PSoC4/MOTOR.c ****     * Function Name: MOTOR_ReadRxData
 367:Generated_Source\PSoC4/MOTOR.c ****     ********************************************************************************
 368:Generated_Source\PSoC4/MOTOR.c ****     *
 369:Generated_Source\PSoC4/MOTOR.c ****     * Summary:
 370:Generated_Source\PSoC4/MOTOR.c ****     *  Returns the next byte of received data. This function returns data without
 371:Generated_Source\PSoC4/MOTOR.c ****     *  checking the status. You must check the status separately.
 372:Generated_Source\PSoC4/MOTOR.c ****     *
 373:Generated_Source\PSoC4/MOTOR.c ****     * Parameters:
 374:Generated_Source\PSoC4/MOTOR.c ****     *  None.
 375:Generated_Source\PSoC4/MOTOR.c ****     *
 376:Generated_Source\PSoC4/MOTOR.c ****     * Return:
 377:Generated_Source\PSoC4/MOTOR.c ****     *  Received data from RX register
 378:Generated_Source\PSoC4/MOTOR.c ****     *
 379:Generated_Source\PSoC4/MOTOR.c ****     * Global Variables:
 380:Generated_Source\PSoC4/MOTOR.c ****     *  MOTOR_rxBuffer - RAM buffer pointer for save received data.
 381:Generated_Source\PSoC4/MOTOR.c ****     *  MOTOR_rxBufferWrite - cyclic index for write to rxBuffer,
 382:Generated_Source\PSoC4/MOTOR.c ****     *     checked to identify new data.
 383:Generated_Source\PSoC4/MOTOR.c ****     *  MOTOR_rxBufferRead - cyclic index for read from rxBuffer,
 384:Generated_Source\PSoC4/MOTOR.c ****     *     incremented after each byte has been read from buffer.
 385:Generated_Source\PSoC4/MOTOR.c ****     *  MOTOR_rxBufferLoopDetect - cleared if loop condition was detected
 386:Generated_Source\PSoC4/MOTOR.c ****     *     in RX ISR.
 387:Generated_Source\PSoC4/MOTOR.c ****     *
 388:Generated_Source\PSoC4/MOTOR.c ****     * Reentrant:
 389:Generated_Source\PSoC4/MOTOR.c ****     *  No.
 390:Generated_Source\PSoC4/MOTOR.c ****     *
 391:Generated_Source\PSoC4/MOTOR.c ****     *******************************************************************************/
 392:Generated_Source\PSoC4/MOTOR.c ****     uint8 MOTOR_ReadRxData(void) 
 393:Generated_Source\PSoC4/MOTOR.c ****     {
 394:Generated_Source\PSoC4/MOTOR.c ****         uint8 rxData;
 395:Generated_Source\PSoC4/MOTOR.c **** 
 396:Generated_Source\PSoC4/MOTOR.c ****     #if (MOTOR_RX_INTERRUPT_ENABLED)
 397:Generated_Source\PSoC4/MOTOR.c **** 
 398:Generated_Source\PSoC4/MOTOR.c ****         uint8 locRxBufferRead;
 399:Generated_Source\PSoC4/MOTOR.c ****         uint8 locRxBufferWrite;
 400:Generated_Source\PSoC4/MOTOR.c **** 
 401:Generated_Source\PSoC4/MOTOR.c ****         /* Protect variables that could change on interrupt */
ARM GAS  C:\Users\Andres\AppData\Local\Temp\ccONmjfL.s 			page 12


 402:Generated_Source\PSoC4/MOTOR.c ****         MOTOR_DisableRxInt();
 403:Generated_Source\PSoC4/MOTOR.c **** 
 404:Generated_Source\PSoC4/MOTOR.c ****         locRxBufferRead  = MOTOR_rxBufferRead;
 405:Generated_Source\PSoC4/MOTOR.c ****         locRxBufferWrite = MOTOR_rxBufferWrite;
 406:Generated_Source\PSoC4/MOTOR.c **** 
 407:Generated_Source\PSoC4/MOTOR.c ****         if( (MOTOR_rxBufferLoopDetect != 0u) || (locRxBufferRead != locRxBufferWrite) )
 408:Generated_Source\PSoC4/MOTOR.c ****         {
 409:Generated_Source\PSoC4/MOTOR.c ****             rxData = MOTOR_rxBuffer[locRxBufferRead];
 410:Generated_Source\PSoC4/MOTOR.c ****             locRxBufferRead++;
 411:Generated_Source\PSoC4/MOTOR.c **** 
 412:Generated_Source\PSoC4/MOTOR.c ****             if(locRxBufferRead >= MOTOR_RX_BUFFER_SIZE)
 413:Generated_Source\PSoC4/MOTOR.c ****             {
 414:Generated_Source\PSoC4/MOTOR.c ****                 locRxBufferRead = 0u;
 415:Generated_Source\PSoC4/MOTOR.c ****             }
 416:Generated_Source\PSoC4/MOTOR.c ****             /* Update the real pointer */
 417:Generated_Source\PSoC4/MOTOR.c ****             MOTOR_rxBufferRead = locRxBufferRead;
 418:Generated_Source\PSoC4/MOTOR.c **** 
 419:Generated_Source\PSoC4/MOTOR.c ****             if(MOTOR_rxBufferLoopDetect != 0u)
 420:Generated_Source\PSoC4/MOTOR.c ****             {
 421:Generated_Source\PSoC4/MOTOR.c ****                 MOTOR_rxBufferLoopDetect = 0u;
 422:Generated_Source\PSoC4/MOTOR.c ****                 #if ((MOTOR_RX_INTERRUPT_ENABLED) && (MOTOR_FLOW_CONTROL != 0u))
 423:Generated_Source\PSoC4/MOTOR.c ****                     /* When Hardware Flow Control selected - return RX mask */
 424:Generated_Source\PSoC4/MOTOR.c ****                     #if( MOTOR_HD_ENABLED )
 425:Generated_Source\PSoC4/MOTOR.c ****                         if((MOTOR_CONTROL_REG & MOTOR_CTRL_HD_SEND) == 0u)
 426:Generated_Source\PSoC4/MOTOR.c ****                         {   /* In Half duplex mode return RX mask only in RX
 427:Generated_Source\PSoC4/MOTOR.c ****                             *  configuration set, otherwise
 428:Generated_Source\PSoC4/MOTOR.c ****                             *  mask will be returned in LoadRxConfig() API.
 429:Generated_Source\PSoC4/MOTOR.c ****                             */
 430:Generated_Source\PSoC4/MOTOR.c ****                             MOTOR_RXSTATUS_MASK_REG  |= MOTOR_RX_STS_FIFO_NOTEMPTY;
 431:Generated_Source\PSoC4/MOTOR.c ****                         }
 432:Generated_Source\PSoC4/MOTOR.c ****                     #else
 433:Generated_Source\PSoC4/MOTOR.c ****                         MOTOR_RXSTATUS_MASK_REG  |= MOTOR_RX_STS_FIFO_NOTEMPTY;
 434:Generated_Source\PSoC4/MOTOR.c ****                     #endif /* end MOTOR_HD_ENABLED */
 435:Generated_Source\PSoC4/MOTOR.c ****                 #endif /* ((MOTOR_RX_INTERRUPT_ENABLED) && (MOTOR_FLOW_CONTROL != 0u)) */
 436:Generated_Source\PSoC4/MOTOR.c ****             }
 437:Generated_Source\PSoC4/MOTOR.c ****         }
 438:Generated_Source\PSoC4/MOTOR.c ****         else
 439:Generated_Source\PSoC4/MOTOR.c ****         {   /* Needs to check status for RX_STS_FIFO_NOTEMPTY bit */
 440:Generated_Source\PSoC4/MOTOR.c ****             rxData = MOTOR_RXDATA_REG;
 441:Generated_Source\PSoC4/MOTOR.c ****         }
 442:Generated_Source\PSoC4/MOTOR.c **** 
 443:Generated_Source\PSoC4/MOTOR.c ****         MOTOR_EnableRxInt();
 444:Generated_Source\PSoC4/MOTOR.c **** 
 445:Generated_Source\PSoC4/MOTOR.c ****     #else
 446:Generated_Source\PSoC4/MOTOR.c **** 
 447:Generated_Source\PSoC4/MOTOR.c ****         /* Needs to check status for RX_STS_FIFO_NOTEMPTY bit */
 448:Generated_Source\PSoC4/MOTOR.c ****         rxData = MOTOR_RXDATA_REG;
 449:Generated_Source\PSoC4/MOTOR.c **** 
 450:Generated_Source\PSoC4/MOTOR.c ****     #endif /* (MOTOR_RX_INTERRUPT_ENABLED) */
 451:Generated_Source\PSoC4/MOTOR.c **** 
 452:Generated_Source\PSoC4/MOTOR.c ****         return(rxData);
 453:Generated_Source\PSoC4/MOTOR.c ****     }
 454:Generated_Source\PSoC4/MOTOR.c **** 
 455:Generated_Source\PSoC4/MOTOR.c **** 
 456:Generated_Source\PSoC4/MOTOR.c ****     /*******************************************************************************
 457:Generated_Source\PSoC4/MOTOR.c ****     * Function Name: MOTOR_ReadRxStatus
 458:Generated_Source\PSoC4/MOTOR.c ****     ********************************************************************************
ARM GAS  C:\Users\Andres\AppData\Local\Temp\ccONmjfL.s 			page 13


 459:Generated_Source\PSoC4/MOTOR.c ****     *
 460:Generated_Source\PSoC4/MOTOR.c ****     * Summary:
 461:Generated_Source\PSoC4/MOTOR.c ****     *  Returns the current state of the receiver status register and the software
 462:Generated_Source\PSoC4/MOTOR.c ****     *  buffer overflow status.
 463:Generated_Source\PSoC4/MOTOR.c ****     *
 464:Generated_Source\PSoC4/MOTOR.c ****     * Parameters:
 465:Generated_Source\PSoC4/MOTOR.c ****     *  None.
 466:Generated_Source\PSoC4/MOTOR.c ****     *
 467:Generated_Source\PSoC4/MOTOR.c ****     * Return:
 468:Generated_Source\PSoC4/MOTOR.c ****     *  Current state of the status register.
 469:Generated_Source\PSoC4/MOTOR.c ****     *
 470:Generated_Source\PSoC4/MOTOR.c ****     * Side Effect:
 471:Generated_Source\PSoC4/MOTOR.c ****     *  All status register bits are clear-on-read except
 472:Generated_Source\PSoC4/MOTOR.c ****     *  MOTOR_RX_STS_FIFO_NOTEMPTY.
 473:Generated_Source\PSoC4/MOTOR.c ****     *  MOTOR_RX_STS_FIFO_NOTEMPTY clears immediately after RX data
 474:Generated_Source\PSoC4/MOTOR.c ****     *  register read.
 475:Generated_Source\PSoC4/MOTOR.c ****     *
 476:Generated_Source\PSoC4/MOTOR.c ****     * Global Variables:
 477:Generated_Source\PSoC4/MOTOR.c ****     *  MOTOR_rxBufferOverflow - used to indicate overload condition.
 478:Generated_Source\PSoC4/MOTOR.c ****     *   It set to one in RX interrupt when there isn't free space in
 479:Generated_Source\PSoC4/MOTOR.c ****     *   MOTOR_rxBufferRead to write new data. This condition returned
 480:Generated_Source\PSoC4/MOTOR.c ****     *   and cleared to zero by this API as an
 481:Generated_Source\PSoC4/MOTOR.c ****     *   MOTOR_RX_STS_SOFT_BUFF_OVER bit along with RX Status register
 482:Generated_Source\PSoC4/MOTOR.c ****     *   bits.
 483:Generated_Source\PSoC4/MOTOR.c ****     *
 484:Generated_Source\PSoC4/MOTOR.c ****     *******************************************************************************/
 485:Generated_Source\PSoC4/MOTOR.c ****     uint8 MOTOR_ReadRxStatus(void) 
 486:Generated_Source\PSoC4/MOTOR.c ****     {
 487:Generated_Source\PSoC4/MOTOR.c ****         uint8 status;
 488:Generated_Source\PSoC4/MOTOR.c **** 
 489:Generated_Source\PSoC4/MOTOR.c ****         status = MOTOR_RXSTATUS_REG & MOTOR_RX_HW_MASK;
 490:Generated_Source\PSoC4/MOTOR.c **** 
 491:Generated_Source\PSoC4/MOTOR.c ****     #if (MOTOR_RX_INTERRUPT_ENABLED)
 492:Generated_Source\PSoC4/MOTOR.c ****         if(MOTOR_rxBufferOverflow != 0u)
 493:Generated_Source\PSoC4/MOTOR.c ****         {
 494:Generated_Source\PSoC4/MOTOR.c ****             status |= MOTOR_RX_STS_SOFT_BUFF_OVER;
 495:Generated_Source\PSoC4/MOTOR.c ****             MOTOR_rxBufferOverflow = 0u;
 496:Generated_Source\PSoC4/MOTOR.c ****         }
 497:Generated_Source\PSoC4/MOTOR.c ****     #endif /* (MOTOR_RX_INTERRUPT_ENABLED) */
 498:Generated_Source\PSoC4/MOTOR.c **** 
 499:Generated_Source\PSoC4/MOTOR.c ****         return(status);
 500:Generated_Source\PSoC4/MOTOR.c ****     }
 501:Generated_Source\PSoC4/MOTOR.c **** 
 502:Generated_Source\PSoC4/MOTOR.c **** 
 503:Generated_Source\PSoC4/MOTOR.c ****     /*******************************************************************************
 504:Generated_Source\PSoC4/MOTOR.c ****     * Function Name: MOTOR_GetChar
 505:Generated_Source\PSoC4/MOTOR.c ****     ********************************************************************************
 506:Generated_Source\PSoC4/MOTOR.c ****     *
 507:Generated_Source\PSoC4/MOTOR.c ****     * Summary:
 508:Generated_Source\PSoC4/MOTOR.c ****     *  Returns the last received byte of data. MOTOR_GetChar() is
 509:Generated_Source\PSoC4/MOTOR.c ****     *  designed for ASCII characters and returns a uint8 where 1 to 255 are values
 510:Generated_Source\PSoC4/MOTOR.c ****     *  for valid characters and 0 indicates an error occurred or no data is present.
 511:Generated_Source\PSoC4/MOTOR.c ****     *
 512:Generated_Source\PSoC4/MOTOR.c ****     * Parameters:
 513:Generated_Source\PSoC4/MOTOR.c ****     *  None.
 514:Generated_Source\PSoC4/MOTOR.c ****     *
 515:Generated_Source\PSoC4/MOTOR.c ****     * Return:
ARM GAS  C:\Users\Andres\AppData\Local\Temp\ccONmjfL.s 			page 14


 516:Generated_Source\PSoC4/MOTOR.c ****     *  Character read from UART RX buffer. ASCII characters from 1 to 255 are valid.
 517:Generated_Source\PSoC4/MOTOR.c ****     *  A returned zero signifies an error condition or no data available.
 518:Generated_Source\PSoC4/MOTOR.c ****     *
 519:Generated_Source\PSoC4/MOTOR.c ****     * Global Variables:
 520:Generated_Source\PSoC4/MOTOR.c ****     *  MOTOR_rxBuffer - RAM buffer pointer for save received data.
 521:Generated_Source\PSoC4/MOTOR.c ****     *  MOTOR_rxBufferWrite - cyclic index for write to rxBuffer,
 522:Generated_Source\PSoC4/MOTOR.c ****     *     checked to identify new data.
 523:Generated_Source\PSoC4/MOTOR.c ****     *  MOTOR_rxBufferRead - cyclic index for read from rxBuffer,
 524:Generated_Source\PSoC4/MOTOR.c ****     *     incremented after each byte has been read from buffer.
 525:Generated_Source\PSoC4/MOTOR.c ****     *  MOTOR_rxBufferLoopDetect - cleared if loop condition was detected
 526:Generated_Source\PSoC4/MOTOR.c ****     *     in RX ISR.
 527:Generated_Source\PSoC4/MOTOR.c ****     *
 528:Generated_Source\PSoC4/MOTOR.c ****     * Reentrant:
 529:Generated_Source\PSoC4/MOTOR.c ****     *  No.
 530:Generated_Source\PSoC4/MOTOR.c ****     *
 531:Generated_Source\PSoC4/MOTOR.c ****     *******************************************************************************/
 532:Generated_Source\PSoC4/MOTOR.c ****     uint8 MOTOR_GetChar(void) 
 533:Generated_Source\PSoC4/MOTOR.c ****     {
 534:Generated_Source\PSoC4/MOTOR.c ****         uint8 rxData = 0u;
 535:Generated_Source\PSoC4/MOTOR.c ****         uint8 rxStatus;
 536:Generated_Source\PSoC4/MOTOR.c **** 
 537:Generated_Source\PSoC4/MOTOR.c ****     #if (MOTOR_RX_INTERRUPT_ENABLED)
 538:Generated_Source\PSoC4/MOTOR.c ****         uint8 locRxBufferRead;
 539:Generated_Source\PSoC4/MOTOR.c ****         uint8 locRxBufferWrite;
 540:Generated_Source\PSoC4/MOTOR.c **** 
 541:Generated_Source\PSoC4/MOTOR.c ****         /* Protect variables that could change on interrupt */
 542:Generated_Source\PSoC4/MOTOR.c ****         MOTOR_DisableRxInt();
 543:Generated_Source\PSoC4/MOTOR.c **** 
 544:Generated_Source\PSoC4/MOTOR.c ****         locRxBufferRead  = MOTOR_rxBufferRead;
 545:Generated_Source\PSoC4/MOTOR.c ****         locRxBufferWrite = MOTOR_rxBufferWrite;
 546:Generated_Source\PSoC4/MOTOR.c **** 
 547:Generated_Source\PSoC4/MOTOR.c ****         if( (MOTOR_rxBufferLoopDetect != 0u) || (locRxBufferRead != locRxBufferWrite) )
 548:Generated_Source\PSoC4/MOTOR.c ****         {
 549:Generated_Source\PSoC4/MOTOR.c ****             rxData = MOTOR_rxBuffer[locRxBufferRead];
 550:Generated_Source\PSoC4/MOTOR.c ****             locRxBufferRead++;
 551:Generated_Source\PSoC4/MOTOR.c ****             if(locRxBufferRead >= MOTOR_RX_BUFFER_SIZE)
 552:Generated_Source\PSoC4/MOTOR.c ****             {
 553:Generated_Source\PSoC4/MOTOR.c ****                 locRxBufferRead = 0u;
 554:Generated_Source\PSoC4/MOTOR.c ****             }
 555:Generated_Source\PSoC4/MOTOR.c ****             /* Update the real pointer */
 556:Generated_Source\PSoC4/MOTOR.c ****             MOTOR_rxBufferRead = locRxBufferRead;
 557:Generated_Source\PSoC4/MOTOR.c **** 
 558:Generated_Source\PSoC4/MOTOR.c ****             if(MOTOR_rxBufferLoopDetect != 0u)
 559:Generated_Source\PSoC4/MOTOR.c ****             {
 560:Generated_Source\PSoC4/MOTOR.c ****                 MOTOR_rxBufferLoopDetect = 0u;
 561:Generated_Source\PSoC4/MOTOR.c ****                 #if( (MOTOR_RX_INTERRUPT_ENABLED) && (MOTOR_FLOW_CONTROL != 0u) )
 562:Generated_Source\PSoC4/MOTOR.c ****                     /* When Hardware Flow Control selected - return RX mask */
 563:Generated_Source\PSoC4/MOTOR.c ****                     #if( MOTOR_HD_ENABLED )
 564:Generated_Source\PSoC4/MOTOR.c ****                         if((MOTOR_CONTROL_REG & MOTOR_CTRL_HD_SEND) == 0u)
 565:Generated_Source\PSoC4/MOTOR.c ****                         {   /* In Half duplex mode return RX mask only if
 566:Generated_Source\PSoC4/MOTOR.c ****                             *  RX configuration set, otherwise
 567:Generated_Source\PSoC4/MOTOR.c ****                             *  mask will be returned in LoadRxConfig() API.
 568:Generated_Source\PSoC4/MOTOR.c ****                             */
 569:Generated_Source\PSoC4/MOTOR.c ****                             MOTOR_RXSTATUS_MASK_REG |= MOTOR_RX_STS_FIFO_NOTEMPTY;
 570:Generated_Source\PSoC4/MOTOR.c ****                         }
 571:Generated_Source\PSoC4/MOTOR.c ****                     #else
 572:Generated_Source\PSoC4/MOTOR.c ****                         MOTOR_RXSTATUS_MASK_REG |= MOTOR_RX_STS_FIFO_NOTEMPTY;
ARM GAS  C:\Users\Andres\AppData\Local\Temp\ccONmjfL.s 			page 15


 573:Generated_Source\PSoC4/MOTOR.c ****                     #endif /* end MOTOR_HD_ENABLED */
 574:Generated_Source\PSoC4/MOTOR.c ****                 #endif /* MOTOR_RX_INTERRUPT_ENABLED and Hardware flow control*/
 575:Generated_Source\PSoC4/MOTOR.c ****             }
 576:Generated_Source\PSoC4/MOTOR.c **** 
 577:Generated_Source\PSoC4/MOTOR.c ****         }
 578:Generated_Source\PSoC4/MOTOR.c ****         else
 579:Generated_Source\PSoC4/MOTOR.c ****         {   rxStatus = MOTOR_RXSTATUS_REG;
 580:Generated_Source\PSoC4/MOTOR.c ****             if((rxStatus & MOTOR_RX_STS_FIFO_NOTEMPTY) != 0u)
 581:Generated_Source\PSoC4/MOTOR.c ****             {   /* Read received data from FIFO */
 582:Generated_Source\PSoC4/MOTOR.c ****                 rxData = MOTOR_RXDATA_REG;
 583:Generated_Source\PSoC4/MOTOR.c ****                 /*Check status on error*/
 584:Generated_Source\PSoC4/MOTOR.c ****                 if((rxStatus & (MOTOR_RX_STS_BREAK | MOTOR_RX_STS_PAR_ERROR |
 585:Generated_Source\PSoC4/MOTOR.c ****                                 MOTOR_RX_STS_STOP_ERROR | MOTOR_RX_STS_OVERRUN)) != 0u)
 586:Generated_Source\PSoC4/MOTOR.c ****                 {
 587:Generated_Source\PSoC4/MOTOR.c ****                     rxData = 0u;
 588:Generated_Source\PSoC4/MOTOR.c ****                 }
 589:Generated_Source\PSoC4/MOTOR.c ****             }
 590:Generated_Source\PSoC4/MOTOR.c ****         }
 591:Generated_Source\PSoC4/MOTOR.c **** 
 592:Generated_Source\PSoC4/MOTOR.c ****         MOTOR_EnableRxInt();
 593:Generated_Source\PSoC4/MOTOR.c **** 
 594:Generated_Source\PSoC4/MOTOR.c ****     #else
 595:Generated_Source\PSoC4/MOTOR.c **** 
 596:Generated_Source\PSoC4/MOTOR.c ****         rxStatus =MOTOR_RXSTATUS_REG;
 597:Generated_Source\PSoC4/MOTOR.c ****         if((rxStatus & MOTOR_RX_STS_FIFO_NOTEMPTY) != 0u)
 598:Generated_Source\PSoC4/MOTOR.c ****         {
 599:Generated_Source\PSoC4/MOTOR.c ****             /* Read received data from FIFO */
 600:Generated_Source\PSoC4/MOTOR.c ****             rxData = MOTOR_RXDATA_REG;
 601:Generated_Source\PSoC4/MOTOR.c **** 
 602:Generated_Source\PSoC4/MOTOR.c ****             /*Check status on error*/
 603:Generated_Source\PSoC4/MOTOR.c ****             if((rxStatus & (MOTOR_RX_STS_BREAK | MOTOR_RX_STS_PAR_ERROR |
 604:Generated_Source\PSoC4/MOTOR.c ****                             MOTOR_RX_STS_STOP_ERROR | MOTOR_RX_STS_OVERRUN)) != 0u)
 605:Generated_Source\PSoC4/MOTOR.c ****             {
 606:Generated_Source\PSoC4/MOTOR.c ****                 rxData = 0u;
 607:Generated_Source\PSoC4/MOTOR.c ****             }
 608:Generated_Source\PSoC4/MOTOR.c ****         }
 609:Generated_Source\PSoC4/MOTOR.c ****     #endif /* (MOTOR_RX_INTERRUPT_ENABLED) */
 610:Generated_Source\PSoC4/MOTOR.c **** 
 611:Generated_Source\PSoC4/MOTOR.c ****         return(rxData);
 612:Generated_Source\PSoC4/MOTOR.c ****     }
 613:Generated_Source\PSoC4/MOTOR.c **** 
 614:Generated_Source\PSoC4/MOTOR.c **** 
 615:Generated_Source\PSoC4/MOTOR.c ****     /*******************************************************************************
 616:Generated_Source\PSoC4/MOTOR.c ****     * Function Name: MOTOR_GetByte
 617:Generated_Source\PSoC4/MOTOR.c ****     ********************************************************************************
 618:Generated_Source\PSoC4/MOTOR.c ****     *
 619:Generated_Source\PSoC4/MOTOR.c ****     * Summary:
 620:Generated_Source\PSoC4/MOTOR.c ****     *  Reads UART RX buffer immediately, returns received character and error
 621:Generated_Source\PSoC4/MOTOR.c ****     *  condition.
 622:Generated_Source\PSoC4/MOTOR.c ****     *
 623:Generated_Source\PSoC4/MOTOR.c ****     * Parameters:
 624:Generated_Source\PSoC4/MOTOR.c ****     *  None.
 625:Generated_Source\PSoC4/MOTOR.c ****     *
 626:Generated_Source\PSoC4/MOTOR.c ****     * Return:
 627:Generated_Source\PSoC4/MOTOR.c ****     *  MSB contains status and LSB contains UART RX data. If the MSB is nonzero,
 628:Generated_Source\PSoC4/MOTOR.c ****     *  an error has occurred.
 629:Generated_Source\PSoC4/MOTOR.c ****     *
ARM GAS  C:\Users\Andres\AppData\Local\Temp\ccONmjfL.s 			page 16


 630:Generated_Source\PSoC4/MOTOR.c ****     * Reentrant:
 631:Generated_Source\PSoC4/MOTOR.c ****     *  No.
 632:Generated_Source\PSoC4/MOTOR.c ****     *
 633:Generated_Source\PSoC4/MOTOR.c ****     *******************************************************************************/
 634:Generated_Source\PSoC4/MOTOR.c ****     uint16 MOTOR_GetByte(void) 
 635:Generated_Source\PSoC4/MOTOR.c ****     {
 636:Generated_Source\PSoC4/MOTOR.c ****         
 637:Generated_Source\PSoC4/MOTOR.c ****     #if (MOTOR_RX_INTERRUPT_ENABLED)
 638:Generated_Source\PSoC4/MOTOR.c ****         uint16 locErrorStatus;
 639:Generated_Source\PSoC4/MOTOR.c ****         /* Protect variables that could change on interrupt */
 640:Generated_Source\PSoC4/MOTOR.c ****         MOTOR_DisableRxInt();
 641:Generated_Source\PSoC4/MOTOR.c ****         locErrorStatus = (uint16)MOTOR_errorStatus;
 642:Generated_Source\PSoC4/MOTOR.c ****         MOTOR_errorStatus = 0u;
 643:Generated_Source\PSoC4/MOTOR.c ****         MOTOR_EnableRxInt();
 644:Generated_Source\PSoC4/MOTOR.c ****         return ( (uint16)(locErrorStatus << 8u) | MOTOR_ReadRxData() );
 645:Generated_Source\PSoC4/MOTOR.c ****     #else
 646:Generated_Source\PSoC4/MOTOR.c ****         return ( ((uint16)MOTOR_ReadRxStatus() << 8u) | MOTOR_ReadRxData() );
 647:Generated_Source\PSoC4/MOTOR.c ****     #endif /* MOTOR_RX_INTERRUPT_ENABLED */
 648:Generated_Source\PSoC4/MOTOR.c ****         
 649:Generated_Source\PSoC4/MOTOR.c ****     }
 650:Generated_Source\PSoC4/MOTOR.c **** 
 651:Generated_Source\PSoC4/MOTOR.c **** 
 652:Generated_Source\PSoC4/MOTOR.c ****     /*******************************************************************************
 653:Generated_Source\PSoC4/MOTOR.c ****     * Function Name: MOTOR_GetRxBufferSize
 654:Generated_Source\PSoC4/MOTOR.c ****     ********************************************************************************
 655:Generated_Source\PSoC4/MOTOR.c ****     *
 656:Generated_Source\PSoC4/MOTOR.c ****     * Summary:
 657:Generated_Source\PSoC4/MOTOR.c ****     *  Returns the number of received bytes available in the RX buffer.
 658:Generated_Source\PSoC4/MOTOR.c ****     *  * RX software buffer is disabled (RX Buffer Size parameter is equal to 4): 
 659:Generated_Source\PSoC4/MOTOR.c ****     *    returns 0 for empty RX FIFO or 1 for not empty RX FIFO.
 660:Generated_Source\PSoC4/MOTOR.c ****     *  * RX software buffer is enabled: returns the number of bytes available in 
 661:Generated_Source\PSoC4/MOTOR.c ****     *    the RX software buffer. Bytes available in the RX FIFO do not take to 
 662:Generated_Source\PSoC4/MOTOR.c ****     *    account.
 663:Generated_Source\PSoC4/MOTOR.c ****     *
 664:Generated_Source\PSoC4/MOTOR.c ****     * Parameters:
 665:Generated_Source\PSoC4/MOTOR.c ****     *  None.
 666:Generated_Source\PSoC4/MOTOR.c ****     *
 667:Generated_Source\PSoC4/MOTOR.c ****     * Return:
 668:Generated_Source\PSoC4/MOTOR.c ****     *  uint8: Number of bytes in the RX buffer. 
 669:Generated_Source\PSoC4/MOTOR.c ****     *    Return value type depends on RX Buffer Size parameter.
 670:Generated_Source\PSoC4/MOTOR.c ****     *
 671:Generated_Source\PSoC4/MOTOR.c ****     * Global Variables:
 672:Generated_Source\PSoC4/MOTOR.c ****     *  MOTOR_rxBufferWrite - used to calculate left bytes.
 673:Generated_Source\PSoC4/MOTOR.c ****     *  MOTOR_rxBufferRead - used to calculate left bytes.
 674:Generated_Source\PSoC4/MOTOR.c ****     *  MOTOR_rxBufferLoopDetect - checked to decide left bytes amount.
 675:Generated_Source\PSoC4/MOTOR.c ****     *
 676:Generated_Source\PSoC4/MOTOR.c ****     * Reentrant:
 677:Generated_Source\PSoC4/MOTOR.c ****     *  No.
 678:Generated_Source\PSoC4/MOTOR.c ****     *
 679:Generated_Source\PSoC4/MOTOR.c ****     * Theory:
 680:Generated_Source\PSoC4/MOTOR.c ****     *  Allows the user to find out how full the RX Buffer is.
 681:Generated_Source\PSoC4/MOTOR.c ****     *
 682:Generated_Source\PSoC4/MOTOR.c ****     *******************************************************************************/
 683:Generated_Source\PSoC4/MOTOR.c ****     uint8 MOTOR_GetRxBufferSize(void)
 684:Generated_Source\PSoC4/MOTOR.c ****                                                             
 685:Generated_Source\PSoC4/MOTOR.c ****     {
 686:Generated_Source\PSoC4/MOTOR.c ****         uint8 size;
ARM GAS  C:\Users\Andres\AppData\Local\Temp\ccONmjfL.s 			page 17


 687:Generated_Source\PSoC4/MOTOR.c **** 
 688:Generated_Source\PSoC4/MOTOR.c ****     #if (MOTOR_RX_INTERRUPT_ENABLED)
 689:Generated_Source\PSoC4/MOTOR.c **** 
 690:Generated_Source\PSoC4/MOTOR.c ****         /* Protect variables that could change on interrupt */
 691:Generated_Source\PSoC4/MOTOR.c ****         MOTOR_DisableRxInt();
 692:Generated_Source\PSoC4/MOTOR.c **** 
 693:Generated_Source\PSoC4/MOTOR.c ****         if(MOTOR_rxBufferRead == MOTOR_rxBufferWrite)
 694:Generated_Source\PSoC4/MOTOR.c ****         {
 695:Generated_Source\PSoC4/MOTOR.c ****             if(MOTOR_rxBufferLoopDetect != 0u)
 696:Generated_Source\PSoC4/MOTOR.c ****             {
 697:Generated_Source\PSoC4/MOTOR.c ****                 size = MOTOR_RX_BUFFER_SIZE;
 698:Generated_Source\PSoC4/MOTOR.c ****             }
 699:Generated_Source\PSoC4/MOTOR.c ****             else
 700:Generated_Source\PSoC4/MOTOR.c ****             {
 701:Generated_Source\PSoC4/MOTOR.c ****                 size = 0u;
 702:Generated_Source\PSoC4/MOTOR.c ****             }
 703:Generated_Source\PSoC4/MOTOR.c ****         }
 704:Generated_Source\PSoC4/MOTOR.c ****         else if(MOTOR_rxBufferRead < MOTOR_rxBufferWrite)
 705:Generated_Source\PSoC4/MOTOR.c ****         {
 706:Generated_Source\PSoC4/MOTOR.c ****             size = (MOTOR_rxBufferWrite - MOTOR_rxBufferRead);
 707:Generated_Source\PSoC4/MOTOR.c ****         }
 708:Generated_Source\PSoC4/MOTOR.c ****         else
 709:Generated_Source\PSoC4/MOTOR.c ****         {
 710:Generated_Source\PSoC4/MOTOR.c ****             size = (MOTOR_RX_BUFFER_SIZE - MOTOR_rxBufferRead) + MOTOR_rxBufferWrite;
 711:Generated_Source\PSoC4/MOTOR.c ****         }
 712:Generated_Source\PSoC4/MOTOR.c **** 
 713:Generated_Source\PSoC4/MOTOR.c ****         MOTOR_EnableRxInt();
 714:Generated_Source\PSoC4/MOTOR.c **** 
 715:Generated_Source\PSoC4/MOTOR.c ****     #else
 716:Generated_Source\PSoC4/MOTOR.c **** 
 717:Generated_Source\PSoC4/MOTOR.c ****         /* We can only know if there is data in the fifo. */
 718:Generated_Source\PSoC4/MOTOR.c ****         size = ((MOTOR_RXSTATUS_REG & MOTOR_RX_STS_FIFO_NOTEMPTY) != 0u) ? 1u : 0u;
 719:Generated_Source\PSoC4/MOTOR.c **** 
 720:Generated_Source\PSoC4/MOTOR.c ****     #endif /* (MOTOR_RX_INTERRUPT_ENABLED) */
 721:Generated_Source\PSoC4/MOTOR.c **** 
 722:Generated_Source\PSoC4/MOTOR.c ****         return(size);
 723:Generated_Source\PSoC4/MOTOR.c ****     }
 724:Generated_Source\PSoC4/MOTOR.c **** 
 725:Generated_Source\PSoC4/MOTOR.c **** 
 726:Generated_Source\PSoC4/MOTOR.c ****     /*******************************************************************************
 727:Generated_Source\PSoC4/MOTOR.c ****     * Function Name: MOTOR_ClearRxBuffer
 728:Generated_Source\PSoC4/MOTOR.c ****     ********************************************************************************
 729:Generated_Source\PSoC4/MOTOR.c ****     *
 730:Generated_Source\PSoC4/MOTOR.c ****     * Summary:
 731:Generated_Source\PSoC4/MOTOR.c ****     *  Clears the receiver memory buffer and hardware RX FIFO of all received data.
 732:Generated_Source\PSoC4/MOTOR.c ****     *
 733:Generated_Source\PSoC4/MOTOR.c ****     * Parameters:
 734:Generated_Source\PSoC4/MOTOR.c ****     *  None.
 735:Generated_Source\PSoC4/MOTOR.c ****     *
 736:Generated_Source\PSoC4/MOTOR.c ****     * Return:
 737:Generated_Source\PSoC4/MOTOR.c ****     *  None.
 738:Generated_Source\PSoC4/MOTOR.c ****     *
 739:Generated_Source\PSoC4/MOTOR.c ****     * Global Variables:
 740:Generated_Source\PSoC4/MOTOR.c ****     *  MOTOR_rxBufferWrite - cleared to zero.
 741:Generated_Source\PSoC4/MOTOR.c ****     *  MOTOR_rxBufferRead - cleared to zero.
 742:Generated_Source\PSoC4/MOTOR.c ****     *  MOTOR_rxBufferLoopDetect - cleared to zero.
 743:Generated_Source\PSoC4/MOTOR.c ****     *  MOTOR_rxBufferOverflow - cleared to zero.
ARM GAS  C:\Users\Andres\AppData\Local\Temp\ccONmjfL.s 			page 18


 744:Generated_Source\PSoC4/MOTOR.c ****     *
 745:Generated_Source\PSoC4/MOTOR.c ****     * Reentrant:
 746:Generated_Source\PSoC4/MOTOR.c ****     *  No.
 747:Generated_Source\PSoC4/MOTOR.c ****     *
 748:Generated_Source\PSoC4/MOTOR.c ****     * Theory:
 749:Generated_Source\PSoC4/MOTOR.c ****     *  Setting the pointers to zero makes the system believe there is no data to
 750:Generated_Source\PSoC4/MOTOR.c ****     *  read and writing will resume at address 0 overwriting any data that may
 751:Generated_Source\PSoC4/MOTOR.c ****     *  have remained in the RAM.
 752:Generated_Source\PSoC4/MOTOR.c ****     *
 753:Generated_Source\PSoC4/MOTOR.c ****     * Side Effects:
 754:Generated_Source\PSoC4/MOTOR.c ****     *  Any received data not read from the RAM or FIFO buffer will be lost.
 755:Generated_Source\PSoC4/MOTOR.c ****     *
 756:Generated_Source\PSoC4/MOTOR.c ****     *******************************************************************************/
 757:Generated_Source\PSoC4/MOTOR.c ****     void MOTOR_ClearRxBuffer(void) 
 758:Generated_Source\PSoC4/MOTOR.c ****     {
 759:Generated_Source\PSoC4/MOTOR.c ****         uint8 enableInterrupts;
 760:Generated_Source\PSoC4/MOTOR.c **** 
 761:Generated_Source\PSoC4/MOTOR.c ****         /* Clear the HW FIFO */
 762:Generated_Source\PSoC4/MOTOR.c ****         enableInterrupts = CyEnterCriticalSection();
 763:Generated_Source\PSoC4/MOTOR.c ****         MOTOR_RXDATA_AUX_CTL_REG |= (uint8)  MOTOR_RX_FIFO_CLR;
 764:Generated_Source\PSoC4/MOTOR.c ****         MOTOR_RXDATA_AUX_CTL_REG &= (uint8) ~MOTOR_RX_FIFO_CLR;
 765:Generated_Source\PSoC4/MOTOR.c ****         CyExitCriticalSection(enableInterrupts);
 766:Generated_Source\PSoC4/MOTOR.c **** 
 767:Generated_Source\PSoC4/MOTOR.c ****     #if (MOTOR_RX_INTERRUPT_ENABLED)
 768:Generated_Source\PSoC4/MOTOR.c **** 
 769:Generated_Source\PSoC4/MOTOR.c ****         /* Protect variables that could change on interrupt. */
 770:Generated_Source\PSoC4/MOTOR.c ****         MOTOR_DisableRxInt();
 771:Generated_Source\PSoC4/MOTOR.c **** 
 772:Generated_Source\PSoC4/MOTOR.c ****         MOTOR_rxBufferRead = 0u;
 773:Generated_Source\PSoC4/MOTOR.c ****         MOTOR_rxBufferWrite = 0u;
 774:Generated_Source\PSoC4/MOTOR.c ****         MOTOR_rxBufferLoopDetect = 0u;
 775:Generated_Source\PSoC4/MOTOR.c ****         MOTOR_rxBufferOverflow = 0u;
 776:Generated_Source\PSoC4/MOTOR.c **** 
 777:Generated_Source\PSoC4/MOTOR.c ****         MOTOR_EnableRxInt();
 778:Generated_Source\PSoC4/MOTOR.c **** 
 779:Generated_Source\PSoC4/MOTOR.c ****     #endif /* (MOTOR_RX_INTERRUPT_ENABLED) */
 780:Generated_Source\PSoC4/MOTOR.c **** 
 781:Generated_Source\PSoC4/MOTOR.c ****     }
 782:Generated_Source\PSoC4/MOTOR.c **** 
 783:Generated_Source\PSoC4/MOTOR.c **** 
 784:Generated_Source\PSoC4/MOTOR.c ****     /*******************************************************************************
 785:Generated_Source\PSoC4/MOTOR.c ****     * Function Name: MOTOR_SetRxAddressMode
 786:Generated_Source\PSoC4/MOTOR.c ****     ********************************************************************************
 787:Generated_Source\PSoC4/MOTOR.c ****     *
 788:Generated_Source\PSoC4/MOTOR.c ****     * Summary:
 789:Generated_Source\PSoC4/MOTOR.c ****     *  Sets the software controlled Addressing mode used by the RX portion of the
 790:Generated_Source\PSoC4/MOTOR.c ****     *  UART.
 791:Generated_Source\PSoC4/MOTOR.c ****     *
 792:Generated_Source\PSoC4/MOTOR.c ****     * Parameters:
 793:Generated_Source\PSoC4/MOTOR.c ****     *  addressMode: Enumerated value indicating the mode of RX addressing
 794:Generated_Source\PSoC4/MOTOR.c ****     *  MOTOR__B_UART__AM_SW_BYTE_BYTE -  Software Byte-by-Byte address
 795:Generated_Source\PSoC4/MOTOR.c ****     *                                               detection
 796:Generated_Source\PSoC4/MOTOR.c ****     *  MOTOR__B_UART__AM_SW_DETECT_TO_BUFFER - Software Detect to Buffer
 797:Generated_Source\PSoC4/MOTOR.c ****     *                                               address detection
 798:Generated_Source\PSoC4/MOTOR.c ****     *  MOTOR__B_UART__AM_HW_BYTE_BY_BYTE - Hardware Byte-by-Byte address
 799:Generated_Source\PSoC4/MOTOR.c ****     *                                               detection
 800:Generated_Source\PSoC4/MOTOR.c ****     *  MOTOR__B_UART__AM_HW_DETECT_TO_BUFFER - Hardware Detect to Buffer
ARM GAS  C:\Users\Andres\AppData\Local\Temp\ccONmjfL.s 			page 19


 801:Generated_Source\PSoC4/MOTOR.c ****     *                                               address detection
 802:Generated_Source\PSoC4/MOTOR.c ****     *  MOTOR__B_UART__AM_NONE - No address detection
 803:Generated_Source\PSoC4/MOTOR.c ****     *
 804:Generated_Source\PSoC4/MOTOR.c ****     * Return:
 805:Generated_Source\PSoC4/MOTOR.c ****     *  None.
 806:Generated_Source\PSoC4/MOTOR.c ****     *
 807:Generated_Source\PSoC4/MOTOR.c ****     * Global Variables:
 808:Generated_Source\PSoC4/MOTOR.c ****     *  MOTOR_rxAddressMode - the parameter stored in this variable for
 809:Generated_Source\PSoC4/MOTOR.c ****     *   the farther usage in RX ISR.
 810:Generated_Source\PSoC4/MOTOR.c ****     *  MOTOR_rxAddressDetected - set to initial state (0).
 811:Generated_Source\PSoC4/MOTOR.c ****     *
 812:Generated_Source\PSoC4/MOTOR.c ****     *******************************************************************************/
 813:Generated_Source\PSoC4/MOTOR.c ****     void MOTOR_SetRxAddressMode(uint8 addressMode)
 814:Generated_Source\PSoC4/MOTOR.c ****                                                         
 815:Generated_Source\PSoC4/MOTOR.c ****     {
 816:Generated_Source\PSoC4/MOTOR.c ****         #if(MOTOR_RXHW_ADDRESS_ENABLED)
 817:Generated_Source\PSoC4/MOTOR.c ****             #if(MOTOR_CONTROL_REG_REMOVED)
 818:Generated_Source\PSoC4/MOTOR.c ****                 if(0u != addressMode)
 819:Generated_Source\PSoC4/MOTOR.c ****                 {
 820:Generated_Source\PSoC4/MOTOR.c ****                     /* Suppress compiler warning */
 821:Generated_Source\PSoC4/MOTOR.c ****                 }
 822:Generated_Source\PSoC4/MOTOR.c ****             #else /* MOTOR_CONTROL_REG_REMOVED */
 823:Generated_Source\PSoC4/MOTOR.c ****                 uint8 tmpCtrl;
 824:Generated_Source\PSoC4/MOTOR.c ****                 tmpCtrl = MOTOR_CONTROL_REG & (uint8)~MOTOR_CTRL_RXADDR_MODE_MASK;
 825:Generated_Source\PSoC4/MOTOR.c ****                 tmpCtrl |= (uint8)(addressMode << MOTOR_CTRL_RXADDR_MODE0_SHIFT);
 826:Generated_Source\PSoC4/MOTOR.c ****                 MOTOR_CONTROL_REG = tmpCtrl;
 827:Generated_Source\PSoC4/MOTOR.c **** 
 828:Generated_Source\PSoC4/MOTOR.c ****                 #if(MOTOR_RX_INTERRUPT_ENABLED && \
 829:Generated_Source\PSoC4/MOTOR.c ****                    (MOTOR_RXBUFFERSIZE > MOTOR_FIFO_LENGTH) )
 830:Generated_Source\PSoC4/MOTOR.c ****                     MOTOR_rxAddressMode = addressMode;
 831:Generated_Source\PSoC4/MOTOR.c ****                     MOTOR_rxAddressDetected = 0u;
 832:Generated_Source\PSoC4/MOTOR.c ****                 #endif /* End MOTOR_RXBUFFERSIZE > MOTOR_FIFO_LENGTH*/
 833:Generated_Source\PSoC4/MOTOR.c ****             #endif /* End MOTOR_CONTROL_REG_REMOVED */
 834:Generated_Source\PSoC4/MOTOR.c ****         #else /* MOTOR_RXHW_ADDRESS_ENABLED */
 835:Generated_Source\PSoC4/MOTOR.c ****             if(0u != addressMode)
 836:Generated_Source\PSoC4/MOTOR.c ****             {
 837:Generated_Source\PSoC4/MOTOR.c ****                 /* Suppress compiler warning */
 838:Generated_Source\PSoC4/MOTOR.c ****             }
 839:Generated_Source\PSoC4/MOTOR.c ****         #endif /* End MOTOR_RXHW_ADDRESS_ENABLED */
 840:Generated_Source\PSoC4/MOTOR.c ****     }
 841:Generated_Source\PSoC4/MOTOR.c **** 
 842:Generated_Source\PSoC4/MOTOR.c **** 
 843:Generated_Source\PSoC4/MOTOR.c ****     /*******************************************************************************
 844:Generated_Source\PSoC4/MOTOR.c ****     * Function Name: MOTOR_SetRxAddress1
 845:Generated_Source\PSoC4/MOTOR.c ****     ********************************************************************************
 846:Generated_Source\PSoC4/MOTOR.c ****     *
 847:Generated_Source\PSoC4/MOTOR.c ****     * Summary:
 848:Generated_Source\PSoC4/MOTOR.c ****     *  Sets the first of two hardware-detectable receiver addresses.
 849:Generated_Source\PSoC4/MOTOR.c ****     *
 850:Generated_Source\PSoC4/MOTOR.c ****     * Parameters:
 851:Generated_Source\PSoC4/MOTOR.c ****     *  address: Address #1 for hardware address detection.
 852:Generated_Source\PSoC4/MOTOR.c ****     *
 853:Generated_Source\PSoC4/MOTOR.c ****     * Return:
 854:Generated_Source\PSoC4/MOTOR.c ****     *  None.
 855:Generated_Source\PSoC4/MOTOR.c ****     *
 856:Generated_Source\PSoC4/MOTOR.c ****     *******************************************************************************/
 857:Generated_Source\PSoC4/MOTOR.c ****     void MOTOR_SetRxAddress1(uint8 address) 
ARM GAS  C:\Users\Andres\AppData\Local\Temp\ccONmjfL.s 			page 20


 858:Generated_Source\PSoC4/MOTOR.c ****     {
 859:Generated_Source\PSoC4/MOTOR.c ****         MOTOR_RXADDRESS1_REG = address;
 860:Generated_Source\PSoC4/MOTOR.c ****     }
 861:Generated_Source\PSoC4/MOTOR.c **** 
 862:Generated_Source\PSoC4/MOTOR.c **** 
 863:Generated_Source\PSoC4/MOTOR.c ****     /*******************************************************************************
 864:Generated_Source\PSoC4/MOTOR.c ****     * Function Name: MOTOR_SetRxAddress2
 865:Generated_Source\PSoC4/MOTOR.c ****     ********************************************************************************
 866:Generated_Source\PSoC4/MOTOR.c ****     *
 867:Generated_Source\PSoC4/MOTOR.c ****     * Summary:
 868:Generated_Source\PSoC4/MOTOR.c ****     *  Sets the second of two hardware-detectable receiver addresses.
 869:Generated_Source\PSoC4/MOTOR.c ****     *
 870:Generated_Source\PSoC4/MOTOR.c ****     * Parameters:
 871:Generated_Source\PSoC4/MOTOR.c ****     *  address: Address #2 for hardware address detection.
 872:Generated_Source\PSoC4/MOTOR.c ****     *
 873:Generated_Source\PSoC4/MOTOR.c ****     * Return:
 874:Generated_Source\PSoC4/MOTOR.c ****     *  None.
 875:Generated_Source\PSoC4/MOTOR.c ****     *
 876:Generated_Source\PSoC4/MOTOR.c ****     *******************************************************************************/
 877:Generated_Source\PSoC4/MOTOR.c ****     void MOTOR_SetRxAddress2(uint8 address) 
 878:Generated_Source\PSoC4/MOTOR.c ****     {
 879:Generated_Source\PSoC4/MOTOR.c ****         MOTOR_RXADDRESS2_REG = address;
 880:Generated_Source\PSoC4/MOTOR.c ****     }
 881:Generated_Source\PSoC4/MOTOR.c **** 
 882:Generated_Source\PSoC4/MOTOR.c **** #endif  /* MOTOR_RX_ENABLED || MOTOR_HD_ENABLED*/
 883:Generated_Source\PSoC4/MOTOR.c **** 
 884:Generated_Source\PSoC4/MOTOR.c **** 
 885:Generated_Source\PSoC4/MOTOR.c **** #if( (MOTOR_TX_ENABLED) || (MOTOR_HD_ENABLED) )
 886:Generated_Source\PSoC4/MOTOR.c ****     /*******************************************************************************
 887:Generated_Source\PSoC4/MOTOR.c ****     * Function Name: MOTOR_SetTxInterruptMode
 888:Generated_Source\PSoC4/MOTOR.c ****     ********************************************************************************
 889:Generated_Source\PSoC4/MOTOR.c ****     *
 890:Generated_Source\PSoC4/MOTOR.c ****     * Summary:
 891:Generated_Source\PSoC4/MOTOR.c ****     *  Configures the TX interrupt sources to be enabled, but does not enable the
 892:Generated_Source\PSoC4/MOTOR.c ****     *  interrupt.
 893:Generated_Source\PSoC4/MOTOR.c ****     *
 894:Generated_Source\PSoC4/MOTOR.c ****     * Parameters:
 895:Generated_Source\PSoC4/MOTOR.c ****     *  intSrc: Bit field containing the TX interrupt sources to enable
 896:Generated_Source\PSoC4/MOTOR.c ****     *   MOTOR_TX_STS_COMPLETE        Interrupt on TX byte complete
 897:Generated_Source\PSoC4/MOTOR.c ****     *   MOTOR_TX_STS_FIFO_EMPTY      Interrupt when TX FIFO is empty
 898:Generated_Source\PSoC4/MOTOR.c ****     *   MOTOR_TX_STS_FIFO_FULL       Interrupt when TX FIFO is full
 899:Generated_Source\PSoC4/MOTOR.c ****     *   MOTOR_TX_STS_FIFO_NOT_FULL   Interrupt when TX FIFO is not full
 900:Generated_Source\PSoC4/MOTOR.c ****     *
 901:Generated_Source\PSoC4/MOTOR.c ****     * Return:
 902:Generated_Source\PSoC4/MOTOR.c ****     *  None.
 903:Generated_Source\PSoC4/MOTOR.c ****     *
 904:Generated_Source\PSoC4/MOTOR.c ****     * Theory:
 905:Generated_Source\PSoC4/MOTOR.c ****     *  Enables the output of specific status bits to the interrupt controller
 906:Generated_Source\PSoC4/MOTOR.c ****     *
 907:Generated_Source\PSoC4/MOTOR.c ****     *******************************************************************************/
 908:Generated_Source\PSoC4/MOTOR.c ****     void MOTOR_SetTxInterruptMode(uint8 intSrc) 
 909:Generated_Source\PSoC4/MOTOR.c ****     {
 221              		.loc 1 909 0
 222              		.cfi_startproc
 223              	.LVL13:
 910:Generated_Source\PSoC4/MOTOR.c ****         MOTOR_TXSTATUS_MASK_REG = intSrc;
 224              		.loc 1 910 0
ARM GAS  C:\Users\Andres\AppData\Local\Temp\ccONmjfL.s 			page 21


 225 0000 014B     		ldr	r3, .L17
 226 0002 1870     		strb	r0, [r3]
 911:Generated_Source\PSoC4/MOTOR.c ****     }
 227              		.loc 1 911 0
 228              		@ sp needed
 229 0004 7047     		bx	lr
 230              	.L18:
 231 0006 C046     		.align	2
 232              	.L17:
 233 0008 81000F40 		.word	1074724993
 234              		.cfi_endproc
 235              	.LFE7:
 236              		.size	MOTOR_SetTxInterruptMode, .-MOTOR_SetTxInterruptMode
 237              		.section	.text.MOTOR_WriteTxData,"ax",%progbits
 238              		.align	2
 239              		.global	MOTOR_WriteTxData
 240              		.code	16
 241              		.thumb_func
 242              		.type	MOTOR_WriteTxData, %function
 243              	MOTOR_WriteTxData:
 244              	.LFB8:
 912:Generated_Source\PSoC4/MOTOR.c **** 
 913:Generated_Source\PSoC4/MOTOR.c **** 
 914:Generated_Source\PSoC4/MOTOR.c ****     /*******************************************************************************
 915:Generated_Source\PSoC4/MOTOR.c ****     * Function Name: MOTOR_WriteTxData
 916:Generated_Source\PSoC4/MOTOR.c ****     ********************************************************************************
 917:Generated_Source\PSoC4/MOTOR.c ****     *
 918:Generated_Source\PSoC4/MOTOR.c ****     * Summary:
 919:Generated_Source\PSoC4/MOTOR.c ****     *  Places a byte of data into the transmit buffer to be sent when the bus is
 920:Generated_Source\PSoC4/MOTOR.c ****     *  available without checking the TX status register. You must check status
 921:Generated_Source\PSoC4/MOTOR.c ****     *  separately.
 922:Generated_Source\PSoC4/MOTOR.c ****     *
 923:Generated_Source\PSoC4/MOTOR.c ****     * Parameters:
 924:Generated_Source\PSoC4/MOTOR.c ****     *  txDataByte: data byte
 925:Generated_Source\PSoC4/MOTOR.c ****     *
 926:Generated_Source\PSoC4/MOTOR.c ****     * Return:
 927:Generated_Source\PSoC4/MOTOR.c ****     * None.
 928:Generated_Source\PSoC4/MOTOR.c ****     *
 929:Generated_Source\PSoC4/MOTOR.c ****     * Global Variables:
 930:Generated_Source\PSoC4/MOTOR.c ****     *  MOTOR_txBuffer - RAM buffer pointer for save data for transmission
 931:Generated_Source\PSoC4/MOTOR.c ****     *  MOTOR_txBufferWrite - cyclic index for write to txBuffer,
 932:Generated_Source\PSoC4/MOTOR.c ****     *    incremented after each byte saved to buffer.
 933:Generated_Source\PSoC4/MOTOR.c ****     *  MOTOR_txBufferRead - cyclic index for read from txBuffer,
 934:Generated_Source\PSoC4/MOTOR.c ****     *    checked to identify the condition to write to FIFO directly or to TX buffer
 935:Generated_Source\PSoC4/MOTOR.c ****     *  MOTOR_initVar - checked to identify that the component has been
 936:Generated_Source\PSoC4/MOTOR.c ****     *    initialized.
 937:Generated_Source\PSoC4/MOTOR.c ****     *
 938:Generated_Source\PSoC4/MOTOR.c ****     * Reentrant:
 939:Generated_Source\PSoC4/MOTOR.c ****     *  No.
 940:Generated_Source\PSoC4/MOTOR.c ****     *
 941:Generated_Source\PSoC4/MOTOR.c ****     *******************************************************************************/
 942:Generated_Source\PSoC4/MOTOR.c ****     void MOTOR_WriteTxData(uint8 txDataByte) 
 943:Generated_Source\PSoC4/MOTOR.c ****     {
 245              		.loc 1 943 0
 246              		.cfi_startproc
 247              	.LVL14:
 944:Generated_Source\PSoC4/MOTOR.c ****         /* If not Initialized then skip this function*/
ARM GAS  C:\Users\Andres\AppData\Local\Temp\ccONmjfL.s 			page 22


 945:Generated_Source\PSoC4/MOTOR.c ****         if(MOTOR_initVar != 0u)
 248              		.loc 1 945 0
 249 0000 034B     		ldr	r3, .L21
 250 0002 1B78     		ldrb	r3, [r3]
 251 0004 002B     		cmp	r3, #0
 252 0006 01D0     		beq	.L19
 946:Generated_Source\PSoC4/MOTOR.c ****         {
 947:Generated_Source\PSoC4/MOTOR.c ****         #if (MOTOR_TX_INTERRUPT_ENABLED)
 948:Generated_Source\PSoC4/MOTOR.c **** 
 949:Generated_Source\PSoC4/MOTOR.c ****             /* Protect variables that could change on interrupt. */
 950:Generated_Source\PSoC4/MOTOR.c ****             MOTOR_DisableTxInt();
 951:Generated_Source\PSoC4/MOTOR.c **** 
 952:Generated_Source\PSoC4/MOTOR.c ****             if( (MOTOR_txBufferRead == MOTOR_txBufferWrite) &&
 953:Generated_Source\PSoC4/MOTOR.c ****                 ((MOTOR_TXSTATUS_REG & MOTOR_TX_STS_FIFO_FULL) == 0u) )
 954:Generated_Source\PSoC4/MOTOR.c ****             {
 955:Generated_Source\PSoC4/MOTOR.c ****                 /* Add directly to the FIFO. */
 956:Generated_Source\PSoC4/MOTOR.c ****                 MOTOR_TXDATA_REG = txDataByte;
 957:Generated_Source\PSoC4/MOTOR.c ****             }
 958:Generated_Source\PSoC4/MOTOR.c ****             else
 959:Generated_Source\PSoC4/MOTOR.c ****             {
 960:Generated_Source\PSoC4/MOTOR.c ****                 if(MOTOR_txBufferWrite >= MOTOR_TX_BUFFER_SIZE)
 961:Generated_Source\PSoC4/MOTOR.c ****                 {
 962:Generated_Source\PSoC4/MOTOR.c ****                     MOTOR_txBufferWrite = 0u;
 963:Generated_Source\PSoC4/MOTOR.c ****                 }
 964:Generated_Source\PSoC4/MOTOR.c **** 
 965:Generated_Source\PSoC4/MOTOR.c ****                 MOTOR_txBuffer[MOTOR_txBufferWrite] = txDataByte;
 966:Generated_Source\PSoC4/MOTOR.c **** 
 967:Generated_Source\PSoC4/MOTOR.c ****                 /* Add to the software buffer. */
 968:Generated_Source\PSoC4/MOTOR.c ****                 MOTOR_txBufferWrite++;
 969:Generated_Source\PSoC4/MOTOR.c ****             }
 970:Generated_Source\PSoC4/MOTOR.c **** 
 971:Generated_Source\PSoC4/MOTOR.c ****             MOTOR_EnableTxInt();
 972:Generated_Source\PSoC4/MOTOR.c **** 
 973:Generated_Source\PSoC4/MOTOR.c ****         #else
 974:Generated_Source\PSoC4/MOTOR.c **** 
 975:Generated_Source\PSoC4/MOTOR.c ****             /* Add directly to the FIFO. */
 976:Generated_Source\PSoC4/MOTOR.c ****             MOTOR_TXDATA_REG = txDataByte;
 253              		.loc 1 976 0
 254 0008 024B     		ldr	r3, .L21+4
 255 000a 1870     		strb	r0, [r3]
 256              	.L19:
 977:Generated_Source\PSoC4/MOTOR.c **** 
 978:Generated_Source\PSoC4/MOTOR.c ****         #endif /*(MOTOR_TX_INTERRUPT_ENABLED) */
 979:Generated_Source\PSoC4/MOTOR.c ****         }
 980:Generated_Source\PSoC4/MOTOR.c ****     }
 257              		.loc 1 980 0
 258              		@ sp needed
 259 000c 7047     		bx	lr
 260              	.L22:
 261 000e C046     		.align	2
 262              	.L21:
 263 0010 00000000 		.word	.LANCHOR0
 264 0014 41000F40 		.word	1074724929
 265              		.cfi_endproc
 266              	.LFE8:
 267              		.size	MOTOR_WriteTxData, .-MOTOR_WriteTxData
 268              		.section	.text.MOTOR_ReadTxStatus,"ax",%progbits
ARM GAS  C:\Users\Andres\AppData\Local\Temp\ccONmjfL.s 			page 23


 269              		.align	2
 270              		.global	MOTOR_ReadTxStatus
 271              		.code	16
 272              		.thumb_func
 273              		.type	MOTOR_ReadTxStatus, %function
 274              	MOTOR_ReadTxStatus:
 275              	.LFB9:
 981:Generated_Source\PSoC4/MOTOR.c **** 
 982:Generated_Source\PSoC4/MOTOR.c **** 
 983:Generated_Source\PSoC4/MOTOR.c ****     /*******************************************************************************
 984:Generated_Source\PSoC4/MOTOR.c ****     * Function Name: MOTOR_ReadTxStatus
 985:Generated_Source\PSoC4/MOTOR.c ****     ********************************************************************************
 986:Generated_Source\PSoC4/MOTOR.c ****     *
 987:Generated_Source\PSoC4/MOTOR.c ****     * Summary:
 988:Generated_Source\PSoC4/MOTOR.c ****     *  Reads the status register for the TX portion of the UART.
 989:Generated_Source\PSoC4/MOTOR.c ****     *
 990:Generated_Source\PSoC4/MOTOR.c ****     * Parameters:
 991:Generated_Source\PSoC4/MOTOR.c ****     *  None.
 992:Generated_Source\PSoC4/MOTOR.c ****     *
 993:Generated_Source\PSoC4/MOTOR.c ****     * Return:
 994:Generated_Source\PSoC4/MOTOR.c ****     *  Contents of the status register
 995:Generated_Source\PSoC4/MOTOR.c ****     *
 996:Generated_Source\PSoC4/MOTOR.c ****     * Theory:
 997:Generated_Source\PSoC4/MOTOR.c ****     *  This function reads the TX status register, which is cleared on read.
 998:Generated_Source\PSoC4/MOTOR.c ****     *  It is up to the user to handle all bits in this return value accordingly,
 999:Generated_Source\PSoC4/MOTOR.c ****     *  even if the bit was not enabled as an interrupt source the event happened
1000:Generated_Source\PSoC4/MOTOR.c ****     *  and must be handled accordingly.
1001:Generated_Source\PSoC4/MOTOR.c ****     *
1002:Generated_Source\PSoC4/MOTOR.c ****     *******************************************************************************/
1003:Generated_Source\PSoC4/MOTOR.c ****     uint8 MOTOR_ReadTxStatus(void) 
1004:Generated_Source\PSoC4/MOTOR.c ****     {
 276              		.loc 1 1004 0
 277              		.cfi_startproc
1005:Generated_Source\PSoC4/MOTOR.c ****         return(MOTOR_TXSTATUS_REG);
 278              		.loc 1 1005 0
 279 0000 014B     		ldr	r3, .L24
 280 0002 1878     		ldrb	r0, [r3]
 281 0004 C0B2     		uxtb	r0, r0
1006:Generated_Source\PSoC4/MOTOR.c ****     }
 282              		.loc 1 1006 0
 283              		@ sp needed
 284 0006 7047     		bx	lr
 285              	.L25:
 286              		.align	2
 287              	.L24:
 288 0008 61000F40 		.word	1074724961
 289              		.cfi_endproc
 290              	.LFE9:
 291              		.size	MOTOR_ReadTxStatus, .-MOTOR_ReadTxStatus
 292              		.section	.text.MOTOR_PutChar,"ax",%progbits
 293              		.align	2
 294              		.global	MOTOR_PutChar
 295              		.code	16
 296              		.thumb_func
 297              		.type	MOTOR_PutChar, %function
 298              	MOTOR_PutChar:
 299              	.LFB10:
ARM GAS  C:\Users\Andres\AppData\Local\Temp\ccONmjfL.s 			page 24


1007:Generated_Source\PSoC4/MOTOR.c **** 
1008:Generated_Source\PSoC4/MOTOR.c **** 
1009:Generated_Source\PSoC4/MOTOR.c ****     /*******************************************************************************
1010:Generated_Source\PSoC4/MOTOR.c ****     * Function Name: MOTOR_PutChar
1011:Generated_Source\PSoC4/MOTOR.c ****     ********************************************************************************
1012:Generated_Source\PSoC4/MOTOR.c ****     *
1013:Generated_Source\PSoC4/MOTOR.c ****     * Summary:
1014:Generated_Source\PSoC4/MOTOR.c ****     *  Puts a byte of data into the transmit buffer to be sent when the bus is
1015:Generated_Source\PSoC4/MOTOR.c ****     *  available. This is a blocking API that waits until the TX buffer has room to
1016:Generated_Source\PSoC4/MOTOR.c ****     *  hold the data.
1017:Generated_Source\PSoC4/MOTOR.c ****     *
1018:Generated_Source\PSoC4/MOTOR.c ****     * Parameters:
1019:Generated_Source\PSoC4/MOTOR.c ****     *  txDataByte: Byte containing the data to transmit
1020:Generated_Source\PSoC4/MOTOR.c ****     *
1021:Generated_Source\PSoC4/MOTOR.c ****     * Return:
1022:Generated_Source\PSoC4/MOTOR.c ****     *  None.
1023:Generated_Source\PSoC4/MOTOR.c ****     *
1024:Generated_Source\PSoC4/MOTOR.c ****     * Global Variables:
1025:Generated_Source\PSoC4/MOTOR.c ****     *  MOTOR_txBuffer - RAM buffer pointer for save data for transmission
1026:Generated_Source\PSoC4/MOTOR.c ****     *  MOTOR_txBufferWrite - cyclic index for write to txBuffer,
1027:Generated_Source\PSoC4/MOTOR.c ****     *     checked to identify free space in txBuffer and incremented after each byte
1028:Generated_Source\PSoC4/MOTOR.c ****     *     saved to buffer.
1029:Generated_Source\PSoC4/MOTOR.c ****     *  MOTOR_txBufferRead - cyclic index for read from txBuffer,
1030:Generated_Source\PSoC4/MOTOR.c ****     *     checked to identify free space in txBuffer.
1031:Generated_Source\PSoC4/MOTOR.c ****     *  MOTOR_initVar - checked to identify that the component has been
1032:Generated_Source\PSoC4/MOTOR.c ****     *     initialized.
1033:Generated_Source\PSoC4/MOTOR.c ****     *
1034:Generated_Source\PSoC4/MOTOR.c ****     * Reentrant:
1035:Generated_Source\PSoC4/MOTOR.c ****     *  No.
1036:Generated_Source\PSoC4/MOTOR.c ****     *
1037:Generated_Source\PSoC4/MOTOR.c ****     * Theory:
1038:Generated_Source\PSoC4/MOTOR.c ****     *  Allows the user to transmit any byte of data in a single transfer
1039:Generated_Source\PSoC4/MOTOR.c ****     *
1040:Generated_Source\PSoC4/MOTOR.c ****     *******************************************************************************/
1041:Generated_Source\PSoC4/MOTOR.c ****     void MOTOR_PutChar(uint8 txDataByte) 
1042:Generated_Source\PSoC4/MOTOR.c ****     {
 300              		.loc 1 1042 0
 301              		.cfi_startproc
 302              	.LVL15:
 303              	.L27:
1043:Generated_Source\PSoC4/MOTOR.c ****     #if (MOTOR_TX_INTERRUPT_ENABLED)
1044:Generated_Source\PSoC4/MOTOR.c ****         /* The temporary output pointer is used since it takes two instructions
1045:Generated_Source\PSoC4/MOTOR.c ****         *  to increment with a wrap, and we can't risk doing that with the real
1046:Generated_Source\PSoC4/MOTOR.c ****         *  pointer and getting an interrupt in between instructions.
1047:Generated_Source\PSoC4/MOTOR.c ****         */
1048:Generated_Source\PSoC4/MOTOR.c ****         uint8 locTxBufferWrite;
1049:Generated_Source\PSoC4/MOTOR.c ****         uint8 locTxBufferRead;
1050:Generated_Source\PSoC4/MOTOR.c **** 
1051:Generated_Source\PSoC4/MOTOR.c ****         do
1052:Generated_Source\PSoC4/MOTOR.c ****         { /* Block if software buffer is full, so we don't overwrite. */
1053:Generated_Source\PSoC4/MOTOR.c **** 
1054:Generated_Source\PSoC4/MOTOR.c ****         #if ((MOTOR_TX_BUFFER_SIZE > MOTOR_MAX_BYTE_VALUE) && (CY_PSOC3))
1055:Generated_Source\PSoC4/MOTOR.c ****             /* Disable TX interrupt to protect variables from modification */
1056:Generated_Source\PSoC4/MOTOR.c ****             MOTOR_DisableTxInt();
1057:Generated_Source\PSoC4/MOTOR.c ****         #endif /* (MOTOR_TX_BUFFER_SIZE > MOTOR_MAX_BYTE_VALUE) && (CY_PSOC3) */
1058:Generated_Source\PSoC4/MOTOR.c **** 
1059:Generated_Source\PSoC4/MOTOR.c ****             locTxBufferWrite = MOTOR_txBufferWrite;
ARM GAS  C:\Users\Andres\AppData\Local\Temp\ccONmjfL.s 			page 25


1060:Generated_Source\PSoC4/MOTOR.c ****             locTxBufferRead  = MOTOR_txBufferRead;
1061:Generated_Source\PSoC4/MOTOR.c **** 
1062:Generated_Source\PSoC4/MOTOR.c ****         #if ((MOTOR_TX_BUFFER_SIZE > MOTOR_MAX_BYTE_VALUE) && (CY_PSOC3))
1063:Generated_Source\PSoC4/MOTOR.c ****             /* Enable interrupt to continue transmission */
1064:Generated_Source\PSoC4/MOTOR.c ****             MOTOR_EnableTxInt();
1065:Generated_Source\PSoC4/MOTOR.c ****         #endif /* (MOTOR_TX_BUFFER_SIZE > MOTOR_MAX_BYTE_VALUE) && (CY_PSOC3) */
1066:Generated_Source\PSoC4/MOTOR.c ****         }
1067:Generated_Source\PSoC4/MOTOR.c ****         while( (locTxBufferWrite < locTxBufferRead) ? (locTxBufferWrite == (locTxBufferRead - 1u)) 
1068:Generated_Source\PSoC4/MOTOR.c ****                                 ((locTxBufferWrite - locTxBufferRead) ==
1069:Generated_Source\PSoC4/MOTOR.c ****                                 (uint8)(MOTOR_TX_BUFFER_SIZE - 1u)) );
1070:Generated_Source\PSoC4/MOTOR.c **** 
1071:Generated_Source\PSoC4/MOTOR.c ****         if( (locTxBufferRead == locTxBufferWrite) &&
1072:Generated_Source\PSoC4/MOTOR.c ****             ((MOTOR_TXSTATUS_REG & MOTOR_TX_STS_FIFO_FULL) == 0u) )
1073:Generated_Source\PSoC4/MOTOR.c ****         {
1074:Generated_Source\PSoC4/MOTOR.c ****             /* Add directly to the FIFO */
1075:Generated_Source\PSoC4/MOTOR.c ****             MOTOR_TXDATA_REG = txDataByte;
1076:Generated_Source\PSoC4/MOTOR.c ****         }
1077:Generated_Source\PSoC4/MOTOR.c ****         else
1078:Generated_Source\PSoC4/MOTOR.c ****         {
1079:Generated_Source\PSoC4/MOTOR.c ****             if(locTxBufferWrite >= MOTOR_TX_BUFFER_SIZE)
1080:Generated_Source\PSoC4/MOTOR.c ****             {
1081:Generated_Source\PSoC4/MOTOR.c ****                 locTxBufferWrite = 0u;
1082:Generated_Source\PSoC4/MOTOR.c ****             }
1083:Generated_Source\PSoC4/MOTOR.c ****             /* Add to the software buffer. */
1084:Generated_Source\PSoC4/MOTOR.c ****             MOTOR_txBuffer[locTxBufferWrite] = txDataByte;
1085:Generated_Source\PSoC4/MOTOR.c ****             locTxBufferWrite++;
1086:Generated_Source\PSoC4/MOTOR.c **** 
1087:Generated_Source\PSoC4/MOTOR.c ****             /* Finally, update the real output pointer */
1088:Generated_Source\PSoC4/MOTOR.c ****         #if ((MOTOR_TX_BUFFER_SIZE > MOTOR_MAX_BYTE_VALUE) && (CY_PSOC3))
1089:Generated_Source\PSoC4/MOTOR.c ****             MOTOR_DisableTxInt();
1090:Generated_Source\PSoC4/MOTOR.c ****         #endif /* (MOTOR_TX_BUFFER_SIZE > MOTOR_MAX_BYTE_VALUE) && (CY_PSOC3) */
1091:Generated_Source\PSoC4/MOTOR.c **** 
1092:Generated_Source\PSoC4/MOTOR.c ****             MOTOR_txBufferWrite = locTxBufferWrite;
1093:Generated_Source\PSoC4/MOTOR.c **** 
1094:Generated_Source\PSoC4/MOTOR.c ****         #if ((MOTOR_TX_BUFFER_SIZE > MOTOR_MAX_BYTE_VALUE) && (CY_PSOC3))
1095:Generated_Source\PSoC4/MOTOR.c ****             MOTOR_EnableTxInt();
1096:Generated_Source\PSoC4/MOTOR.c ****         #endif /* (MOTOR_TX_BUFFER_SIZE > MOTOR_MAX_BYTE_VALUE) && (CY_PSOC3) */
1097:Generated_Source\PSoC4/MOTOR.c **** 
1098:Generated_Source\PSoC4/MOTOR.c ****             if(0u != (MOTOR_TXSTATUS_REG & MOTOR_TX_STS_FIFO_EMPTY))
1099:Generated_Source\PSoC4/MOTOR.c ****             {
1100:Generated_Source\PSoC4/MOTOR.c ****                 /* Trigger TX interrupt to send software buffer */
1101:Generated_Source\PSoC4/MOTOR.c ****                 MOTOR_SetPendingTxInt();
1102:Generated_Source\PSoC4/MOTOR.c ****             }
1103:Generated_Source\PSoC4/MOTOR.c ****         }
1104:Generated_Source\PSoC4/MOTOR.c **** 
1105:Generated_Source\PSoC4/MOTOR.c ****     #else
1106:Generated_Source\PSoC4/MOTOR.c **** 
1107:Generated_Source\PSoC4/MOTOR.c ****         while((MOTOR_TXSTATUS_REG & MOTOR_TX_STS_FIFO_FULL) != 0u)
 304              		.loc 1 1107 0 discriminator 1
 305 0000 034B     		ldr	r3, .L28
 306 0002 1B78     		ldrb	r3, [r3]
 307 0004 5B07     		lsl	r3, r3, #29
 308 0006 FBD4     		bmi	.L27
1108:Generated_Source\PSoC4/MOTOR.c ****         {
1109:Generated_Source\PSoC4/MOTOR.c ****             /* Wait for room in the FIFO */
1110:Generated_Source\PSoC4/MOTOR.c ****         }
1111:Generated_Source\PSoC4/MOTOR.c **** 
ARM GAS  C:\Users\Andres\AppData\Local\Temp\ccONmjfL.s 			page 26


1112:Generated_Source\PSoC4/MOTOR.c ****         /* Add directly to the FIFO */
1113:Generated_Source\PSoC4/MOTOR.c ****         MOTOR_TXDATA_REG = txDataByte;
 309              		.loc 1 1113 0
 310 0008 024B     		ldr	r3, .L28+4
 311 000a 1870     		strb	r0, [r3]
1114:Generated_Source\PSoC4/MOTOR.c **** 
1115:Generated_Source\PSoC4/MOTOR.c ****     #endif /* MOTOR_TX_INTERRUPT_ENABLED */
1116:Generated_Source\PSoC4/MOTOR.c ****     }
 312              		.loc 1 1116 0
 313              		@ sp needed
 314 000c 7047     		bx	lr
 315              	.L29:
 316 000e C046     		.align	2
 317              	.L28:
 318 0010 61000F40 		.word	1074724961
 319 0014 41000F40 		.word	1074724929
 320              		.cfi_endproc
 321              	.LFE10:
 322              		.size	MOTOR_PutChar, .-MOTOR_PutChar
 323              		.section	.text.MOTOR_PutString,"ax",%progbits
 324              		.align	2
 325              		.global	MOTOR_PutString
 326              		.code	16
 327              		.thumb_func
 328              		.type	MOTOR_PutString, %function
 329              	MOTOR_PutString:
 330              	.LFB11:
1117:Generated_Source\PSoC4/MOTOR.c **** 
1118:Generated_Source\PSoC4/MOTOR.c **** 
1119:Generated_Source\PSoC4/MOTOR.c ****     /*******************************************************************************
1120:Generated_Source\PSoC4/MOTOR.c ****     * Function Name: MOTOR_PutString
1121:Generated_Source\PSoC4/MOTOR.c ****     ********************************************************************************
1122:Generated_Source\PSoC4/MOTOR.c ****     *
1123:Generated_Source\PSoC4/MOTOR.c ****     * Summary:
1124:Generated_Source\PSoC4/MOTOR.c ****     *  Sends a NULL terminated string to the TX buffer for transmission.
1125:Generated_Source\PSoC4/MOTOR.c ****     *
1126:Generated_Source\PSoC4/MOTOR.c ****     * Parameters:
1127:Generated_Source\PSoC4/MOTOR.c ****     *  string[]: Pointer to the null terminated string array residing in RAM or ROM
1128:Generated_Source\PSoC4/MOTOR.c ****     *
1129:Generated_Source\PSoC4/MOTOR.c ****     * Return:
1130:Generated_Source\PSoC4/MOTOR.c ****     *  None.
1131:Generated_Source\PSoC4/MOTOR.c ****     *
1132:Generated_Source\PSoC4/MOTOR.c ****     * Global Variables:
1133:Generated_Source\PSoC4/MOTOR.c ****     *  MOTOR_initVar - checked to identify that the component has been
1134:Generated_Source\PSoC4/MOTOR.c ****     *     initialized.
1135:Generated_Source\PSoC4/MOTOR.c ****     *
1136:Generated_Source\PSoC4/MOTOR.c ****     * Reentrant:
1137:Generated_Source\PSoC4/MOTOR.c ****     *  No.
1138:Generated_Source\PSoC4/MOTOR.c ****     *
1139:Generated_Source\PSoC4/MOTOR.c ****     * Theory:
1140:Generated_Source\PSoC4/MOTOR.c ****     *  If there is not enough memory in the TX buffer for the entire string, this
1141:Generated_Source\PSoC4/MOTOR.c ****     *  function blocks until the last character of the string is loaded into the
1142:Generated_Source\PSoC4/MOTOR.c ****     *  TX buffer.
1143:Generated_Source\PSoC4/MOTOR.c ****     *
1144:Generated_Source\PSoC4/MOTOR.c ****     *******************************************************************************/
1145:Generated_Source\PSoC4/MOTOR.c ****     void MOTOR_PutString(const char8 string[]) 
1146:Generated_Source\PSoC4/MOTOR.c ****     {
ARM GAS  C:\Users\Andres\AppData\Local\Temp\ccONmjfL.s 			page 27


 331              		.loc 1 1146 0
 332              		.cfi_startproc
 333              	.LVL16:
 334 0000 38B5     		push	{r3, r4, r5, lr}
 335              		.cfi_def_cfa_offset 16
 336              		.cfi_offset 3, -16
 337              		.cfi_offset 4, -12
 338              		.cfi_offset 5, -8
 339              		.cfi_offset 14, -4
 340              	.LVL17:
1147:Generated_Source\PSoC4/MOTOR.c ****         uint16 bufIndex = 0u;
1148:Generated_Source\PSoC4/MOTOR.c **** 
1149:Generated_Source\PSoC4/MOTOR.c ****         /* If not Initialized then skip this function */
1150:Generated_Source\PSoC4/MOTOR.c ****         if(MOTOR_initVar != 0u)
 341              		.loc 1 1150 0
 342 0002 084B     		ldr	r3, .L35
 343 0004 1B78     		ldrb	r3, [r3]
 344 0006 002B     		cmp	r3, #0
 345 0008 05D1     		bne	.L34
 346 000a 09E0     		b	.L30
 347              	.LVL18:
 348              	.L33:
1151:Generated_Source\PSoC4/MOTOR.c ****         {
1152:Generated_Source\PSoC4/MOTOR.c ****             /* This is a blocking function, it will not exit until all data is sent */
1153:Generated_Source\PSoC4/MOTOR.c ****             while(string[bufIndex] != (char8) 0)
1154:Generated_Source\PSoC4/MOTOR.c ****             {
1155:Generated_Source\PSoC4/MOTOR.c ****                 MOTOR_PutChar((uint8)string[bufIndex]);
 349              		.loc 1 1155 0
 350 000c FFF7FEFF 		bl	MOTOR_PutChar
 351              	.LVL19:
1156:Generated_Source\PSoC4/MOTOR.c ****                 bufIndex++;
 352              		.loc 1 1156 0
 353 0010 0134     		add	r4, r4, #1
 354              	.LVL20:
 355 0012 A4B2     		uxth	r4, r4
 356              	.LVL21:
 357 0014 01E0     		b	.L31
 358              	.LVL22:
 359              	.L34:
 360 0016 051C     		mov	r5, r0
 361 0018 0024     		mov	r4, #0
 362              	.LVL23:
 363              	.L31:
1153:Generated_Source\PSoC4/MOTOR.c ****             {
 364              		.loc 1 1153 0
 365 001a 285D     		ldrb	r0, [r5, r4]
 366 001c 0028     		cmp	r0, #0
 367 001e F5D1     		bne	.L33
 368              	.LVL24:
 369              	.L30:
1157:Generated_Source\PSoC4/MOTOR.c ****             }
1158:Generated_Source\PSoC4/MOTOR.c ****         }
1159:Generated_Source\PSoC4/MOTOR.c ****     }
 370              		.loc 1 1159 0
 371              		@ sp needed
 372 0020 38BD     		pop	{r3, r4, r5, pc}
 373              	.L36:
ARM GAS  C:\Users\Andres\AppData\Local\Temp\ccONmjfL.s 			page 28


 374 0022 C046     		.align	2
 375              	.L35:
 376 0024 00000000 		.word	.LANCHOR0
 377              		.cfi_endproc
 378              	.LFE11:
 379              		.size	MOTOR_PutString, .-MOTOR_PutString
 380              		.section	.text.MOTOR_PutArray,"ax",%progbits
 381              		.align	2
 382              		.global	MOTOR_PutArray
 383              		.code	16
 384              		.thumb_func
 385              		.type	MOTOR_PutArray, %function
 386              	MOTOR_PutArray:
 387              	.LFB12:
1160:Generated_Source\PSoC4/MOTOR.c **** 
1161:Generated_Source\PSoC4/MOTOR.c **** 
1162:Generated_Source\PSoC4/MOTOR.c ****     /*******************************************************************************
1163:Generated_Source\PSoC4/MOTOR.c ****     * Function Name: MOTOR_PutArray
1164:Generated_Source\PSoC4/MOTOR.c ****     ********************************************************************************
1165:Generated_Source\PSoC4/MOTOR.c ****     *
1166:Generated_Source\PSoC4/MOTOR.c ****     * Summary:
1167:Generated_Source\PSoC4/MOTOR.c ****     *  Places N bytes of data from a memory array into the TX buffer for
1168:Generated_Source\PSoC4/MOTOR.c ****     *  transmission.
1169:Generated_Source\PSoC4/MOTOR.c ****     *
1170:Generated_Source\PSoC4/MOTOR.c ****     * Parameters:
1171:Generated_Source\PSoC4/MOTOR.c ****     *  string[]: Address of the memory array residing in RAM or ROM.
1172:Generated_Source\PSoC4/MOTOR.c ****     *  byteCount: Number of bytes to be transmitted. The type depends on TX Buffer
1173:Generated_Source\PSoC4/MOTOR.c ****     *             Size parameter.
1174:Generated_Source\PSoC4/MOTOR.c ****     *
1175:Generated_Source\PSoC4/MOTOR.c ****     * Return:
1176:Generated_Source\PSoC4/MOTOR.c ****     *  None.
1177:Generated_Source\PSoC4/MOTOR.c ****     *
1178:Generated_Source\PSoC4/MOTOR.c ****     * Global Variables:
1179:Generated_Source\PSoC4/MOTOR.c ****     *  MOTOR_initVar - checked to identify that the component has been
1180:Generated_Source\PSoC4/MOTOR.c ****     *     initialized.
1181:Generated_Source\PSoC4/MOTOR.c ****     *
1182:Generated_Source\PSoC4/MOTOR.c ****     * Reentrant:
1183:Generated_Source\PSoC4/MOTOR.c ****     *  No.
1184:Generated_Source\PSoC4/MOTOR.c ****     *
1185:Generated_Source\PSoC4/MOTOR.c ****     * Theory:
1186:Generated_Source\PSoC4/MOTOR.c ****     *  If there is not enough memory in the TX buffer for the entire string, this
1187:Generated_Source\PSoC4/MOTOR.c ****     *  function blocks until the last character of the string is loaded into the
1188:Generated_Source\PSoC4/MOTOR.c ****     *  TX buffer.
1189:Generated_Source\PSoC4/MOTOR.c ****     *
1190:Generated_Source\PSoC4/MOTOR.c ****     *******************************************************************************/
1191:Generated_Source\PSoC4/MOTOR.c ****     void MOTOR_PutArray(const uint8 string[], uint8 byteCount)
1192:Generated_Source\PSoC4/MOTOR.c ****                                                                     
1193:Generated_Source\PSoC4/MOTOR.c ****     {
 388              		.loc 1 1193 0
 389              		.cfi_startproc
 390              	.LVL25:
 391 0000 70B5     		push	{r4, r5, r6, lr}
 392              		.cfi_def_cfa_offset 16
 393              		.cfi_offset 4, -16
 394              		.cfi_offset 5, -12
 395              		.cfi_offset 6, -8
 396              		.cfi_offset 14, -4
ARM GAS  C:\Users\Andres\AppData\Local\Temp\ccONmjfL.s 			page 29


 397              	.LVL26:
1194:Generated_Source\PSoC4/MOTOR.c ****         uint8 bufIndex = 0u;
1195:Generated_Source\PSoC4/MOTOR.c **** 
1196:Generated_Source\PSoC4/MOTOR.c ****         /* If not Initialized then skip this function */
1197:Generated_Source\PSoC4/MOTOR.c ****         if(MOTOR_initVar != 0u)
 398              		.loc 1 1197 0
 399 0002 084B     		ldr	r3, .L42
 400 0004 1B78     		ldrb	r3, [r3]
 401 0006 002B     		cmp	r3, #0
 402 0008 06D1     		bne	.L41
 403 000a 0AE0     		b	.L37
 404              	.LVL27:
 405              	.L40:
1198:Generated_Source\PSoC4/MOTOR.c ****         {
1199:Generated_Source\PSoC4/MOTOR.c ****             while(bufIndex < byteCount)
1200:Generated_Source\PSoC4/MOTOR.c ****             {
1201:Generated_Source\PSoC4/MOTOR.c ****                 MOTOR_PutChar(string[bufIndex]);
 406              		.loc 1 1201 0
 407 000c 305D     		ldrb	r0, [r6, r4]
 408 000e FFF7FEFF 		bl	MOTOR_PutChar
 409              	.LVL28:
1202:Generated_Source\PSoC4/MOTOR.c ****                 bufIndex++;
 410              		.loc 1 1202 0
 411 0012 0134     		add	r4, r4, #1
 412              	.LVL29:
 413 0014 E4B2     		uxtb	r4, r4
 414              	.LVL30:
 415 0016 02E0     		b	.L38
 416              	.LVL31:
 417              	.L41:
 418 0018 0D1C     		mov	r5, r1
 419 001a 061C     		mov	r6, r0
 420 001c 0024     		mov	r4, #0
 421              	.LVL32:
 422              	.L38:
1199:Generated_Source\PSoC4/MOTOR.c ****             {
 423              		.loc 1 1199 0
 424 001e AC42     		cmp	r4, r5
 425 0020 F4D3     		bcc	.L40
 426              	.LVL33:
 427              	.L37:
1203:Generated_Source\PSoC4/MOTOR.c ****             }
1204:Generated_Source\PSoC4/MOTOR.c ****         }
1205:Generated_Source\PSoC4/MOTOR.c ****     }
 428              		.loc 1 1205 0
 429              		@ sp needed
 430 0022 70BD     		pop	{r4, r5, r6, pc}
 431              	.L43:
 432              		.align	2
 433              	.L42:
 434 0024 00000000 		.word	.LANCHOR0
 435              		.cfi_endproc
 436              	.LFE12:
 437              		.size	MOTOR_PutArray, .-MOTOR_PutArray
 438              		.section	.text.MOTOR_PutCRLF,"ax",%progbits
 439              		.align	2
 440              		.global	MOTOR_PutCRLF
ARM GAS  C:\Users\Andres\AppData\Local\Temp\ccONmjfL.s 			page 30


 441              		.code	16
 442              		.thumb_func
 443              		.type	MOTOR_PutCRLF, %function
 444              	MOTOR_PutCRLF:
 445              	.LFB13:
1206:Generated_Source\PSoC4/MOTOR.c **** 
1207:Generated_Source\PSoC4/MOTOR.c **** 
1208:Generated_Source\PSoC4/MOTOR.c ****     /*******************************************************************************
1209:Generated_Source\PSoC4/MOTOR.c ****     * Function Name: MOTOR_PutCRLF
1210:Generated_Source\PSoC4/MOTOR.c ****     ********************************************************************************
1211:Generated_Source\PSoC4/MOTOR.c ****     *
1212:Generated_Source\PSoC4/MOTOR.c ****     * Summary:
1213:Generated_Source\PSoC4/MOTOR.c ****     *  Writes a byte of data followed by a carriage return (0x0D) and line feed
1214:Generated_Source\PSoC4/MOTOR.c ****     *  (0x0A) to the transmit buffer.
1215:Generated_Source\PSoC4/MOTOR.c ****     *
1216:Generated_Source\PSoC4/MOTOR.c ****     * Parameters:
1217:Generated_Source\PSoC4/MOTOR.c ****     *  txDataByte: Data byte to transmit before the carriage return and line feed.
1218:Generated_Source\PSoC4/MOTOR.c ****     *
1219:Generated_Source\PSoC4/MOTOR.c ****     * Return:
1220:Generated_Source\PSoC4/MOTOR.c ****     *  None.
1221:Generated_Source\PSoC4/MOTOR.c ****     *
1222:Generated_Source\PSoC4/MOTOR.c ****     * Global Variables:
1223:Generated_Source\PSoC4/MOTOR.c ****     *  MOTOR_initVar - checked to identify that the component has been
1224:Generated_Source\PSoC4/MOTOR.c ****     *     initialized.
1225:Generated_Source\PSoC4/MOTOR.c ****     *
1226:Generated_Source\PSoC4/MOTOR.c ****     * Reentrant:
1227:Generated_Source\PSoC4/MOTOR.c ****     *  No.
1228:Generated_Source\PSoC4/MOTOR.c ****     *
1229:Generated_Source\PSoC4/MOTOR.c ****     *******************************************************************************/
1230:Generated_Source\PSoC4/MOTOR.c ****     void MOTOR_PutCRLF(uint8 txDataByte) 
1231:Generated_Source\PSoC4/MOTOR.c ****     {
 446              		.loc 1 1231 0
 447              		.cfi_startproc
 448              	.LVL34:
 449 0000 08B5     		push	{r3, lr}
 450              		.cfi_def_cfa_offset 8
 451              		.cfi_offset 3, -8
 452              		.cfi_offset 14, -4
1232:Generated_Source\PSoC4/MOTOR.c ****         /* If not Initialized then skip this function */
1233:Generated_Source\PSoC4/MOTOR.c ****         if(MOTOR_initVar != 0u)
 453              		.loc 1 1233 0
 454 0002 064B     		ldr	r3, .L46
 455 0004 1B78     		ldrb	r3, [r3]
 456 0006 002B     		cmp	r3, #0
 457 0008 07D0     		beq	.L44
1234:Generated_Source\PSoC4/MOTOR.c ****         {
1235:Generated_Source\PSoC4/MOTOR.c ****             MOTOR_PutChar(txDataByte);
 458              		.loc 1 1235 0
 459 000a FFF7FEFF 		bl	MOTOR_PutChar
 460              	.LVL35:
1236:Generated_Source\PSoC4/MOTOR.c ****             MOTOR_PutChar(0x0Du);
 461              		.loc 1 1236 0
 462 000e 0D20     		mov	r0, #13
 463 0010 FFF7FEFF 		bl	MOTOR_PutChar
 464              	.LVL36:
1237:Generated_Source\PSoC4/MOTOR.c ****             MOTOR_PutChar(0x0Au);
 465              		.loc 1 1237 0
ARM GAS  C:\Users\Andres\AppData\Local\Temp\ccONmjfL.s 			page 31


 466 0014 0A20     		mov	r0, #10
 467 0016 FFF7FEFF 		bl	MOTOR_PutChar
 468              	.LVL37:
 469              	.L44:
1238:Generated_Source\PSoC4/MOTOR.c ****         }
1239:Generated_Source\PSoC4/MOTOR.c ****     }
 470              		.loc 1 1239 0
 471              		@ sp needed
 472 001a 08BD     		pop	{r3, pc}
 473              	.L47:
 474              		.align	2
 475              	.L46:
 476 001c 00000000 		.word	.LANCHOR0
 477              		.cfi_endproc
 478              	.LFE13:
 479              		.size	MOTOR_PutCRLF, .-MOTOR_PutCRLF
 480              		.section	.text.MOTOR_GetTxBufferSize,"ax",%progbits
 481              		.align	2
 482              		.global	MOTOR_GetTxBufferSize
 483              		.code	16
 484              		.thumb_func
 485              		.type	MOTOR_GetTxBufferSize, %function
 486              	MOTOR_GetTxBufferSize:
 487              	.LFB14:
1240:Generated_Source\PSoC4/MOTOR.c **** 
1241:Generated_Source\PSoC4/MOTOR.c **** 
1242:Generated_Source\PSoC4/MOTOR.c ****     /*******************************************************************************
1243:Generated_Source\PSoC4/MOTOR.c ****     * Function Name: MOTOR_GetTxBufferSize
1244:Generated_Source\PSoC4/MOTOR.c ****     ********************************************************************************
1245:Generated_Source\PSoC4/MOTOR.c ****     *
1246:Generated_Source\PSoC4/MOTOR.c ****     * Summary:
1247:Generated_Source\PSoC4/MOTOR.c ****     *  Returns the number of bytes in the TX buffer which are waiting to be 
1248:Generated_Source\PSoC4/MOTOR.c ****     *  transmitted.
1249:Generated_Source\PSoC4/MOTOR.c ****     *  * TX software buffer is disabled (TX Buffer Size parameter is equal to 4): 
1250:Generated_Source\PSoC4/MOTOR.c ****     *    returns 0 for empty TX FIFO, 1 for not full TX FIFO or 4 for full TX FIFO.
1251:Generated_Source\PSoC4/MOTOR.c ****     *  * TX software buffer is enabled: returns the number of bytes in the TX 
1252:Generated_Source\PSoC4/MOTOR.c ****     *    software buffer which are waiting to be transmitted. Bytes available in the
1253:Generated_Source\PSoC4/MOTOR.c ****     *    TX FIFO do not count.
1254:Generated_Source\PSoC4/MOTOR.c ****     *
1255:Generated_Source\PSoC4/MOTOR.c ****     * Parameters:
1256:Generated_Source\PSoC4/MOTOR.c ****     *  None.
1257:Generated_Source\PSoC4/MOTOR.c ****     *
1258:Generated_Source\PSoC4/MOTOR.c ****     * Return:
1259:Generated_Source\PSoC4/MOTOR.c ****     *  Number of bytes used in the TX buffer. Return value type depends on the TX 
1260:Generated_Source\PSoC4/MOTOR.c ****     *  Buffer Size parameter.
1261:Generated_Source\PSoC4/MOTOR.c ****     *
1262:Generated_Source\PSoC4/MOTOR.c ****     * Global Variables:
1263:Generated_Source\PSoC4/MOTOR.c ****     *  MOTOR_txBufferWrite - used to calculate left space.
1264:Generated_Source\PSoC4/MOTOR.c ****     *  MOTOR_txBufferRead - used to calculate left space.
1265:Generated_Source\PSoC4/MOTOR.c ****     *
1266:Generated_Source\PSoC4/MOTOR.c ****     * Reentrant:
1267:Generated_Source\PSoC4/MOTOR.c ****     *  No.
1268:Generated_Source\PSoC4/MOTOR.c ****     *
1269:Generated_Source\PSoC4/MOTOR.c ****     * Theory:
1270:Generated_Source\PSoC4/MOTOR.c ****     *  Allows the user to find out how full the TX Buffer is.
1271:Generated_Source\PSoC4/MOTOR.c ****     *
1272:Generated_Source\PSoC4/MOTOR.c ****     *******************************************************************************/
ARM GAS  C:\Users\Andres\AppData\Local\Temp\ccONmjfL.s 			page 32


1273:Generated_Source\PSoC4/MOTOR.c ****     uint8 MOTOR_GetTxBufferSize(void)
1274:Generated_Source\PSoC4/MOTOR.c ****                                                             
1275:Generated_Source\PSoC4/MOTOR.c ****     {
 488              		.loc 1 1275 0
 489              		.cfi_startproc
1276:Generated_Source\PSoC4/MOTOR.c ****         uint8 size;
1277:Generated_Source\PSoC4/MOTOR.c **** 
1278:Generated_Source\PSoC4/MOTOR.c ****     #if (MOTOR_TX_INTERRUPT_ENABLED)
1279:Generated_Source\PSoC4/MOTOR.c **** 
1280:Generated_Source\PSoC4/MOTOR.c ****         /* Protect variables that could change on interrupt. */
1281:Generated_Source\PSoC4/MOTOR.c ****         MOTOR_DisableTxInt();
1282:Generated_Source\PSoC4/MOTOR.c **** 
1283:Generated_Source\PSoC4/MOTOR.c ****         if(MOTOR_txBufferRead == MOTOR_txBufferWrite)
1284:Generated_Source\PSoC4/MOTOR.c ****         {
1285:Generated_Source\PSoC4/MOTOR.c ****             size = 0u;
1286:Generated_Source\PSoC4/MOTOR.c ****         }
1287:Generated_Source\PSoC4/MOTOR.c ****         else if(MOTOR_txBufferRead < MOTOR_txBufferWrite)
1288:Generated_Source\PSoC4/MOTOR.c ****         {
1289:Generated_Source\PSoC4/MOTOR.c ****             size = (MOTOR_txBufferWrite - MOTOR_txBufferRead);
1290:Generated_Source\PSoC4/MOTOR.c ****         }
1291:Generated_Source\PSoC4/MOTOR.c ****         else
1292:Generated_Source\PSoC4/MOTOR.c ****         {
1293:Generated_Source\PSoC4/MOTOR.c ****             size = (MOTOR_TX_BUFFER_SIZE - MOTOR_txBufferRead) +
1294:Generated_Source\PSoC4/MOTOR.c ****                     MOTOR_txBufferWrite;
1295:Generated_Source\PSoC4/MOTOR.c ****         }
1296:Generated_Source\PSoC4/MOTOR.c **** 
1297:Generated_Source\PSoC4/MOTOR.c ****         MOTOR_EnableTxInt();
1298:Generated_Source\PSoC4/MOTOR.c **** 
1299:Generated_Source\PSoC4/MOTOR.c ****     #else
1300:Generated_Source\PSoC4/MOTOR.c **** 
1301:Generated_Source\PSoC4/MOTOR.c ****         size = MOTOR_TXSTATUS_REG;
 490              		.loc 1 1301 0
 491 0000 064B     		ldr	r3, .L52
 492 0002 1B78     		ldrb	r3, [r3]
 493 0004 DBB2     		uxtb	r3, r3
 494              	.LVL38:
1302:Generated_Source\PSoC4/MOTOR.c **** 
1303:Generated_Source\PSoC4/MOTOR.c ****         /* Is the fifo is full. */
1304:Generated_Source\PSoC4/MOTOR.c ****         if((size & MOTOR_TX_STS_FIFO_FULL) != 0u)
 495              		.loc 1 1304 0
 496 0006 5A07     		lsl	r2, r3, #29
 497 0008 03D4     		bmi	.L50
1305:Generated_Source\PSoC4/MOTOR.c ****         {
1306:Generated_Source\PSoC4/MOTOR.c ****             size = MOTOR_FIFO_LENGTH;
1307:Generated_Source\PSoC4/MOTOR.c ****         }
1308:Generated_Source\PSoC4/MOTOR.c ****         else if((size & MOTOR_TX_STS_FIFO_EMPTY) != 0u)
 498              		.loc 1 1308 0
 499 000a 9B07     		lsl	r3, r3, #30
 500 000c 03D5     		bpl	.L51
 501              	.LVL39:
1309:Generated_Source\PSoC4/MOTOR.c ****         {
1310:Generated_Source\PSoC4/MOTOR.c ****             size = 0u;
 502              		.loc 1 1310 0
 503 000e 0020     		mov	r0, #0
 504 0010 02E0     		b	.L49
 505              	.LVL40:
 506              	.L50:
ARM GAS  C:\Users\Andres\AppData\Local\Temp\ccONmjfL.s 			page 33


1306:Generated_Source\PSoC4/MOTOR.c ****         }
 507              		.loc 1 1306 0
 508 0012 0420     		mov	r0, #4
 509 0014 00E0     		b	.L49
 510              	.LVL41:
 511              	.L51:
1311:Generated_Source\PSoC4/MOTOR.c ****         }
1312:Generated_Source\PSoC4/MOTOR.c ****         else
1313:Generated_Source\PSoC4/MOTOR.c ****         {
1314:Generated_Source\PSoC4/MOTOR.c ****             /* We only know there is data in the fifo. */
1315:Generated_Source\PSoC4/MOTOR.c ****             size = 1u;
 512              		.loc 1 1315 0
 513 0016 0120     		mov	r0, #1
 514              	.L49:
 515              	.LVL42:
1316:Generated_Source\PSoC4/MOTOR.c ****         }
1317:Generated_Source\PSoC4/MOTOR.c **** 
1318:Generated_Source\PSoC4/MOTOR.c ****     #endif /* (MOTOR_TX_INTERRUPT_ENABLED) */
1319:Generated_Source\PSoC4/MOTOR.c **** 
1320:Generated_Source\PSoC4/MOTOR.c ****     return(size);
1321:Generated_Source\PSoC4/MOTOR.c ****     }
 516              		.loc 1 1321 0
 517              		@ sp needed
 518 0018 7047     		bx	lr
 519              	.L53:
 520 001a C046     		.align	2
 521              	.L52:
 522 001c 61000F40 		.word	1074724961
 523              		.cfi_endproc
 524              	.LFE14:
 525              		.size	MOTOR_GetTxBufferSize, .-MOTOR_GetTxBufferSize
 526              		.section	.text.MOTOR_ClearTxBuffer,"ax",%progbits
 527              		.align	2
 528              		.global	MOTOR_ClearTxBuffer
 529              		.code	16
 530              		.thumb_func
 531              		.type	MOTOR_ClearTxBuffer, %function
 532              	MOTOR_ClearTxBuffer:
 533              	.LFB15:
1322:Generated_Source\PSoC4/MOTOR.c **** 
1323:Generated_Source\PSoC4/MOTOR.c **** 
1324:Generated_Source\PSoC4/MOTOR.c ****     /*******************************************************************************
1325:Generated_Source\PSoC4/MOTOR.c ****     * Function Name: MOTOR_ClearTxBuffer
1326:Generated_Source\PSoC4/MOTOR.c ****     ********************************************************************************
1327:Generated_Source\PSoC4/MOTOR.c ****     *
1328:Generated_Source\PSoC4/MOTOR.c ****     * Summary:
1329:Generated_Source\PSoC4/MOTOR.c ****     *  Clears all data from the TX buffer and hardware TX FIFO.
1330:Generated_Source\PSoC4/MOTOR.c ****     *
1331:Generated_Source\PSoC4/MOTOR.c ****     * Parameters:
1332:Generated_Source\PSoC4/MOTOR.c ****     *  None.
1333:Generated_Source\PSoC4/MOTOR.c ****     *
1334:Generated_Source\PSoC4/MOTOR.c ****     * Return:
1335:Generated_Source\PSoC4/MOTOR.c ****     *  None.
1336:Generated_Source\PSoC4/MOTOR.c ****     *
1337:Generated_Source\PSoC4/MOTOR.c ****     * Global Variables:
1338:Generated_Source\PSoC4/MOTOR.c ****     *  MOTOR_txBufferWrite - cleared to zero.
1339:Generated_Source\PSoC4/MOTOR.c ****     *  MOTOR_txBufferRead - cleared to zero.
ARM GAS  C:\Users\Andres\AppData\Local\Temp\ccONmjfL.s 			page 34


1340:Generated_Source\PSoC4/MOTOR.c ****     *
1341:Generated_Source\PSoC4/MOTOR.c ****     * Reentrant:
1342:Generated_Source\PSoC4/MOTOR.c ****     *  No.
1343:Generated_Source\PSoC4/MOTOR.c ****     *
1344:Generated_Source\PSoC4/MOTOR.c ****     * Theory:
1345:Generated_Source\PSoC4/MOTOR.c ****     *  Setting the pointers to zero makes the system believe there is no data to
1346:Generated_Source\PSoC4/MOTOR.c ****     *  read and writing will resume at address 0 overwriting any data that may have
1347:Generated_Source\PSoC4/MOTOR.c ****     *  remained in the RAM.
1348:Generated_Source\PSoC4/MOTOR.c ****     *
1349:Generated_Source\PSoC4/MOTOR.c ****     * Side Effects:
1350:Generated_Source\PSoC4/MOTOR.c ****     *  Data waiting in the transmit buffer is not sent; a byte that is currently
1351:Generated_Source\PSoC4/MOTOR.c ****     *  transmitting finishes transmitting.
1352:Generated_Source\PSoC4/MOTOR.c ****     *
1353:Generated_Source\PSoC4/MOTOR.c ****     *******************************************************************************/
1354:Generated_Source\PSoC4/MOTOR.c ****     void MOTOR_ClearTxBuffer(void) 
1355:Generated_Source\PSoC4/MOTOR.c ****     {
 534              		.loc 1 1355 0
 535              		.cfi_startproc
 536 0000 08B5     		push	{r3, lr}
 537              		.cfi_def_cfa_offset 8
 538              		.cfi_offset 3, -8
 539              		.cfi_offset 14, -4
1356:Generated_Source\PSoC4/MOTOR.c ****         uint8 enableInterrupts;
1357:Generated_Source\PSoC4/MOTOR.c **** 
1358:Generated_Source\PSoC4/MOTOR.c ****         enableInterrupts = CyEnterCriticalSection();
 540              		.loc 1 1358 0
 541 0002 FFF7FEFF 		bl	CyEnterCriticalSection
 542              	.LVL43:
1359:Generated_Source\PSoC4/MOTOR.c ****         /* Clear the HW FIFO */
1360:Generated_Source\PSoC4/MOTOR.c ****         MOTOR_TXDATA_AUX_CTL_REG |= (uint8)  MOTOR_TX_FIFO_CLR;
 543              		.loc 1 1360 0
 544 0006 064B     		ldr	r3, .L55
 545 0008 1978     		ldrb	r1, [r3]
 546 000a 0122     		mov	r2, #1
 547 000c 0A43     		orr	r2, r1
 548 000e 1A70     		strb	r2, [r3]
1361:Generated_Source\PSoC4/MOTOR.c ****         MOTOR_TXDATA_AUX_CTL_REG &= (uint8) ~MOTOR_TX_FIFO_CLR;
 549              		.loc 1 1361 0
 550 0010 1A78     		ldrb	r2, [r3]
 551 0012 0121     		mov	r1, #1
 552 0014 8A43     		bic	r2, r1
 553 0016 1A70     		strb	r2, [r3]
1362:Generated_Source\PSoC4/MOTOR.c ****         CyExitCriticalSection(enableInterrupts);
 554              		.loc 1 1362 0
 555 0018 FFF7FEFF 		bl	CyExitCriticalSection
 556              	.LVL44:
1363:Generated_Source\PSoC4/MOTOR.c **** 
1364:Generated_Source\PSoC4/MOTOR.c ****     #if (MOTOR_TX_INTERRUPT_ENABLED)
1365:Generated_Source\PSoC4/MOTOR.c **** 
1366:Generated_Source\PSoC4/MOTOR.c ****         /* Protect variables that could change on interrupt. */
1367:Generated_Source\PSoC4/MOTOR.c ****         MOTOR_DisableTxInt();
1368:Generated_Source\PSoC4/MOTOR.c **** 
1369:Generated_Source\PSoC4/MOTOR.c ****         MOTOR_txBufferRead = 0u;
1370:Generated_Source\PSoC4/MOTOR.c ****         MOTOR_txBufferWrite = 0u;
1371:Generated_Source\PSoC4/MOTOR.c **** 
1372:Generated_Source\PSoC4/MOTOR.c ****         /* Enable Tx interrupt. */
1373:Generated_Source\PSoC4/MOTOR.c ****         MOTOR_EnableTxInt();
ARM GAS  C:\Users\Andres\AppData\Local\Temp\ccONmjfL.s 			page 35


1374:Generated_Source\PSoC4/MOTOR.c **** 
1375:Generated_Source\PSoC4/MOTOR.c ****     #endif /* (MOTOR_TX_INTERRUPT_ENABLED) */
1376:Generated_Source\PSoC4/MOTOR.c ****     }
 557              		.loc 1 1376 0
 558              		@ sp needed
 559 001c 08BD     		pop	{r3, pc}
 560              	.L56:
 561 001e C046     		.align	2
 562              	.L55:
 563 0020 91000F40 		.word	1074725009
 564              		.cfi_endproc
 565              	.LFE15:
 566              		.size	MOTOR_ClearTxBuffer, .-MOTOR_ClearTxBuffer
 567              		.section	.text.MOTOR_SendBreak,"ax",%progbits
 568              		.align	2
 569              		.global	MOTOR_SendBreak
 570              		.code	16
 571              		.thumb_func
 572              		.type	MOTOR_SendBreak, %function
 573              	MOTOR_SendBreak:
 574              	.LFB16:
1377:Generated_Source\PSoC4/MOTOR.c **** 
1378:Generated_Source\PSoC4/MOTOR.c **** 
1379:Generated_Source\PSoC4/MOTOR.c ****     /*******************************************************************************
1380:Generated_Source\PSoC4/MOTOR.c ****     * Function Name: MOTOR_SendBreak
1381:Generated_Source\PSoC4/MOTOR.c ****     ********************************************************************************
1382:Generated_Source\PSoC4/MOTOR.c ****     *
1383:Generated_Source\PSoC4/MOTOR.c ****     * Summary:
1384:Generated_Source\PSoC4/MOTOR.c ****     *  Transmits a break signal on the bus.
1385:Generated_Source\PSoC4/MOTOR.c ****     *
1386:Generated_Source\PSoC4/MOTOR.c ****     * Parameters:
1387:Generated_Source\PSoC4/MOTOR.c ****     *  uint8 retMode:  Send Break return mode. See the following table for options.
1388:Generated_Source\PSoC4/MOTOR.c ****     *   MOTOR_SEND_BREAK - Initialize registers for break, send the Break
1389:Generated_Source\PSoC4/MOTOR.c ****     *       signal and return immediately.
1390:Generated_Source\PSoC4/MOTOR.c ****     *   MOTOR_WAIT_FOR_COMPLETE_REINIT - Wait until break transmission is
1391:Generated_Source\PSoC4/MOTOR.c ****     *       complete, reinitialize registers to normal transmission mode then return
1392:Generated_Source\PSoC4/MOTOR.c ****     *   MOTOR_REINIT - Reinitialize registers to normal transmission mode
1393:Generated_Source\PSoC4/MOTOR.c ****     *       then return.
1394:Generated_Source\PSoC4/MOTOR.c ****     *   MOTOR_SEND_WAIT_REINIT - Performs both options: 
1395:Generated_Source\PSoC4/MOTOR.c ****     *      MOTOR_SEND_BREAK and MOTOR_WAIT_FOR_COMPLETE_REINIT.
1396:Generated_Source\PSoC4/MOTOR.c ****     *      This option is recommended for most cases.
1397:Generated_Source\PSoC4/MOTOR.c ****     *
1398:Generated_Source\PSoC4/MOTOR.c ****     * Return:
1399:Generated_Source\PSoC4/MOTOR.c ****     *  None.
1400:Generated_Source\PSoC4/MOTOR.c ****     *
1401:Generated_Source\PSoC4/MOTOR.c ****     * Global Variables:
1402:Generated_Source\PSoC4/MOTOR.c ****     *  MOTOR_initVar - checked to identify that the component has been
1403:Generated_Source\PSoC4/MOTOR.c ****     *     initialized.
1404:Generated_Source\PSoC4/MOTOR.c ****     *  txPeriod - static variable, used for keeping TX period configuration.
1405:Generated_Source\PSoC4/MOTOR.c ****     *
1406:Generated_Source\PSoC4/MOTOR.c ****     * Reentrant:
1407:Generated_Source\PSoC4/MOTOR.c ****     *  No.
1408:Generated_Source\PSoC4/MOTOR.c ****     *
1409:Generated_Source\PSoC4/MOTOR.c ****     * Theory:
1410:Generated_Source\PSoC4/MOTOR.c ****     *  SendBreak function initializes registers to send 13-bit break signal. It is
1411:Generated_Source\PSoC4/MOTOR.c ****     *  important to return the registers configuration to normal for continue 8-bit
1412:Generated_Source\PSoC4/MOTOR.c ****     *  operation.
ARM GAS  C:\Users\Andres\AppData\Local\Temp\ccONmjfL.s 			page 36


1413:Generated_Source\PSoC4/MOTOR.c ****     *  There are 3 variants for this API usage:
1414:Generated_Source\PSoC4/MOTOR.c ****     *  1) SendBreak(3) - function will send the Break signal and take care on the
1415:Generated_Source\PSoC4/MOTOR.c ****     *     configuration returning. Function will block CPU until transmission
1416:Generated_Source\PSoC4/MOTOR.c ****     *     complete.
1417:Generated_Source\PSoC4/MOTOR.c ****     *  2) User may want to use blocking time if UART configured to the low speed
1418:Generated_Source\PSoC4/MOTOR.c ****     *     operation
1419:Generated_Source\PSoC4/MOTOR.c ****     *     Example for this case:
1420:Generated_Source\PSoC4/MOTOR.c ****     *     SendBreak(0);     - initialize Break signal transmission
1421:Generated_Source\PSoC4/MOTOR.c ****     *         Add your code here to use CPU time
1422:Generated_Source\PSoC4/MOTOR.c ****     *     SendBreak(1);     - complete Break operation
1423:Generated_Source\PSoC4/MOTOR.c ****     *  3) Same to 2) but user may want to initialize and use the interrupt to
1424:Generated_Source\PSoC4/MOTOR.c ****     *     complete break operation.
1425:Generated_Source\PSoC4/MOTOR.c ****     *     Example for this case:
1426:Generated_Source\PSoC4/MOTOR.c ****     *     Initialize TX interrupt with "TX - On TX Complete" parameter
1427:Generated_Source\PSoC4/MOTOR.c ****     *     SendBreak(0);     - initialize Break signal transmission
1428:Generated_Source\PSoC4/MOTOR.c ****     *         Add your code here to use CPU time
1429:Generated_Source\PSoC4/MOTOR.c ****     *     When interrupt appear with MOTOR_TX_STS_COMPLETE status:
1430:Generated_Source\PSoC4/MOTOR.c ****     *     SendBreak(2);     - complete Break operation
1431:Generated_Source\PSoC4/MOTOR.c ****     *
1432:Generated_Source\PSoC4/MOTOR.c ****     * Side Effects:
1433:Generated_Source\PSoC4/MOTOR.c ****     *  The MOTOR_SendBreak() function initializes registers to send a
1434:Generated_Source\PSoC4/MOTOR.c ****     *  break signal.
1435:Generated_Source\PSoC4/MOTOR.c ****     *  Break signal length depends on the break signal bits configuration.
1436:Generated_Source\PSoC4/MOTOR.c ****     *  The register configuration should be reinitialized before normal 8-bit
1437:Generated_Source\PSoC4/MOTOR.c ****     *  communication can continue.
1438:Generated_Source\PSoC4/MOTOR.c ****     *
1439:Generated_Source\PSoC4/MOTOR.c ****     *******************************************************************************/
1440:Generated_Source\PSoC4/MOTOR.c ****     void MOTOR_SendBreak(uint8 retMode) 
1441:Generated_Source\PSoC4/MOTOR.c ****     {
 575              		.loc 1 1441 0
 576              		.cfi_startproc
 577              	.LVL45:
1442:Generated_Source\PSoC4/MOTOR.c **** 
1443:Generated_Source\PSoC4/MOTOR.c ****         /* If not Initialized then skip this function*/
1444:Generated_Source\PSoC4/MOTOR.c ****         if(MOTOR_initVar != 0u)
 578              		.loc 1 1444 0
 579 0000 124B     		ldr	r3, .L64
 580 0002 1B78     		ldrb	r3, [r3]
 581 0004 002B     		cmp	r3, #0
 582 0006 1FD0     		beq	.L57
 583              	.LBB2:
1445:Generated_Source\PSoC4/MOTOR.c ****         {
1446:Generated_Source\PSoC4/MOTOR.c ****             /* Set the Counter to 13-bits and transmit a 00 byte */
1447:Generated_Source\PSoC4/MOTOR.c ****             /* When that is done then reset the counter value back */
1448:Generated_Source\PSoC4/MOTOR.c ****             uint8 tmpStat;
1449:Generated_Source\PSoC4/MOTOR.c **** 
1450:Generated_Source\PSoC4/MOTOR.c ****         #if(MOTOR_HD_ENABLED) /* Half Duplex mode*/
1451:Generated_Source\PSoC4/MOTOR.c **** 
1452:Generated_Source\PSoC4/MOTOR.c ****             if( (retMode == MOTOR_SEND_BREAK) ||
1453:Generated_Source\PSoC4/MOTOR.c ****                 (retMode == MOTOR_SEND_WAIT_REINIT ) )
1454:Generated_Source\PSoC4/MOTOR.c ****             {
1455:Generated_Source\PSoC4/MOTOR.c ****                 /* CTRL_HD_SEND_BREAK - sends break bits in HD mode */
1456:Generated_Source\PSoC4/MOTOR.c ****                 MOTOR_WriteControlRegister(MOTOR_ReadControlRegister() |
1457:Generated_Source\PSoC4/MOTOR.c ****                                                       MOTOR_CTRL_HD_SEND_BREAK);
1458:Generated_Source\PSoC4/MOTOR.c ****                 /* Send zeros */
1459:Generated_Source\PSoC4/MOTOR.c ****                 MOTOR_TXDATA_REG = 0u;
1460:Generated_Source\PSoC4/MOTOR.c **** 
ARM GAS  C:\Users\Andres\AppData\Local\Temp\ccONmjfL.s 			page 37


1461:Generated_Source\PSoC4/MOTOR.c ****                 do /* Wait until transmit starts */
1462:Generated_Source\PSoC4/MOTOR.c ****                 {
1463:Generated_Source\PSoC4/MOTOR.c ****                     tmpStat = MOTOR_TXSTATUS_REG;
1464:Generated_Source\PSoC4/MOTOR.c ****                 }
1465:Generated_Source\PSoC4/MOTOR.c ****                 while((tmpStat & MOTOR_TX_STS_FIFO_EMPTY) != 0u);
1466:Generated_Source\PSoC4/MOTOR.c ****             }
1467:Generated_Source\PSoC4/MOTOR.c **** 
1468:Generated_Source\PSoC4/MOTOR.c ****             if( (retMode == MOTOR_WAIT_FOR_COMPLETE_REINIT) ||
1469:Generated_Source\PSoC4/MOTOR.c ****                 (retMode == MOTOR_SEND_WAIT_REINIT) )
1470:Generated_Source\PSoC4/MOTOR.c ****             {
1471:Generated_Source\PSoC4/MOTOR.c ****                 do /* Wait until transmit complete */
1472:Generated_Source\PSoC4/MOTOR.c ****                 {
1473:Generated_Source\PSoC4/MOTOR.c ****                     tmpStat = MOTOR_TXSTATUS_REG;
1474:Generated_Source\PSoC4/MOTOR.c ****                 }
1475:Generated_Source\PSoC4/MOTOR.c ****                 while(((uint8)~tmpStat & MOTOR_TX_STS_COMPLETE) != 0u);
1476:Generated_Source\PSoC4/MOTOR.c ****             }
1477:Generated_Source\PSoC4/MOTOR.c **** 
1478:Generated_Source\PSoC4/MOTOR.c ****             if( (retMode == MOTOR_WAIT_FOR_COMPLETE_REINIT) ||
1479:Generated_Source\PSoC4/MOTOR.c ****                 (retMode == MOTOR_REINIT) ||
1480:Generated_Source\PSoC4/MOTOR.c ****                 (retMode == MOTOR_SEND_WAIT_REINIT) )
1481:Generated_Source\PSoC4/MOTOR.c ****             {
1482:Generated_Source\PSoC4/MOTOR.c ****                 MOTOR_WriteControlRegister(MOTOR_ReadControlRegister() &
1483:Generated_Source\PSoC4/MOTOR.c ****                                               (uint8)~MOTOR_CTRL_HD_SEND_BREAK);
1484:Generated_Source\PSoC4/MOTOR.c ****             }
1485:Generated_Source\PSoC4/MOTOR.c **** 
1486:Generated_Source\PSoC4/MOTOR.c ****         #else /* MOTOR_HD_ENABLED Full Duplex mode */
1487:Generated_Source\PSoC4/MOTOR.c **** 
1488:Generated_Source\PSoC4/MOTOR.c ****             static uint8 txPeriod;
1489:Generated_Source\PSoC4/MOTOR.c **** 
1490:Generated_Source\PSoC4/MOTOR.c ****             if( (retMode == MOTOR_SEND_BREAK) ||
 584              		.loc 1 1490 0
 585 0008 0028     		cmp	r0, #0
 586 000a 01D0     		beq	.L59
 587              		.loc 1 1490 0 is_stmt 0 discriminator 1
 588 000c 0328     		cmp	r0, #3
 589 000e 0CD1     		bne	.L60
 590              	.L59:
1491:Generated_Source\PSoC4/MOTOR.c ****                 (retMode == MOTOR_SEND_WAIT_REINIT) )
1492:Generated_Source\PSoC4/MOTOR.c ****             {
1493:Generated_Source\PSoC4/MOTOR.c ****                 /* CTRL_HD_SEND_BREAK - skip to send parity bit at Break signal in Full Duplex mode
1494:Generated_Source\PSoC4/MOTOR.c ****                 #if( (MOTOR_PARITY_TYPE != MOTOR__B_UART__NONE_REVB) || \
1495:Generated_Source\PSoC4/MOTOR.c ****                                     (MOTOR_PARITY_TYPE_SW != 0u) )
1496:Generated_Source\PSoC4/MOTOR.c ****                     MOTOR_WriteControlRegister(MOTOR_ReadControlRegister() |
1497:Generated_Source\PSoC4/MOTOR.c ****                                                           MOTOR_CTRL_HD_SEND_BREAK);
1498:Generated_Source\PSoC4/MOTOR.c ****                 #endif /* End MOTOR_PARITY_TYPE != MOTOR__B_UART__NONE_REVB  */
1499:Generated_Source\PSoC4/MOTOR.c **** 
1500:Generated_Source\PSoC4/MOTOR.c ****                 #if(MOTOR_TXCLKGEN_DP)
1501:Generated_Source\PSoC4/MOTOR.c ****                     txPeriod = MOTOR_TXBITCLKTX_COMPLETE_REG;
 591              		.loc 1 1501 0 is_stmt 1
 592 0010 0F4B     		ldr	r3, .L64+4
 593 0012 1978     		ldrb	r1, [r3]
 594 0014 0D4A     		ldr	r2, .L64
 595 0016 5170     		strb	r1, [r2, #1]
1502:Generated_Source\PSoC4/MOTOR.c ****                     MOTOR_TXBITCLKTX_COMPLETE_REG = MOTOR_TXBITCTR_BREAKBITS;
 596              		.loc 1 1502 0
 597 0018 6722     		mov	r2, #103
 598 001a 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\Andres\AppData\Local\Temp\ccONmjfL.s 			page 38


1503:Generated_Source\PSoC4/MOTOR.c ****                 #else
1504:Generated_Source\PSoC4/MOTOR.c ****                     txPeriod = MOTOR_TXBITCTR_PERIOD_REG;
1505:Generated_Source\PSoC4/MOTOR.c ****                     MOTOR_TXBITCTR_PERIOD_REG = MOTOR_TXBITCTR_BREAKBITS8X;
1506:Generated_Source\PSoC4/MOTOR.c ****                 #endif /* End MOTOR_TXCLKGEN_DP */
1507:Generated_Source\PSoC4/MOTOR.c **** 
1508:Generated_Source\PSoC4/MOTOR.c ****                 /* Send zeros */
1509:Generated_Source\PSoC4/MOTOR.c ****                 MOTOR_TXDATA_REG = 0u;
 599              		.loc 1 1509 0
 600 001c 0022     		mov	r2, #0
 601 001e 0D4B     		ldr	r3, .L64+8
 602 0020 1A70     		strb	r2, [r3]
 603              	.L61:
1510:Generated_Source\PSoC4/MOTOR.c **** 
1511:Generated_Source\PSoC4/MOTOR.c ****                 do /* Wait until transmit starts */
1512:Generated_Source\PSoC4/MOTOR.c ****                 {
1513:Generated_Source\PSoC4/MOTOR.c ****                     tmpStat = MOTOR_TXSTATUS_REG;
 604              		.loc 1 1513 0 discriminator 1
 605 0022 0D4B     		ldr	r3, .L64+12
 606 0024 1B78     		ldrb	r3, [r3]
 607              	.LVL46:
1514:Generated_Source\PSoC4/MOTOR.c ****                 }
1515:Generated_Source\PSoC4/MOTOR.c ****                 while((tmpStat & MOTOR_TX_STS_FIFO_EMPTY) != 0u);
 608              		.loc 1 1515 0 discriminator 1
 609 0026 9B07     		lsl	r3, r3, #30
 610 0028 FBD4     		bmi	.L61
 611              	.LVL47:
 612              	.L60:
1516:Generated_Source\PSoC4/MOTOR.c ****             }
1517:Generated_Source\PSoC4/MOTOR.c **** 
1518:Generated_Source\PSoC4/MOTOR.c ****             if( (retMode == MOTOR_WAIT_FOR_COMPLETE_REINIT) ||
 613              		.loc 1 1518 0
 614 002a 0128     		cmp	r0, #1
 615 002c 01D0     		beq	.L62
 616              		.loc 1 1518 0 is_stmt 0 discriminator 1
 617 002e 0328     		cmp	r0, #3
 618 0030 03D1     		bne	.L63
 619              	.L62:
1519:Generated_Source\PSoC4/MOTOR.c ****                 (retMode == MOTOR_SEND_WAIT_REINIT) )
1520:Generated_Source\PSoC4/MOTOR.c ****             {
1521:Generated_Source\PSoC4/MOTOR.c ****                 do /* Wait until transmit complete */
1522:Generated_Source\PSoC4/MOTOR.c ****                 {
1523:Generated_Source\PSoC4/MOTOR.c ****                     tmpStat = MOTOR_TXSTATUS_REG;
 620              		.loc 1 1523 0 is_stmt 1 discriminator 1
 621 0032 094B     		ldr	r3, .L64+12
 622 0034 1B78     		ldrb	r3, [r3]
 623              	.LVL48:
1524:Generated_Source\PSoC4/MOTOR.c ****                 }
1525:Generated_Source\PSoC4/MOTOR.c ****                 while(((uint8)~tmpStat & MOTOR_TX_STS_COMPLETE) != 0u);
 624              		.loc 1 1525 0 discriminator 1
 625 0036 DB07     		lsl	r3, r3, #31
 626 0038 FBD5     		bpl	.L62
 627              	.LVL49:
 628              	.L63:
1526:Generated_Source\PSoC4/MOTOR.c ****             }
1527:Generated_Source\PSoC4/MOTOR.c **** 
1528:Generated_Source\PSoC4/MOTOR.c ****             if( (retMode == MOTOR_WAIT_FOR_COMPLETE_REINIT) ||
1529:Generated_Source\PSoC4/MOTOR.c ****                 (retMode == MOTOR_REINIT) ||
ARM GAS  C:\Users\Andres\AppData\Local\Temp\ccONmjfL.s 			page 39


 629              		.loc 1 1529 0
 630 003a 0138     		sub	r0, r0, #1
 631              	.LVL50:
1528:Generated_Source\PSoC4/MOTOR.c ****                 (retMode == MOTOR_REINIT) ||
 632              		.loc 1 1528 0
 633 003c 0228     		cmp	r0, #2
 634 003e 03D8     		bhi	.L57
1530:Generated_Source\PSoC4/MOTOR.c ****                 (retMode == MOTOR_SEND_WAIT_REINIT) )
1531:Generated_Source\PSoC4/MOTOR.c ****             {
1532:Generated_Source\PSoC4/MOTOR.c **** 
1533:Generated_Source\PSoC4/MOTOR.c ****             #if(MOTOR_TXCLKGEN_DP)
1534:Generated_Source\PSoC4/MOTOR.c ****                 MOTOR_TXBITCLKTX_COMPLETE_REG = txPeriod;
 635              		.loc 1 1534 0
 636 0040 024B     		ldr	r3, .L64
 637 0042 5A78     		ldrb	r2, [r3, #1]
 638 0044 024B     		ldr	r3, .L64+4
 639 0046 1A70     		strb	r2, [r3]
 640              	.L57:
 641              	.LBE2:
1535:Generated_Source\PSoC4/MOTOR.c ****             #else
1536:Generated_Source\PSoC4/MOTOR.c ****                 MOTOR_TXBITCTR_PERIOD_REG = txPeriod;
1537:Generated_Source\PSoC4/MOTOR.c ****             #endif /* End MOTOR_TXCLKGEN_DP */
1538:Generated_Source\PSoC4/MOTOR.c **** 
1539:Generated_Source\PSoC4/MOTOR.c ****             #if( (MOTOR_PARITY_TYPE != MOTOR__B_UART__NONE_REVB) || \
1540:Generated_Source\PSoC4/MOTOR.c ****                  (MOTOR_PARITY_TYPE_SW != 0u) )
1541:Generated_Source\PSoC4/MOTOR.c ****                 MOTOR_WriteControlRegister(MOTOR_ReadControlRegister() &
1542:Generated_Source\PSoC4/MOTOR.c ****                                                       (uint8) ~MOTOR_CTRL_HD_SEND_BREAK);
1543:Generated_Source\PSoC4/MOTOR.c ****             #endif /* End MOTOR_PARITY_TYPE != NONE */
1544:Generated_Source\PSoC4/MOTOR.c ****             }
1545:Generated_Source\PSoC4/MOTOR.c ****         #endif    /* End MOTOR_HD_ENABLED */
1546:Generated_Source\PSoC4/MOTOR.c ****         }
1547:Generated_Source\PSoC4/MOTOR.c ****     }
 642              		.loc 1 1547 0
 643              		@ sp needed
 644 0048 7047     		bx	lr
 645              	.L65:
 646 004a C046     		.align	2
 647              	.L64:
 648 004c 00000000 		.word	.LANCHOR0
 649 0050 30000F40 		.word	1074724912
 650 0054 41000F40 		.word	1074724929
 651 0058 61000F40 		.word	1074724961
 652              		.cfi_endproc
 653              	.LFE16:
 654              		.size	MOTOR_SendBreak, .-MOTOR_SendBreak
 655              		.section	.text.MOTOR_SetTxAddressMode,"ax",%progbits
 656              		.align	2
 657              		.global	MOTOR_SetTxAddressMode
 658              		.code	16
 659              		.thumb_func
 660              		.type	MOTOR_SetTxAddressMode, %function
 661              	MOTOR_SetTxAddressMode:
 662              	.LFB17:
1548:Generated_Source\PSoC4/MOTOR.c **** 
1549:Generated_Source\PSoC4/MOTOR.c **** 
1550:Generated_Source\PSoC4/MOTOR.c ****     /*******************************************************************************
1551:Generated_Source\PSoC4/MOTOR.c ****     * Function Name: MOTOR_SetTxAddressMode
ARM GAS  C:\Users\Andres\AppData\Local\Temp\ccONmjfL.s 			page 40


1552:Generated_Source\PSoC4/MOTOR.c ****     ********************************************************************************
1553:Generated_Source\PSoC4/MOTOR.c ****     *
1554:Generated_Source\PSoC4/MOTOR.c ****     * Summary:
1555:Generated_Source\PSoC4/MOTOR.c ****     *  Configures the transmitter to signal the next bytes is address or data.
1556:Generated_Source\PSoC4/MOTOR.c ****     *
1557:Generated_Source\PSoC4/MOTOR.c ****     * Parameters:
1558:Generated_Source\PSoC4/MOTOR.c ****     *  addressMode: 
1559:Generated_Source\PSoC4/MOTOR.c ****     *       MOTOR_SET_SPACE - Configure the transmitter to send the next
1560:Generated_Source\PSoC4/MOTOR.c ****     *                                    byte as a data.
1561:Generated_Source\PSoC4/MOTOR.c ****     *       MOTOR_SET_MARK  - Configure the transmitter to send the next
1562:Generated_Source\PSoC4/MOTOR.c ****     *                                    byte as an address.
1563:Generated_Source\PSoC4/MOTOR.c ****     *
1564:Generated_Source\PSoC4/MOTOR.c ****     * Return:
1565:Generated_Source\PSoC4/MOTOR.c ****     *  None.
1566:Generated_Source\PSoC4/MOTOR.c ****     *
1567:Generated_Source\PSoC4/MOTOR.c ****     * Side Effects:
1568:Generated_Source\PSoC4/MOTOR.c ****     *  This function sets and clears MOTOR_CTRL_MARK bit in the Control
1569:Generated_Source\PSoC4/MOTOR.c ****     *  register.
1570:Generated_Source\PSoC4/MOTOR.c ****     *
1571:Generated_Source\PSoC4/MOTOR.c ****     *******************************************************************************/
1572:Generated_Source\PSoC4/MOTOR.c ****     void MOTOR_SetTxAddressMode(uint8 addressMode) 
1573:Generated_Source\PSoC4/MOTOR.c ****     {
 663              		.loc 1 1573 0
 664              		.cfi_startproc
 665              	.LVL51:
1574:Generated_Source\PSoC4/MOTOR.c ****         /* Mark/Space sending enable */
1575:Generated_Source\PSoC4/MOTOR.c ****         if(addressMode != 0u)
1576:Generated_Source\PSoC4/MOTOR.c ****         {
1577:Generated_Source\PSoC4/MOTOR.c ****         #if( MOTOR_CONTROL_REG_REMOVED == 0u )
1578:Generated_Source\PSoC4/MOTOR.c ****             MOTOR_WriteControlRegister(MOTOR_ReadControlRegister() |
1579:Generated_Source\PSoC4/MOTOR.c ****                                                   MOTOR_CTRL_MARK);
1580:Generated_Source\PSoC4/MOTOR.c ****         #endif /* End MOTOR_CONTROL_REG_REMOVED == 0u */
1581:Generated_Source\PSoC4/MOTOR.c ****         }
1582:Generated_Source\PSoC4/MOTOR.c ****         else
1583:Generated_Source\PSoC4/MOTOR.c ****         {
1584:Generated_Source\PSoC4/MOTOR.c ****         #if( MOTOR_CONTROL_REG_REMOVED == 0u )
1585:Generated_Source\PSoC4/MOTOR.c ****             MOTOR_WriteControlRegister(MOTOR_ReadControlRegister() &
1586:Generated_Source\PSoC4/MOTOR.c ****                                                   (uint8) ~MOTOR_CTRL_MARK);
1587:Generated_Source\PSoC4/MOTOR.c ****         #endif /* End MOTOR_CONTROL_REG_REMOVED == 0u */
1588:Generated_Source\PSoC4/MOTOR.c ****         }
1589:Generated_Source\PSoC4/MOTOR.c ****     }
 666              		.loc 1 1589 0
 667              		@ sp needed
 668 0000 7047     		bx	lr
 669              		.cfi_endproc
 670              	.LFE17:
 671              		.size	MOTOR_SetTxAddressMode, .-MOTOR_SetTxAddressMode
 672              		.global	MOTOR_initVar
 673 0002 C046     		.bss
 674              		.set	.LANCHOR0,. + 0
 675              		.type	MOTOR_initVar, %object
 676              		.size	MOTOR_initVar, 1
 677              	MOTOR_initVar:
 678 0000 00       		.space	1
 679              		.type	txPeriod.4842, %object
 680              		.size	txPeriod.4842, 1
 681              	txPeriod.4842:
ARM GAS  C:\Users\Andres\AppData\Local\Temp\ccONmjfL.s 			page 41


 682 0001 00       		.space	1
 683              		.text
 684              	.Letext0:
 685              		.file 2 "Generated_Source\\PSoC4\\cytypes.h"
 686              		.file 3 "Generated_Source\\PSoC4\\MOTOR_IntClock.h"
 687              		.file 4 "Generated_Source\\PSoC4\\CyLib.h"
 688              		.section	.debug_info,"",%progbits
 689              	.Ldebug_info0:
 690 0000 70040000 		.4byte	0x470
 691 0004 0400     		.2byte	0x4
 692 0006 00000000 		.4byte	.Ldebug_abbrev0
 693 000a 04       		.byte	0x4
 694 000b 01       		.uleb128 0x1
 695 000c 49020000 		.4byte	.LASF47
 696 0010 01       		.byte	0x1
 697 0011 81000000 		.4byte	.LASF48
 698 0015 BE000000 		.4byte	.LASF49
 699 0019 00000000 		.4byte	.Ldebug_ranges0+0
 700 001d 00000000 		.4byte	0
 701 0021 00000000 		.4byte	.Ldebug_line0
 702 0025 02       		.uleb128 0x2
 703 0026 01       		.byte	0x1
 704 0027 06       		.byte	0x6
 705 0028 3C030000 		.4byte	.LASF0
 706 002c 02       		.uleb128 0x2
 707 002d 01       		.byte	0x1
 708 002e 08       		.byte	0x8
 709 002f 59010000 		.4byte	.LASF1
 710 0033 02       		.uleb128 0x2
 711 0034 02       		.byte	0x2
 712 0035 05       		.byte	0x5
 713 0036 90010000 		.4byte	.LASF2
 714 003a 02       		.uleb128 0x2
 715 003b 02       		.byte	0x2
 716 003c 07       		.byte	0x7
 717 003d 6E000000 		.4byte	.LASF3
 718 0041 02       		.uleb128 0x2
 719 0042 04       		.byte	0x4
 720 0043 05       		.byte	0x5
 721 0044 13030000 		.4byte	.LASF4
 722 0048 02       		.uleb128 0x2
 723 0049 04       		.byte	0x4
 724 004a 07       		.byte	0x7
 725 004b 0E010000 		.4byte	.LASF5
 726 004f 02       		.uleb128 0x2
 727 0050 08       		.byte	0x8
 728 0051 05       		.byte	0x5
 729 0052 00000000 		.4byte	.LASF6
 730 0056 02       		.uleb128 0x2
 731 0057 08       		.byte	0x8
 732 0058 07       		.byte	0x7
 733 0059 E6000000 		.4byte	.LASF7
 734 005d 03       		.uleb128 0x3
 735 005e 04       		.byte	0x4
 736 005f 05       		.byte	0x5
 737 0060 696E7400 		.ascii	"int\000"
 738 0064 02       		.uleb128 0x2
ARM GAS  C:\Users\Andres\AppData\Local\Temp\ccONmjfL.s 			page 42


 739 0065 04       		.byte	0x4
 740 0066 07       		.byte	0x7
 741 0067 CE010000 		.4byte	.LASF8
 742 006b 04       		.uleb128 0x4
 743 006c 20010000 		.4byte	.LASF9
 744 0070 02       		.byte	0x2
 745 0071 9801     		.2byte	0x198
 746 0073 2C000000 		.4byte	0x2c
 747 0077 04       		.uleb128 0x4
 748 0078 9A010000 		.4byte	.LASF10
 749 007c 02       		.byte	0x2
 750 007d 9901     		.2byte	0x199
 751 007f 3A000000 		.4byte	0x3a
 752 0083 04       		.uleb128 0x4
 753 0084 B0010000 		.4byte	.LASF11
 754 0088 02       		.byte	0x2
 755 0089 9A01     		.2byte	0x19a
 756 008b 48000000 		.4byte	0x48
 757 008f 02       		.uleb128 0x2
 758 0090 04       		.byte	0x4
 759 0091 04       		.byte	0x4
 760 0092 E0000000 		.4byte	.LASF12
 761 0096 02       		.uleb128 0x2
 762 0097 08       		.byte	0x8
 763 0098 04       		.byte	0x4
 764 0099 82010000 		.4byte	.LASF13
 765 009d 04       		.uleb128 0x4
 766 009e 33020000 		.4byte	.LASF14
 767 00a2 02       		.byte	0x2
 768 00a3 A901     		.2byte	0x1a9
 769 00a5 A9000000 		.4byte	0xa9
 770 00a9 02       		.uleb128 0x2
 771 00aa 01       		.byte	0x1
 772 00ab 08       		.byte	0x8
 773 00ac 44020000 		.4byte	.LASF15
 774 00b0 04       		.uleb128 0x4
 775 00b1 09010000 		.4byte	.LASF16
 776 00b5 02       		.byte	0x2
 777 00b6 4202     		.2byte	0x242
 778 00b8 BC000000 		.4byte	0xbc
 779 00bc 05       		.uleb128 0x5
 780 00bd 6B000000 		.4byte	0x6b
 781 00c1 02       		.uleb128 0x2
 782 00c2 04       		.byte	0x4
 783 00c3 07       		.byte	0x7
 784 00c4 2A020000 		.4byte	.LASF17
 785 00c8 06       		.uleb128 0x6
 786 00c9 85030000 		.4byte	.LASF50
 787 00cd 01       		.byte	0x1
 788 00ce 6A       		.byte	0x6a
 789 00cf 00000000 		.4byte	.LFB2
 790 00d3 20000000 		.4byte	.LFE2-.LFB2
 791 00d7 01       		.uleb128 0x1
 792 00d8 9C       		.byte	0x9c
 793 00d9 07       		.uleb128 0x7
 794 00da EF020000 		.4byte	.LASF18
 795 00de 01       		.byte	0x1
ARM GAS  C:\Users\Andres\AppData\Local\Temp\ccONmjfL.s 			page 43


 796 00df B7       		.byte	0xb7
 797 00e0 00000000 		.4byte	.LFB3
 798 00e4 24000000 		.4byte	.LFE3-.LFB3
 799 00e8 01       		.uleb128 0x1
 800 00e9 9C       		.byte	0x9c
 801 00ea 2B010000 		.4byte	0x12b
 802 00ee 08       		.uleb128 0x8
 803 00ef 48010000 		.4byte	.LASF21
 804 00f3 01       		.byte	0x1
 805 00f4 B9       		.byte	0xb9
 806 00f5 6B000000 		.4byte	0x6b
 807 00f9 00000000 		.4byte	.LLST0
 808 00fd 09       		.uleb128 0x9
 809 00fe 06000000 		.4byte	.LVL0
 810 0102 3F040000 		.4byte	0x43f
 811 0106 0A       		.uleb128 0xa
 812 0107 18000000 		.4byte	.LVL2
 813 010b 4A040000 		.4byte	0x44a
 814 010f 1A010000 		.4byte	0x11a
 815 0113 0B       		.uleb128 0xb
 816 0114 01       		.uleb128 0x1
 817 0115 50       		.byte	0x50
 818 0116 02       		.uleb128 0x2
 819 0117 08       		.byte	0x8
 820 0118 FF       		.byte	0xff
 821 0119 00       		.byte	0
 822 011a 0C       		.uleb128 0xc
 823 011b 1E000000 		.4byte	.LVL3
 824 011f 5B040000 		.4byte	0x45b
 825 0123 0B       		.uleb128 0xb
 826 0124 01       		.uleb128 0x1
 827 0125 50       		.byte	0x50
 828 0126 02       		.uleb128 0x2
 829 0127 74       		.byte	0x74
 830 0128 00       		.sleb128 0
 831 0129 00       		.byte	0
 832 012a 00       		.byte	0
 833 012b 07       		.uleb128 0x7
 834 012c 5A000000 		.4byte	.LASF19
 835 0130 01       		.byte	0x1
 836 0131 4C       		.byte	0x4c
 837 0132 00000000 		.4byte	.LFB1
 838 0136 20000000 		.4byte	.LFE1-.LFB1
 839 013a 01       		.uleb128 0x1
 840 013b 9C       		.byte	0x9c
 841 013c 53010000 		.4byte	0x153
 842 0140 09       		.uleb128 0x9
 843 0141 0E000000 		.4byte	.LVL5
 844 0145 C8000000 		.4byte	0xc8
 845 0149 09       		.uleb128 0x9
 846 014a 18000000 		.4byte	.LVL6
 847 014e D9000000 		.4byte	0xd9
 848 0152 00       		.byte	0
 849 0153 07       		.uleb128 0x7
 850 0154 5C030000 		.4byte	.LASF20
 851 0158 01       		.byte	0x1
 852 0159 F0       		.byte	0xf0
ARM GAS  C:\Users\Andres\AppData\Local\Temp\ccONmjfL.s 			page 44


 853 015a 00000000 		.4byte	.LFB4
 854 015e 24000000 		.4byte	.LFE4-.LFB4
 855 0162 01       		.uleb128 0x1
 856 0163 9C       		.byte	0x9c
 857 0164 9A010000 		.4byte	0x19a
 858 0168 08       		.uleb128 0x8
 859 0169 48010000 		.4byte	.LASF21
 860 016d 01       		.byte	0x1
 861 016e F2       		.byte	0xf2
 862 016f 6B000000 		.4byte	0x6b
 863 0173 13000000 		.4byte	.LLST1
 864 0177 09       		.uleb128 0x9
 865 0178 06000000 		.4byte	.LVL7
 866 017c 3F040000 		.4byte	0x43f
 867 0180 09       		.uleb128 0x9
 868 0181 0C000000 		.4byte	.LVL9
 869 0185 6C040000 		.4byte	0x46c
 870 0189 0C       		.uleb128 0xc
 871 018a 1C000000 		.4byte	.LVL10
 872 018e 5B040000 		.4byte	0x45b
 873 0192 0B       		.uleb128 0xb
 874 0193 01       		.uleb128 0x1
 875 0194 50       		.byte	0x50
 876 0195 02       		.uleb128 0x2
 877 0196 74       		.byte	0x74
 878 0197 00       		.sleb128 0
 879 0198 00       		.byte	0
 880 0199 00       		.byte	0
 881 019a 0D       		.uleb128 0xd
 882 019b 24000000 		.4byte	.LASF28
 883 019f 01       		.byte	0x1
 884 01a0 2701     		.2byte	0x127
 885 01a2 6B000000 		.4byte	0x6b
 886 01a6 00000000 		.4byte	.LFB5
 887 01aa 04000000 		.4byte	.LFE5-.LFB5
 888 01ae 01       		.uleb128 0x1
 889 01af 9C       		.byte	0x9c
 890 01b0 0E       		.uleb128 0xe
 891 01b1 67010000 		.4byte	.LASF22
 892 01b5 01       		.byte	0x1
 893 01b6 3F01     		.2byte	0x13f
 894 01b8 00000000 		.4byte	.LFB6
 895 01bc 02000000 		.4byte	.LFE6-.LFB6
 896 01c0 01       		.uleb128 0x1
 897 01c1 9C       		.byte	0x9c
 898 01c2 D5010000 		.4byte	0x1d5
 899 01c6 0F       		.uleb128 0xf
 900 01c7 26010000 		.4byte	.LASF24
 901 01cb 01       		.byte	0x1
 902 01cc 3F01     		.2byte	0x13f
 903 01ce 6B000000 		.4byte	0x6b
 904 01d2 01       		.uleb128 0x1
 905 01d3 50       		.byte	0x50
 906 01d4 00       		.byte	0
 907 01d5 0E       		.uleb128 0xe
 908 01d6 6C030000 		.4byte	.LASF23
 909 01da 01       		.byte	0x1
ARM GAS  C:\Users\Andres\AppData\Local\Temp\ccONmjfL.s 			page 45


 910 01db 8C03     		.2byte	0x38c
 911 01dd 00000000 		.4byte	.LFB7
 912 01e1 0C000000 		.4byte	.LFE7-.LFB7
 913 01e5 01       		.uleb128 0x1
 914 01e6 9C       		.byte	0x9c
 915 01e7 FA010000 		.4byte	0x1fa
 916 01eb 0F       		.uleb128 0xf
 917 01ec 89010000 		.4byte	.LASF25
 918 01f0 01       		.byte	0x1
 919 01f1 8C03     		.2byte	0x38c
 920 01f3 6B000000 		.4byte	0x6b
 921 01f7 01       		.uleb128 0x1
 922 01f8 50       		.byte	0x50
 923 01f9 00       		.byte	0
 924 01fa 0E       		.uleb128 0xe
 925 01fb 1C030000 		.4byte	.LASF26
 926 01ff 01       		.byte	0x1
 927 0200 AE03     		.2byte	0x3ae
 928 0202 00000000 		.4byte	.LFB8
 929 0206 18000000 		.4byte	.LFE8-.LFB8
 930 020a 01       		.uleb128 0x1
 931 020b 9C       		.byte	0x9c
 932 020c 1F020000 		.4byte	0x21f
 933 0210 0F       		.uleb128 0xf
 934 0211 39020000 		.4byte	.LASF27
 935 0215 01       		.byte	0x1
 936 0216 AE03     		.2byte	0x3ae
 937 0218 6B000000 		.4byte	0x6b
 938 021c 01       		.uleb128 0x1
 939 021d 50       		.byte	0x50
 940 021e 00       		.byte	0
 941 021f 0D       		.uleb128 0xd
 942 0220 47000000 		.4byte	.LASF29
 943 0224 01       		.byte	0x1
 944 0225 EB03     		.2byte	0x3eb
 945 0227 6B000000 		.4byte	0x6b
 946 022b 00000000 		.4byte	.LFB9
 947 022f 0C000000 		.4byte	.LFE9-.LFB9
 948 0233 01       		.uleb128 0x1
 949 0234 9C       		.byte	0x9c
 950 0235 0E       		.uleb128 0xe
 951 0236 2E030000 		.4byte	.LASF30
 952 023a 01       		.byte	0x1
 953 023b 1104     		.2byte	0x411
 954 023d 00000000 		.4byte	.LFB10
 955 0241 18000000 		.4byte	.LFE10-.LFB10
 956 0245 01       		.uleb128 0x1
 957 0246 9C       		.byte	0x9c
 958 0247 5A020000 		.4byte	0x25a
 959 024b 0F       		.uleb128 0xf
 960 024c 39020000 		.4byte	.LASF27
 961 0250 01       		.byte	0x1
 962 0251 1104     		.2byte	0x411
 963 0253 6B000000 		.4byte	0x6b
 964 0257 01       		.uleb128 0x1
 965 0258 50       		.byte	0x50
 966 0259 00       		.byte	0
ARM GAS  C:\Users\Andres\AppData\Local\Temp\ccONmjfL.s 			page 46


 967 025a 0E       		.uleb128 0xe
 968 025b DF020000 		.4byte	.LASF31
 969 025f 01       		.byte	0x1
 970 0260 7904     		.2byte	0x479
 971 0262 00000000 		.4byte	.LFB11
 972 0266 28000000 		.4byte	.LFE11-.LFB11
 973 026a 01       		.uleb128 0x1
 974 026b 9C       		.byte	0x9c
 975 026c 9A020000 		.4byte	0x29a
 976 0270 10       		.uleb128 0x10
 977 0271 A0000000 		.4byte	.LASF32
 978 0275 01       		.byte	0x1
 979 0276 7904     		.2byte	0x479
 980 0278 9A020000 		.4byte	0x29a
 981 027c 26000000 		.4byte	.LLST2
 982 0280 11       		.uleb128 0x11
 983 0281 13020000 		.4byte	.LASF33
 984 0285 01       		.byte	0x1
 985 0286 7B04     		.2byte	0x47b
 986 0288 77000000 		.4byte	0x77
 987 028c 68000000 		.4byte	.LLST3
 988 0290 09       		.uleb128 0x9
 989 0291 10000000 		.4byte	.LVL19
 990 0295 35020000 		.4byte	0x235
 991 0299 00       		.byte	0
 992 029a 12       		.uleb128 0x12
 993 029b 04       		.byte	0x4
 994 029c A0020000 		.4byte	0x2a0
 995 02a0 13       		.uleb128 0x13
 996 02a1 9D000000 		.4byte	0x9d
 997 02a5 0E       		.uleb128 0xe
 998 02a6 A1010000 		.4byte	.LASF34
 999 02aa 01       		.byte	0x1
 1000 02ab A704     		.2byte	0x4a7
 1001 02ad 00000000 		.4byte	.LFB12
 1002 02b1 28000000 		.4byte	.LFE12-.LFB12
 1003 02b5 01       		.uleb128 0x1
 1004 02b6 9C       		.byte	0x9c
 1005 02b7 F5020000 		.4byte	0x2f5
 1006 02bb 10       		.uleb128 0x10
 1007 02bc A0000000 		.4byte	.LASF32
 1008 02c0 01       		.byte	0x1
 1009 02c1 A704     		.2byte	0x4a7
 1010 02c3 F5020000 		.4byte	0x2f5
 1011 02c7 A9000000 		.4byte	.LLST4
 1012 02cb 10       		.uleb128 0x10
 1013 02cc 3E010000 		.4byte	.LASF35
 1014 02d0 01       		.byte	0x1
 1015 02d1 A704     		.2byte	0x4a7
 1016 02d3 6B000000 		.4byte	0x6b
 1017 02d7 EB000000 		.4byte	.LLST5
 1018 02db 11       		.uleb128 0x11
 1019 02dc 13020000 		.4byte	.LASF33
 1020 02e0 01       		.byte	0x1
 1021 02e1 AA04     		.2byte	0x4aa
 1022 02e3 6B000000 		.4byte	0x6b
 1023 02e7 25010000 		.4byte	.LLST6
ARM GAS  C:\Users\Andres\AppData\Local\Temp\ccONmjfL.s 			page 47


 1024 02eb 09       		.uleb128 0x9
 1025 02ec 12000000 		.4byte	.LVL28
 1026 02f0 35020000 		.4byte	0x235
 1027 02f4 00       		.byte	0
 1028 02f5 12       		.uleb128 0x12
 1029 02f6 04       		.byte	0x4
 1030 02f7 FB020000 		.4byte	0x2fb
 1031 02fb 13       		.uleb128 0x13
 1032 02fc 6B000000 		.4byte	0x6b
 1033 0300 0E       		.uleb128 0xe
 1034 0301 1C020000 		.4byte	.LASF36
 1035 0305 01       		.byte	0x1
 1036 0306 CE04     		.2byte	0x4ce
 1037 0308 00000000 		.4byte	.LFB13
 1038 030c 20000000 		.4byte	.LFE13-.LFB13
 1039 0310 01       		.uleb128 0x1
 1040 0311 9C       		.byte	0x9c
 1041 0312 52030000 		.4byte	0x352
 1042 0316 10       		.uleb128 0x10
 1043 0317 39020000 		.4byte	.LASF27
 1044 031b 01       		.byte	0x1
 1045 031c CE04     		.2byte	0x4ce
 1046 031e 6B000000 		.4byte	0x6b
 1047 0322 66010000 		.4byte	.LLST7
 1048 0326 09       		.uleb128 0x9
 1049 0327 0E000000 		.4byte	.LVL35
 1050 032b 35020000 		.4byte	0x235
 1051 032f 0A       		.uleb128 0xa
 1052 0330 14000000 		.4byte	.LVL36
 1053 0334 35020000 		.4byte	0x235
 1054 0338 42030000 		.4byte	0x342
 1055 033c 0B       		.uleb128 0xb
 1056 033d 01       		.uleb128 0x1
 1057 033e 50       		.byte	0x50
 1058 033f 01       		.uleb128 0x1
 1059 0340 3D       		.byte	0x3d
 1060 0341 00       		.byte	0
 1061 0342 0C       		.uleb128 0xc
 1062 0343 1A000000 		.4byte	.LVL37
 1063 0347 35020000 		.4byte	0x235
 1064 034b 0B       		.uleb128 0xb
 1065 034c 01       		.uleb128 0x1
 1066 034d 50       		.byte	0x50
 1067 034e 01       		.uleb128 0x1
 1068 034f 3A       		.byte	0x3a
 1069 0350 00       		.byte	0
 1070 0351 00       		.byte	0
 1071 0352 14       		.uleb128 0x14
 1072 0353 0E000000 		.4byte	.LASF51
 1073 0357 01       		.byte	0x1
 1074 0358 F904     		.2byte	0x4f9
 1075 035a 6B000000 		.4byte	0x6b
 1076 035e 00000000 		.4byte	.LFB14
 1077 0362 20000000 		.4byte	.LFE14-.LFB14
 1078 0366 01       		.uleb128 0x1
 1079 0367 9C       		.byte	0x9c
 1080 0368 7D030000 		.4byte	0x37d
ARM GAS  C:\Users\Andres\AppData\Local\Temp\ccONmjfL.s 			page 48


 1081 036c 11       		.uleb128 0x11
 1082 036d 67030000 		.4byte	.LASF37
 1083 0371 01       		.byte	0x1
 1084 0372 FC04     		.2byte	0x4fc
 1085 0374 6B000000 		.4byte	0x6b
 1086 0378 87010000 		.4byte	.LLST8
 1087 037c 00       		.byte	0
 1088 037d 0E       		.uleb128 0xe
 1089 037e DB010000 		.4byte	.LASF38
 1090 0382 01       		.byte	0x1
 1091 0383 4A05     		.2byte	0x54a
 1092 0385 00000000 		.4byte	.LFB15
 1093 0389 24000000 		.4byte	.LFE15-.LFB15
 1094 038d 01       		.uleb128 0x1
 1095 038e 9C       		.byte	0x9c
 1096 038f B6030000 		.4byte	0x3b6
 1097 0393 11       		.uleb128 0x11
 1098 0394 48010000 		.4byte	.LASF21
 1099 0398 01       		.byte	0x1
 1100 0399 4C05     		.2byte	0x54c
 1101 039b 6B000000 		.4byte	0x6b
 1102 039f B0010000 		.4byte	.LLST9
 1103 03a3 09       		.uleb128 0x9
 1104 03a4 06000000 		.4byte	.LVL43
 1105 03a8 3F040000 		.4byte	0x43f
 1106 03ac 09       		.uleb128 0x9
 1107 03ad 1C000000 		.4byte	.LVL44
 1108 03b1 5B040000 		.4byte	0x45b
 1109 03b5 00       		.byte	0
 1110 03b6 0E       		.uleb128 0xe
 1111 03b7 2E010000 		.4byte	.LASF39
 1112 03bb 01       		.byte	0x1
 1113 03bc A005     		.2byte	0x5a0
 1114 03be 00000000 		.4byte	.LFB16
 1115 03c2 5C000000 		.4byte	.LFE16-.LFB16
 1116 03c6 01       		.uleb128 0x1
 1117 03c7 9C       		.byte	0x9c
 1118 03c8 09040000 		.4byte	0x409
 1119 03cc 10       		.uleb128 0x10
 1120 03cd D7020000 		.4byte	.LASF40
 1121 03d1 01       		.byte	0x1
 1122 03d2 A005     		.2byte	0x5a0
 1123 03d4 6B000000 		.4byte	0x6b
 1124 03d8 C3010000 		.4byte	.LLST10
 1125 03dc 15       		.uleb128 0x15
 1126 03dd 08000000 		.4byte	.LBB2
 1127 03e1 40000000 		.4byte	.LBE2-.LBB2
 1128 03e5 11       		.uleb128 0x11
 1129 03e6 66000000 		.4byte	.LASF41
 1130 03ea 01       		.byte	0x1
 1131 03eb A805     		.2byte	0x5a8
 1132 03ed 6B000000 		.4byte	0x6b
 1133 03f1 E4010000 		.4byte	.LLST11
 1134 03f5 16       		.uleb128 0x16
 1135 03f6 3E000000 		.4byte	.LASF42
 1136 03fa 01       		.byte	0x1
 1137 03fb D005     		.2byte	0x5d0
ARM GAS  C:\Users\Andres\AppData\Local\Temp\ccONmjfL.s 			page 49


 1138 03fd 6B000000 		.4byte	0x6b
 1139 0401 05       		.uleb128 0x5
 1140 0402 03       		.byte	0x3
 1141 0403 01000000 		.4byte	txPeriod.4842
 1142 0407 00       		.byte	0
 1143 0408 00       		.byte	0
 1144 0409 0E       		.uleb128 0xe
 1145 040a A7000000 		.4byte	.LASF43
 1146 040e 01       		.byte	0x1
 1147 040f 2406     		.2byte	0x624
 1148 0411 00000000 		.4byte	.LFB17
 1149 0415 02000000 		.4byte	.LFE17-.LFB17
 1150 0419 01       		.uleb128 0x1
 1151 041a 9C       		.byte	0x9c
 1152 041b 2E040000 		.4byte	0x42e
 1153 041f 0F       		.uleb128 0xf
 1154 0420 FD000000 		.4byte	.LASF44
 1155 0424 01       		.byte	0x1
 1156 0425 2406     		.2byte	0x624
 1157 0427 6B000000 		.4byte	0x6b
 1158 042b 01       		.uleb128 0x1
 1159 042c 50       		.byte	0x50
 1160 042d 00       		.byte	0
 1161 042e 17       		.uleb128 0x17
 1162 042f 05020000 		.4byte	.LASF52
 1163 0433 01       		.byte	0x1
 1164 0434 1B       		.byte	0x1b
 1165 0435 6B000000 		.4byte	0x6b
 1166 0439 05       		.uleb128 0x5
 1167 043a 03       		.byte	0x3
 1168 043b 00000000 		.4byte	MOTOR_initVar
 1169 043f 18       		.uleb128 0x18
 1170 0440 B7010000 		.4byte	.LASF53
 1171 0444 04       		.byte	0x4
 1172 0445 E3       		.byte	0xe3
 1173 0446 6B000000 		.4byte	0x6b
 1174 044a 19       		.uleb128 0x19
 1175 044b FC020000 		.4byte	.LASF45
 1176 044f 03       		.byte	0x3
 1177 0450 1D       		.byte	0x1d
 1178 0451 5B040000 		.4byte	0x45b
 1179 0455 1A       		.uleb128 0x1a
 1180 0456 83000000 		.4byte	0x83
 1181 045a 00       		.byte	0
 1182 045b 19       		.uleb128 0x19
 1183 045c EF010000 		.4byte	.LASF46
 1184 0460 04       		.byte	0x4
 1185 0461 E4       		.byte	0xe4
 1186 0462 6C040000 		.4byte	0x46c
 1187 0466 1A       		.uleb128 0x1a
 1188 0467 6B000000 		.4byte	0x6b
 1189 046b 00       		.byte	0
 1190 046c 1B       		.uleb128 0x1b
 1191 046d 48030000 		.4byte	.LASF54
 1192 0471 03       		.byte	0x3
 1193 0472 27       		.byte	0x27
 1194 0473 00       		.byte	0
ARM GAS  C:\Users\Andres\AppData\Local\Temp\ccONmjfL.s 			page 50


 1195              		.section	.debug_abbrev,"",%progbits
 1196              	.Ldebug_abbrev0:
 1197 0000 01       		.uleb128 0x1
 1198 0001 11       		.uleb128 0x11
 1199 0002 01       		.byte	0x1
 1200 0003 25       		.uleb128 0x25
 1201 0004 0E       		.uleb128 0xe
 1202 0005 13       		.uleb128 0x13
 1203 0006 0B       		.uleb128 0xb
 1204 0007 03       		.uleb128 0x3
 1205 0008 0E       		.uleb128 0xe
 1206 0009 1B       		.uleb128 0x1b
 1207 000a 0E       		.uleb128 0xe
 1208 000b 55       		.uleb128 0x55
 1209 000c 17       		.uleb128 0x17
 1210 000d 11       		.uleb128 0x11
 1211 000e 01       		.uleb128 0x1
 1212 000f 10       		.uleb128 0x10
 1213 0010 17       		.uleb128 0x17
 1214 0011 00       		.byte	0
 1215 0012 00       		.byte	0
 1216 0013 02       		.uleb128 0x2
 1217 0014 24       		.uleb128 0x24
 1218 0015 00       		.byte	0
 1219 0016 0B       		.uleb128 0xb
 1220 0017 0B       		.uleb128 0xb
 1221 0018 3E       		.uleb128 0x3e
 1222 0019 0B       		.uleb128 0xb
 1223 001a 03       		.uleb128 0x3
 1224 001b 0E       		.uleb128 0xe
 1225 001c 00       		.byte	0
 1226 001d 00       		.byte	0
 1227 001e 03       		.uleb128 0x3
 1228 001f 24       		.uleb128 0x24
 1229 0020 00       		.byte	0
 1230 0021 0B       		.uleb128 0xb
 1231 0022 0B       		.uleb128 0xb
 1232 0023 3E       		.uleb128 0x3e
 1233 0024 0B       		.uleb128 0xb
 1234 0025 03       		.uleb128 0x3
 1235 0026 08       		.uleb128 0x8
 1236 0027 00       		.byte	0
 1237 0028 00       		.byte	0
 1238 0029 04       		.uleb128 0x4
 1239 002a 16       		.uleb128 0x16
 1240 002b 00       		.byte	0
 1241 002c 03       		.uleb128 0x3
 1242 002d 0E       		.uleb128 0xe
 1243 002e 3A       		.uleb128 0x3a
 1244 002f 0B       		.uleb128 0xb
 1245 0030 3B       		.uleb128 0x3b
 1246 0031 05       		.uleb128 0x5
 1247 0032 49       		.uleb128 0x49
 1248 0033 13       		.uleb128 0x13
 1249 0034 00       		.byte	0
 1250 0035 00       		.byte	0
 1251 0036 05       		.uleb128 0x5
ARM GAS  C:\Users\Andres\AppData\Local\Temp\ccONmjfL.s 			page 51


 1252 0037 35       		.uleb128 0x35
 1253 0038 00       		.byte	0
 1254 0039 49       		.uleb128 0x49
 1255 003a 13       		.uleb128 0x13
 1256 003b 00       		.byte	0
 1257 003c 00       		.byte	0
 1258 003d 06       		.uleb128 0x6
 1259 003e 2E       		.uleb128 0x2e
 1260 003f 00       		.byte	0
 1261 0040 3F       		.uleb128 0x3f
 1262 0041 19       		.uleb128 0x19
 1263 0042 03       		.uleb128 0x3
 1264 0043 0E       		.uleb128 0xe
 1265 0044 3A       		.uleb128 0x3a
 1266 0045 0B       		.uleb128 0xb
 1267 0046 3B       		.uleb128 0x3b
 1268 0047 0B       		.uleb128 0xb
 1269 0048 27       		.uleb128 0x27
 1270 0049 19       		.uleb128 0x19
 1271 004a 11       		.uleb128 0x11
 1272 004b 01       		.uleb128 0x1
 1273 004c 12       		.uleb128 0x12
 1274 004d 06       		.uleb128 0x6
 1275 004e 40       		.uleb128 0x40
 1276 004f 18       		.uleb128 0x18
 1277 0050 9742     		.uleb128 0x2117
 1278 0052 19       		.uleb128 0x19
 1279 0053 00       		.byte	0
 1280 0054 00       		.byte	0
 1281 0055 07       		.uleb128 0x7
 1282 0056 2E       		.uleb128 0x2e
 1283 0057 01       		.byte	0x1
 1284 0058 3F       		.uleb128 0x3f
 1285 0059 19       		.uleb128 0x19
 1286 005a 03       		.uleb128 0x3
 1287 005b 0E       		.uleb128 0xe
 1288 005c 3A       		.uleb128 0x3a
 1289 005d 0B       		.uleb128 0xb
 1290 005e 3B       		.uleb128 0x3b
 1291 005f 0B       		.uleb128 0xb
 1292 0060 27       		.uleb128 0x27
 1293 0061 19       		.uleb128 0x19
 1294 0062 11       		.uleb128 0x11
 1295 0063 01       		.uleb128 0x1
 1296 0064 12       		.uleb128 0x12
 1297 0065 06       		.uleb128 0x6
 1298 0066 40       		.uleb128 0x40
 1299 0067 18       		.uleb128 0x18
 1300 0068 9742     		.uleb128 0x2117
 1301 006a 19       		.uleb128 0x19
 1302 006b 01       		.uleb128 0x1
 1303 006c 13       		.uleb128 0x13
 1304 006d 00       		.byte	0
 1305 006e 00       		.byte	0
 1306 006f 08       		.uleb128 0x8
 1307 0070 34       		.uleb128 0x34
 1308 0071 00       		.byte	0
ARM GAS  C:\Users\Andres\AppData\Local\Temp\ccONmjfL.s 			page 52


 1309 0072 03       		.uleb128 0x3
 1310 0073 0E       		.uleb128 0xe
 1311 0074 3A       		.uleb128 0x3a
 1312 0075 0B       		.uleb128 0xb
 1313 0076 3B       		.uleb128 0x3b
 1314 0077 0B       		.uleb128 0xb
 1315 0078 49       		.uleb128 0x49
 1316 0079 13       		.uleb128 0x13
 1317 007a 02       		.uleb128 0x2
 1318 007b 17       		.uleb128 0x17
 1319 007c 00       		.byte	0
 1320 007d 00       		.byte	0
 1321 007e 09       		.uleb128 0x9
 1322 007f 898201   		.uleb128 0x4109
 1323 0082 00       		.byte	0
 1324 0083 11       		.uleb128 0x11
 1325 0084 01       		.uleb128 0x1
 1326 0085 31       		.uleb128 0x31
 1327 0086 13       		.uleb128 0x13
 1328 0087 00       		.byte	0
 1329 0088 00       		.byte	0
 1330 0089 0A       		.uleb128 0xa
 1331 008a 898201   		.uleb128 0x4109
 1332 008d 01       		.byte	0x1
 1333 008e 11       		.uleb128 0x11
 1334 008f 01       		.uleb128 0x1
 1335 0090 31       		.uleb128 0x31
 1336 0091 13       		.uleb128 0x13
 1337 0092 01       		.uleb128 0x1
 1338 0093 13       		.uleb128 0x13
 1339 0094 00       		.byte	0
 1340 0095 00       		.byte	0
 1341 0096 0B       		.uleb128 0xb
 1342 0097 8A8201   		.uleb128 0x410a
 1343 009a 00       		.byte	0
 1344 009b 02       		.uleb128 0x2
 1345 009c 18       		.uleb128 0x18
 1346 009d 9142     		.uleb128 0x2111
 1347 009f 18       		.uleb128 0x18
 1348 00a0 00       		.byte	0
 1349 00a1 00       		.byte	0
 1350 00a2 0C       		.uleb128 0xc
 1351 00a3 898201   		.uleb128 0x4109
 1352 00a6 01       		.byte	0x1
 1353 00a7 11       		.uleb128 0x11
 1354 00a8 01       		.uleb128 0x1
 1355 00a9 31       		.uleb128 0x31
 1356 00aa 13       		.uleb128 0x13
 1357 00ab 00       		.byte	0
 1358 00ac 00       		.byte	0
 1359 00ad 0D       		.uleb128 0xd
 1360 00ae 2E       		.uleb128 0x2e
 1361 00af 00       		.byte	0
 1362 00b0 3F       		.uleb128 0x3f
 1363 00b1 19       		.uleb128 0x19
 1364 00b2 03       		.uleb128 0x3
 1365 00b3 0E       		.uleb128 0xe
ARM GAS  C:\Users\Andres\AppData\Local\Temp\ccONmjfL.s 			page 53


 1366 00b4 3A       		.uleb128 0x3a
 1367 00b5 0B       		.uleb128 0xb
 1368 00b6 3B       		.uleb128 0x3b
 1369 00b7 05       		.uleb128 0x5
 1370 00b8 27       		.uleb128 0x27
 1371 00b9 19       		.uleb128 0x19
 1372 00ba 49       		.uleb128 0x49
 1373 00bb 13       		.uleb128 0x13
 1374 00bc 11       		.uleb128 0x11
 1375 00bd 01       		.uleb128 0x1
 1376 00be 12       		.uleb128 0x12
 1377 00bf 06       		.uleb128 0x6
 1378 00c0 40       		.uleb128 0x40
 1379 00c1 18       		.uleb128 0x18
 1380 00c2 9742     		.uleb128 0x2117
 1381 00c4 19       		.uleb128 0x19
 1382 00c5 00       		.byte	0
 1383 00c6 00       		.byte	0
 1384 00c7 0E       		.uleb128 0xe
 1385 00c8 2E       		.uleb128 0x2e
 1386 00c9 01       		.byte	0x1
 1387 00ca 3F       		.uleb128 0x3f
 1388 00cb 19       		.uleb128 0x19
 1389 00cc 03       		.uleb128 0x3
 1390 00cd 0E       		.uleb128 0xe
 1391 00ce 3A       		.uleb128 0x3a
 1392 00cf 0B       		.uleb128 0xb
 1393 00d0 3B       		.uleb128 0x3b
 1394 00d1 05       		.uleb128 0x5
 1395 00d2 27       		.uleb128 0x27
 1396 00d3 19       		.uleb128 0x19
 1397 00d4 11       		.uleb128 0x11
 1398 00d5 01       		.uleb128 0x1
 1399 00d6 12       		.uleb128 0x12
 1400 00d7 06       		.uleb128 0x6
 1401 00d8 40       		.uleb128 0x40
 1402 00d9 18       		.uleb128 0x18
 1403 00da 9742     		.uleb128 0x2117
 1404 00dc 19       		.uleb128 0x19
 1405 00dd 01       		.uleb128 0x1
 1406 00de 13       		.uleb128 0x13
 1407 00df 00       		.byte	0
 1408 00e0 00       		.byte	0
 1409 00e1 0F       		.uleb128 0xf
 1410 00e2 05       		.uleb128 0x5
 1411 00e3 00       		.byte	0
 1412 00e4 03       		.uleb128 0x3
 1413 00e5 0E       		.uleb128 0xe
 1414 00e6 3A       		.uleb128 0x3a
 1415 00e7 0B       		.uleb128 0xb
 1416 00e8 3B       		.uleb128 0x3b
 1417 00e9 05       		.uleb128 0x5
 1418 00ea 49       		.uleb128 0x49
 1419 00eb 13       		.uleb128 0x13
 1420 00ec 02       		.uleb128 0x2
 1421 00ed 18       		.uleb128 0x18
 1422 00ee 00       		.byte	0
ARM GAS  C:\Users\Andres\AppData\Local\Temp\ccONmjfL.s 			page 54


 1423 00ef 00       		.byte	0
 1424 00f0 10       		.uleb128 0x10
 1425 00f1 05       		.uleb128 0x5
 1426 00f2 00       		.byte	0
 1427 00f3 03       		.uleb128 0x3
 1428 00f4 0E       		.uleb128 0xe
 1429 00f5 3A       		.uleb128 0x3a
 1430 00f6 0B       		.uleb128 0xb
 1431 00f7 3B       		.uleb128 0x3b
 1432 00f8 05       		.uleb128 0x5
 1433 00f9 49       		.uleb128 0x49
 1434 00fa 13       		.uleb128 0x13
 1435 00fb 02       		.uleb128 0x2
 1436 00fc 17       		.uleb128 0x17
 1437 00fd 00       		.byte	0
 1438 00fe 00       		.byte	0
 1439 00ff 11       		.uleb128 0x11
 1440 0100 34       		.uleb128 0x34
 1441 0101 00       		.byte	0
 1442 0102 03       		.uleb128 0x3
 1443 0103 0E       		.uleb128 0xe
 1444 0104 3A       		.uleb128 0x3a
 1445 0105 0B       		.uleb128 0xb
 1446 0106 3B       		.uleb128 0x3b
 1447 0107 05       		.uleb128 0x5
 1448 0108 49       		.uleb128 0x49
 1449 0109 13       		.uleb128 0x13
 1450 010a 02       		.uleb128 0x2
 1451 010b 17       		.uleb128 0x17
 1452 010c 00       		.byte	0
 1453 010d 00       		.byte	0
 1454 010e 12       		.uleb128 0x12
 1455 010f 0F       		.uleb128 0xf
 1456 0110 00       		.byte	0
 1457 0111 0B       		.uleb128 0xb
 1458 0112 0B       		.uleb128 0xb
 1459 0113 49       		.uleb128 0x49
 1460 0114 13       		.uleb128 0x13
 1461 0115 00       		.byte	0
 1462 0116 00       		.byte	0
 1463 0117 13       		.uleb128 0x13
 1464 0118 26       		.uleb128 0x26
 1465 0119 00       		.byte	0
 1466 011a 49       		.uleb128 0x49
 1467 011b 13       		.uleb128 0x13
 1468 011c 00       		.byte	0
 1469 011d 00       		.byte	0
 1470 011e 14       		.uleb128 0x14
 1471 011f 2E       		.uleb128 0x2e
 1472 0120 01       		.byte	0x1
 1473 0121 3F       		.uleb128 0x3f
 1474 0122 19       		.uleb128 0x19
 1475 0123 03       		.uleb128 0x3
 1476 0124 0E       		.uleb128 0xe
 1477 0125 3A       		.uleb128 0x3a
 1478 0126 0B       		.uleb128 0xb
 1479 0127 3B       		.uleb128 0x3b
ARM GAS  C:\Users\Andres\AppData\Local\Temp\ccONmjfL.s 			page 55


 1480 0128 05       		.uleb128 0x5
 1481 0129 27       		.uleb128 0x27
 1482 012a 19       		.uleb128 0x19
 1483 012b 49       		.uleb128 0x49
 1484 012c 13       		.uleb128 0x13
 1485 012d 11       		.uleb128 0x11
 1486 012e 01       		.uleb128 0x1
 1487 012f 12       		.uleb128 0x12
 1488 0130 06       		.uleb128 0x6
 1489 0131 40       		.uleb128 0x40
 1490 0132 18       		.uleb128 0x18
 1491 0133 9742     		.uleb128 0x2117
 1492 0135 19       		.uleb128 0x19
 1493 0136 01       		.uleb128 0x1
 1494 0137 13       		.uleb128 0x13
 1495 0138 00       		.byte	0
 1496 0139 00       		.byte	0
 1497 013a 15       		.uleb128 0x15
 1498 013b 0B       		.uleb128 0xb
 1499 013c 01       		.byte	0x1
 1500 013d 11       		.uleb128 0x11
 1501 013e 01       		.uleb128 0x1
 1502 013f 12       		.uleb128 0x12
 1503 0140 06       		.uleb128 0x6
 1504 0141 00       		.byte	0
 1505 0142 00       		.byte	0
 1506 0143 16       		.uleb128 0x16
 1507 0144 34       		.uleb128 0x34
 1508 0145 00       		.byte	0
 1509 0146 03       		.uleb128 0x3
 1510 0147 0E       		.uleb128 0xe
 1511 0148 3A       		.uleb128 0x3a
 1512 0149 0B       		.uleb128 0xb
 1513 014a 3B       		.uleb128 0x3b
 1514 014b 05       		.uleb128 0x5
 1515 014c 49       		.uleb128 0x49
 1516 014d 13       		.uleb128 0x13
 1517 014e 02       		.uleb128 0x2
 1518 014f 18       		.uleb128 0x18
 1519 0150 00       		.byte	0
 1520 0151 00       		.byte	0
 1521 0152 17       		.uleb128 0x17
 1522 0153 34       		.uleb128 0x34
 1523 0154 00       		.byte	0
 1524 0155 03       		.uleb128 0x3
 1525 0156 0E       		.uleb128 0xe
 1526 0157 3A       		.uleb128 0x3a
 1527 0158 0B       		.uleb128 0xb
 1528 0159 3B       		.uleb128 0x3b
 1529 015a 0B       		.uleb128 0xb
 1530 015b 49       		.uleb128 0x49
 1531 015c 13       		.uleb128 0x13
 1532 015d 3F       		.uleb128 0x3f
 1533 015e 19       		.uleb128 0x19
 1534 015f 02       		.uleb128 0x2
 1535 0160 18       		.uleb128 0x18
 1536 0161 00       		.byte	0
ARM GAS  C:\Users\Andres\AppData\Local\Temp\ccONmjfL.s 			page 56


 1537 0162 00       		.byte	0
 1538 0163 18       		.uleb128 0x18
 1539 0164 2E       		.uleb128 0x2e
 1540 0165 00       		.byte	0
 1541 0166 3F       		.uleb128 0x3f
 1542 0167 19       		.uleb128 0x19
 1543 0168 03       		.uleb128 0x3
 1544 0169 0E       		.uleb128 0xe
 1545 016a 3A       		.uleb128 0x3a
 1546 016b 0B       		.uleb128 0xb
 1547 016c 3B       		.uleb128 0x3b
 1548 016d 0B       		.uleb128 0xb
 1549 016e 27       		.uleb128 0x27
 1550 016f 19       		.uleb128 0x19
 1551 0170 49       		.uleb128 0x49
 1552 0171 13       		.uleb128 0x13
 1553 0172 3C       		.uleb128 0x3c
 1554 0173 19       		.uleb128 0x19
 1555 0174 00       		.byte	0
 1556 0175 00       		.byte	0
 1557 0176 19       		.uleb128 0x19
 1558 0177 2E       		.uleb128 0x2e
 1559 0178 01       		.byte	0x1
 1560 0179 3F       		.uleb128 0x3f
 1561 017a 19       		.uleb128 0x19
 1562 017b 03       		.uleb128 0x3
 1563 017c 0E       		.uleb128 0xe
 1564 017d 3A       		.uleb128 0x3a
 1565 017e 0B       		.uleb128 0xb
 1566 017f 3B       		.uleb128 0x3b
 1567 0180 0B       		.uleb128 0xb
 1568 0181 27       		.uleb128 0x27
 1569 0182 19       		.uleb128 0x19
 1570 0183 3C       		.uleb128 0x3c
 1571 0184 19       		.uleb128 0x19
 1572 0185 01       		.uleb128 0x1
 1573 0186 13       		.uleb128 0x13
 1574 0187 00       		.byte	0
 1575 0188 00       		.byte	0
 1576 0189 1A       		.uleb128 0x1a
 1577 018a 05       		.uleb128 0x5
 1578 018b 00       		.byte	0
 1579 018c 49       		.uleb128 0x49
 1580 018d 13       		.uleb128 0x13
 1581 018e 00       		.byte	0
 1582 018f 00       		.byte	0
 1583 0190 1B       		.uleb128 0x1b
 1584 0191 2E       		.uleb128 0x2e
 1585 0192 00       		.byte	0
 1586 0193 3F       		.uleb128 0x3f
 1587 0194 19       		.uleb128 0x19
 1588 0195 03       		.uleb128 0x3
 1589 0196 0E       		.uleb128 0xe
 1590 0197 3A       		.uleb128 0x3a
 1591 0198 0B       		.uleb128 0xb
 1592 0199 3B       		.uleb128 0x3b
 1593 019a 0B       		.uleb128 0xb
ARM GAS  C:\Users\Andres\AppData\Local\Temp\ccONmjfL.s 			page 57


 1594 019b 27       		.uleb128 0x27
 1595 019c 19       		.uleb128 0x19
 1596 019d 3C       		.uleb128 0x3c
 1597 019e 19       		.uleb128 0x19
 1598 019f 00       		.byte	0
 1599 01a0 00       		.byte	0
 1600 01a1 00       		.byte	0
 1601              		.section	.debug_loc,"",%progbits
 1602              	.Ldebug_loc0:
 1603              	.LLST0:
 1604 0000 08000000 		.4byte	.LVL1
 1605 0004 1E000000 		.4byte	.LVL4
 1606 0008 0100     		.2byte	0x1
 1607 000a 54       		.byte	0x54
 1608 000b 00000000 		.4byte	0
 1609 000f 00000000 		.4byte	0
 1610              	.LLST1:
 1611 0013 08000000 		.4byte	.LVL8
 1612 0017 1C000000 		.4byte	.LVL11
 1613 001b 0100     		.2byte	0x1
 1614 001d 54       		.byte	0x54
 1615 001e 00000000 		.4byte	0
 1616 0022 00000000 		.4byte	0
 1617              	.LLST2:
 1618 0026 00000000 		.4byte	.LVL16
 1619 002a 0C000000 		.4byte	.LVL18
 1620 002e 0100     		.2byte	0x1
 1621 0030 50       		.byte	0x50
 1622 0031 0C000000 		.4byte	.LVL18
 1623 0035 16000000 		.4byte	.LVL22
 1624 0039 0100     		.2byte	0x1
 1625 003b 55       		.byte	0x55
 1626 003c 16000000 		.4byte	.LVL22
 1627 0040 1A000000 		.4byte	.LVL23
 1628 0044 0100     		.2byte	0x1
 1629 0046 50       		.byte	0x50
 1630 0047 1A000000 		.4byte	.LVL23
 1631 004b 20000000 		.4byte	.LVL24
 1632 004f 0100     		.2byte	0x1
 1633 0051 55       		.byte	0x55
 1634 0052 20000000 		.4byte	.LVL24
 1635 0056 28000000 		.4byte	.LFE11
 1636 005a 0400     		.2byte	0x4
 1637 005c F3       		.byte	0xf3
 1638 005d 01       		.uleb128 0x1
 1639 005e 50       		.byte	0x50
 1640 005f 9F       		.byte	0x9f
 1641 0060 00000000 		.4byte	0
 1642 0064 00000000 		.4byte	0
 1643              	.LLST3:
 1644 0068 02000000 		.4byte	.LVL17
 1645 006c 0C000000 		.4byte	.LVL18
 1646 0070 0200     		.2byte	0x2
 1647 0072 30       		.byte	0x30
 1648 0073 9F       		.byte	0x9f
 1649 0074 0C000000 		.4byte	.LVL18
 1650 0078 12000000 		.4byte	.LVL20
ARM GAS  C:\Users\Andres\AppData\Local\Temp\ccONmjfL.s 			page 58


 1651 007c 0100     		.2byte	0x1
 1652 007e 54       		.byte	0x54
 1653 007f 14000000 		.4byte	.LVL21
 1654 0083 16000000 		.4byte	.LVL22
 1655 0087 0100     		.2byte	0x1
 1656 0089 54       		.byte	0x54
 1657 008a 16000000 		.4byte	.LVL22
 1658 008e 1A000000 		.4byte	.LVL23
 1659 0092 0200     		.2byte	0x2
 1660 0094 30       		.byte	0x30
 1661 0095 9F       		.byte	0x9f
 1662 0096 1A000000 		.4byte	.LVL23
 1663 009a 20000000 		.4byte	.LVL24
 1664 009e 0100     		.2byte	0x1
 1665 00a0 54       		.byte	0x54
 1666 00a1 00000000 		.4byte	0
 1667 00a5 00000000 		.4byte	0
 1668              	.LLST4:
 1669 00a9 00000000 		.4byte	.LVL25
 1670 00ad 0C000000 		.4byte	.LVL27
 1671 00b1 0100     		.2byte	0x1
 1672 00b3 50       		.byte	0x50
 1673 00b4 0C000000 		.4byte	.LVL27
 1674 00b8 18000000 		.4byte	.LVL31
 1675 00bc 0100     		.2byte	0x1
 1676 00be 56       		.byte	0x56
 1677 00bf 18000000 		.4byte	.LVL31
 1678 00c3 1E000000 		.4byte	.LVL32
 1679 00c7 0100     		.2byte	0x1
 1680 00c9 50       		.byte	0x50
 1681 00ca 1E000000 		.4byte	.LVL32
 1682 00ce 22000000 		.4byte	.LVL33
 1683 00d2 0100     		.2byte	0x1
 1684 00d4 56       		.byte	0x56
 1685 00d5 22000000 		.4byte	.LVL33
 1686 00d9 28000000 		.4byte	.LFE12
 1687 00dd 0400     		.2byte	0x4
 1688 00df F3       		.byte	0xf3
 1689 00e0 01       		.uleb128 0x1
 1690 00e1 50       		.byte	0x50
 1691 00e2 9F       		.byte	0x9f
 1692 00e3 00000000 		.4byte	0
 1693 00e7 00000000 		.4byte	0
 1694              	.LLST5:
 1695 00eb 00000000 		.4byte	.LVL25
 1696 00ef 0C000000 		.4byte	.LVL27
 1697 00f3 0100     		.2byte	0x1
 1698 00f5 51       		.byte	0x51
 1699 00f6 0C000000 		.4byte	.LVL27
 1700 00fa 18000000 		.4byte	.LVL31
 1701 00fe 0400     		.2byte	0x4
 1702 0100 F3       		.byte	0xf3
 1703 0101 01       		.uleb128 0x1
 1704 0102 51       		.byte	0x51
 1705 0103 9F       		.byte	0x9f
 1706 0104 18000000 		.4byte	.LVL31
 1707 0108 1E000000 		.4byte	.LVL32
ARM GAS  C:\Users\Andres\AppData\Local\Temp\ccONmjfL.s 			page 59


 1708 010c 0100     		.2byte	0x1
 1709 010e 51       		.byte	0x51
 1710 010f 1E000000 		.4byte	.LVL32
 1711 0113 28000000 		.4byte	.LFE12
 1712 0117 0400     		.2byte	0x4
 1713 0119 F3       		.byte	0xf3
 1714 011a 01       		.uleb128 0x1
 1715 011b 51       		.byte	0x51
 1716 011c 9F       		.byte	0x9f
 1717 011d 00000000 		.4byte	0
 1718 0121 00000000 		.4byte	0
 1719              	.LLST6:
 1720 0125 02000000 		.4byte	.LVL26
 1721 0129 0C000000 		.4byte	.LVL27
 1722 012d 0200     		.2byte	0x2
 1723 012f 30       		.byte	0x30
 1724 0130 9F       		.byte	0x9f
 1725 0131 0C000000 		.4byte	.LVL27
 1726 0135 14000000 		.4byte	.LVL29
 1727 0139 0100     		.2byte	0x1
 1728 013b 54       		.byte	0x54
 1729 013c 16000000 		.4byte	.LVL30
 1730 0140 18000000 		.4byte	.LVL31
 1731 0144 0100     		.2byte	0x1
 1732 0146 54       		.byte	0x54
 1733 0147 18000000 		.4byte	.LVL31
 1734 014b 1E000000 		.4byte	.LVL32
 1735 014f 0200     		.2byte	0x2
 1736 0151 30       		.byte	0x30
 1737 0152 9F       		.byte	0x9f
 1738 0153 1E000000 		.4byte	.LVL32
 1739 0157 22000000 		.4byte	.LVL33
 1740 015b 0100     		.2byte	0x1
 1741 015d 54       		.byte	0x54
 1742 015e 00000000 		.4byte	0
 1743 0162 00000000 		.4byte	0
 1744              	.LLST7:
 1745 0166 00000000 		.4byte	.LVL34
 1746 016a 0D000000 		.4byte	.LVL35-1
 1747 016e 0100     		.2byte	0x1
 1748 0170 50       		.byte	0x50
 1749 0171 0D000000 		.4byte	.LVL35-1
 1750 0175 20000000 		.4byte	.LFE13
 1751 0179 0400     		.2byte	0x4
 1752 017b F3       		.byte	0xf3
 1753 017c 01       		.uleb128 0x1
 1754 017d 50       		.byte	0x50
 1755 017e 9F       		.byte	0x9f
 1756 017f 00000000 		.4byte	0
 1757 0183 00000000 		.4byte	0
 1758              	.LLST8:
 1759 0187 06000000 		.4byte	.LVL38
 1760 018b 0E000000 		.4byte	.LVL39
 1761 018f 0100     		.2byte	0x1
 1762 0191 53       		.byte	0x53
 1763 0192 12000000 		.4byte	.LVL40
 1764 0196 16000000 		.4byte	.LVL41
ARM GAS  C:\Users\Andres\AppData\Local\Temp\ccONmjfL.s 			page 60


 1765 019a 0100     		.2byte	0x1
 1766 019c 53       		.byte	0x53
 1767 019d 18000000 		.4byte	.LVL42
 1768 01a1 20000000 		.4byte	.LFE14
 1769 01a5 0100     		.2byte	0x1
 1770 01a7 50       		.byte	0x50
 1771 01a8 00000000 		.4byte	0
 1772 01ac 00000000 		.4byte	0
 1773              	.LLST9:
 1774 01b0 06000000 		.4byte	.LVL43
 1775 01b4 1B000000 		.4byte	.LVL44-1
 1776 01b8 0100     		.2byte	0x1
 1777 01ba 50       		.byte	0x50
 1778 01bb 00000000 		.4byte	0
 1779 01bf 00000000 		.4byte	0
 1780              	.LLST10:
 1781 01c3 00000000 		.4byte	.LVL45
 1782 01c7 3C000000 		.4byte	.LVL50
 1783 01cb 0100     		.2byte	0x1
 1784 01cd 50       		.byte	0x50
 1785 01ce 3C000000 		.4byte	.LVL50
 1786 01d2 5C000000 		.4byte	.LFE16
 1787 01d6 0400     		.2byte	0x4
 1788 01d8 F3       		.byte	0xf3
 1789 01d9 01       		.uleb128 0x1
 1790 01da 50       		.byte	0x50
 1791 01db 9F       		.byte	0x9f
 1792 01dc 00000000 		.4byte	0
 1793 01e0 00000000 		.4byte	0
 1794              	.LLST11:
 1795 01e4 26000000 		.4byte	.LVL46
 1796 01e8 2A000000 		.4byte	.LVL47
 1797 01ec 0100     		.2byte	0x1
 1798 01ee 53       		.byte	0x53
 1799 01ef 36000000 		.4byte	.LVL48
 1800 01f3 3A000000 		.4byte	.LVL49
 1801 01f7 0100     		.2byte	0x1
 1802 01f9 53       		.byte	0x53
 1803 01fa 00000000 		.4byte	0
 1804 01fe 00000000 		.4byte	0
 1805              		.section	.debug_aranges,"",%progbits
 1806 0000 9C000000 		.4byte	0x9c
 1807 0004 0200     		.2byte	0x2
 1808 0006 00000000 		.4byte	.Ldebug_info0
 1809 000a 04       		.byte	0x4
 1810 000b 00       		.byte	0
 1811 000c 0000     		.2byte	0
 1812 000e 0000     		.2byte	0
 1813 0010 00000000 		.4byte	.LFB2
 1814 0014 20000000 		.4byte	.LFE2-.LFB2
 1815 0018 00000000 		.4byte	.LFB3
 1816 001c 24000000 		.4byte	.LFE3-.LFB3
 1817 0020 00000000 		.4byte	.LFB1
 1818 0024 20000000 		.4byte	.LFE1-.LFB1
 1819 0028 00000000 		.4byte	.LFB4
 1820 002c 24000000 		.4byte	.LFE4-.LFB4
 1821 0030 00000000 		.4byte	.LFB5
ARM GAS  C:\Users\Andres\AppData\Local\Temp\ccONmjfL.s 			page 61


 1822 0034 04000000 		.4byte	.LFE5-.LFB5
 1823 0038 00000000 		.4byte	.LFB6
 1824 003c 02000000 		.4byte	.LFE6-.LFB6
 1825 0040 00000000 		.4byte	.LFB7
 1826 0044 0C000000 		.4byte	.LFE7-.LFB7
 1827 0048 00000000 		.4byte	.LFB8
 1828 004c 18000000 		.4byte	.LFE8-.LFB8
 1829 0050 00000000 		.4byte	.LFB9
 1830 0054 0C000000 		.4byte	.LFE9-.LFB9
 1831 0058 00000000 		.4byte	.LFB10
 1832 005c 18000000 		.4byte	.LFE10-.LFB10
 1833 0060 00000000 		.4byte	.LFB11
 1834 0064 28000000 		.4byte	.LFE11-.LFB11
 1835 0068 00000000 		.4byte	.LFB12
 1836 006c 28000000 		.4byte	.LFE12-.LFB12
 1837 0070 00000000 		.4byte	.LFB13
 1838 0074 20000000 		.4byte	.LFE13-.LFB13
 1839 0078 00000000 		.4byte	.LFB14
 1840 007c 20000000 		.4byte	.LFE14-.LFB14
 1841 0080 00000000 		.4byte	.LFB15
 1842 0084 24000000 		.4byte	.LFE15-.LFB15
 1843 0088 00000000 		.4byte	.LFB16
 1844 008c 5C000000 		.4byte	.LFE16-.LFB16
 1845 0090 00000000 		.4byte	.LFB17
 1846 0094 02000000 		.4byte	.LFE17-.LFB17
 1847 0098 00000000 		.4byte	0
 1848 009c 00000000 		.4byte	0
 1849              		.section	.debug_ranges,"",%progbits
 1850              	.Ldebug_ranges0:
 1851 0000 00000000 		.4byte	.LFB2
 1852 0004 20000000 		.4byte	.LFE2
 1853 0008 00000000 		.4byte	.LFB3
 1854 000c 24000000 		.4byte	.LFE3
 1855 0010 00000000 		.4byte	.LFB1
 1856 0014 20000000 		.4byte	.LFE1
 1857 0018 00000000 		.4byte	.LFB4
 1858 001c 24000000 		.4byte	.LFE4
 1859 0020 00000000 		.4byte	.LFB5
 1860 0024 04000000 		.4byte	.LFE5
 1861 0028 00000000 		.4byte	.LFB6
 1862 002c 02000000 		.4byte	.LFE6
 1863 0030 00000000 		.4byte	.LFB7
 1864 0034 0C000000 		.4byte	.LFE7
 1865 0038 00000000 		.4byte	.LFB8
 1866 003c 18000000 		.4byte	.LFE8
 1867 0040 00000000 		.4byte	.LFB9
 1868 0044 0C000000 		.4byte	.LFE9
 1869 0048 00000000 		.4byte	.LFB10
 1870 004c 18000000 		.4byte	.LFE10
 1871 0050 00000000 		.4byte	.LFB11
 1872 0054 28000000 		.4byte	.LFE11
 1873 0058 00000000 		.4byte	.LFB12
 1874 005c 28000000 		.4byte	.LFE12
 1875 0060 00000000 		.4byte	.LFB13
 1876 0064 20000000 		.4byte	.LFE13
 1877 0068 00000000 		.4byte	.LFB14
 1878 006c 20000000 		.4byte	.LFE14
ARM GAS  C:\Users\Andres\AppData\Local\Temp\ccONmjfL.s 			page 62


 1879 0070 00000000 		.4byte	.LFB15
 1880 0074 24000000 		.4byte	.LFE15
 1881 0078 00000000 		.4byte	.LFB16
 1882 007c 5C000000 		.4byte	.LFE16
 1883 0080 00000000 		.4byte	.LFB17
 1884 0084 02000000 		.4byte	.LFE17
 1885 0088 00000000 		.4byte	0
 1886 008c 00000000 		.4byte	0
 1887              		.section	.debug_line,"",%progbits
 1888              	.Ldebug_line0:
 1889 0000 03020000 		.section	.debug_str,"MS",%progbits,1
 1889      02006100 
 1889      00000201 
 1889      FB0E0D00 
 1889      01010101 
 1890              	.LASF6:
 1891 0000 6C6F6E67 		.ascii	"long long int\000"
 1891      206C6F6E 
 1891      6720696E 
 1891      7400
 1892              	.LASF51:
 1893 000e 4D4F544F 		.ascii	"MOTOR_GetTxBufferSize\000"
 1893      525F4765 
 1893      74547842 
 1893      75666665 
 1893      7253697A 
 1894              	.LASF28:
 1895 0024 4D4F544F 		.ascii	"MOTOR_ReadControlRegister\000"
 1895      525F5265 
 1895      6164436F 
 1895      6E74726F 
 1895      6C526567 
 1896              	.LASF42:
 1897 003e 74785065 		.ascii	"txPeriod\000"
 1897      72696F64 
 1897      00
 1898              	.LASF29:
 1899 0047 4D4F544F 		.ascii	"MOTOR_ReadTxStatus\000"
 1899      525F5265 
 1899      61645478 
 1899      53746174 
 1899      757300
 1900              	.LASF19:
 1901 005a 4D4F544F 		.ascii	"MOTOR_Start\000"
 1901      525F5374 
 1901      61727400 
 1902              	.LASF41:
 1903 0066 746D7053 		.ascii	"tmpStat\000"
 1903      74617400 
 1904              	.LASF3:
 1905 006e 73686F72 		.ascii	"short unsigned int\000"
 1905      7420756E 
 1905      7369676E 
 1905      65642069 
 1905      6E7400
 1906              	.LASF48:
 1907 0081 47656E65 		.ascii	"Generated_Source\\PSoC4\\MOTOR.c\000"
ARM GAS  C:\Users\Andres\AppData\Local\Temp\ccONmjfL.s 			page 63


 1907      72617465 
 1907      645F536F 
 1907      75726365 
 1907      5C50536F 
 1908              	.LASF32:
 1909 00a0 73747269 		.ascii	"string\000"
 1909      6E6700
 1910              	.LASF43:
 1911 00a7 4D4F544F 		.ascii	"MOTOR_SetTxAddressMode\000"
 1911      525F5365 
 1911      74547841 
 1911      64647265 
 1911      73734D6F 
 1912              	.LASF49:
 1913 00be 443A5C68 		.ascii	"D:\\henrry\\empenzando\\modulo.cydsn\000"
 1913      656E7272 
 1913      795C656D 
 1913      70656E7A 
 1913      616E646F 
 1914              	.LASF12:
 1915 00e0 666C6F61 		.ascii	"float\000"
 1915      7400
 1916              	.LASF7:
 1917 00e6 6C6F6E67 		.ascii	"long long unsigned int\000"
 1917      206C6F6E 
 1917      6720756E 
 1917      7369676E 
 1917      65642069 
 1918              	.LASF44:
 1919 00fd 61646472 		.ascii	"addressMode\000"
 1919      6573734D 
 1919      6F646500 
 1920              	.LASF16:
 1921 0109 72656738 		.ascii	"reg8\000"
 1921      00
 1922              	.LASF5:
 1923 010e 6C6F6E67 		.ascii	"long unsigned int\000"
 1923      20756E73 
 1923      69676E65 
 1923      6420696E 
 1923      7400
 1924              	.LASF9:
 1925 0120 75696E74 		.ascii	"uint8\000"
 1925      3800
 1926              	.LASF24:
 1927 0126 636F6E74 		.ascii	"control\000"
 1927      726F6C00 
 1928              	.LASF39:
 1929 012e 4D4F544F 		.ascii	"MOTOR_SendBreak\000"
 1929      525F5365 
 1929      6E644272 
 1929      65616B00 
 1930              	.LASF35:
 1931 013e 62797465 		.ascii	"byteCount\000"
 1931      436F756E 
 1931      7400
 1932              	.LASF21:
ARM GAS  C:\Users\Andres\AppData\Local\Temp\ccONmjfL.s 			page 64


 1933 0148 656E6162 		.ascii	"enableInterrupts\000"
 1933      6C65496E 
 1933      74657272 
 1933      75707473 
 1933      00
 1934              	.LASF1:
 1935 0159 756E7369 		.ascii	"unsigned char\000"
 1935      676E6564 
 1935      20636861 
 1935      7200
 1936              	.LASF22:
 1937 0167 4D4F544F 		.ascii	"MOTOR_WriteControlRegister\000"
 1937      525F5772 
 1937      69746543 
 1937      6F6E7472 
 1937      6F6C5265 
 1938              	.LASF13:
 1939 0182 646F7562 		.ascii	"double\000"
 1939      6C6500
 1940              	.LASF25:
 1941 0189 696E7453 		.ascii	"intSrc\000"
 1941      726300
 1942              	.LASF2:
 1943 0190 73686F72 		.ascii	"short int\000"
 1943      7420696E 
 1943      7400
 1944              	.LASF10:
 1945 019a 75696E74 		.ascii	"uint16\000"
 1945      313600
 1946              	.LASF34:
 1947 01a1 4D4F544F 		.ascii	"MOTOR_PutArray\000"
 1947      525F5075 
 1947      74417272 
 1947      617900
 1948              	.LASF11:
 1949 01b0 75696E74 		.ascii	"uint32\000"
 1949      333200
 1950              	.LASF53:
 1951 01b7 4379456E 		.ascii	"CyEnterCriticalSection\000"
 1951      74657243 
 1951      72697469 
 1951      63616C53 
 1951      65637469 
 1952              	.LASF8:
 1953 01ce 756E7369 		.ascii	"unsigned int\000"
 1953      676E6564 
 1953      20696E74 
 1953      00
 1954              	.LASF38:
 1955 01db 4D4F544F 		.ascii	"MOTOR_ClearTxBuffer\000"
 1955      525F436C 
 1955      65617254 
 1955      78427566 
 1955      66657200 
 1956              	.LASF46:
 1957 01ef 43794578 		.ascii	"CyExitCriticalSection\000"
 1957      69744372 
ARM GAS  C:\Users\Andres\AppData\Local\Temp\ccONmjfL.s 			page 65


 1957      69746963 
 1957      616C5365 
 1957      6374696F 
 1958              	.LASF52:
 1959 0205 4D4F544F 		.ascii	"MOTOR_initVar\000"
 1959      525F696E 
 1959      69745661 
 1959      7200
 1960              	.LASF33:
 1961 0213 62756649 		.ascii	"bufIndex\000"
 1961      6E646578 
 1961      00
 1962              	.LASF36:
 1963 021c 4D4F544F 		.ascii	"MOTOR_PutCRLF\000"
 1963      525F5075 
 1963      7443524C 
 1963      4600
 1964              	.LASF17:
 1965 022a 73697A65 		.ascii	"sizetype\000"
 1965      74797065 
 1965      00
 1966              	.LASF14:
 1967 0233 63686172 		.ascii	"char8\000"
 1967      3800
 1968              	.LASF27:
 1969 0239 74784461 		.ascii	"txDataByte\000"
 1969      74614279 
 1969      746500
 1970              	.LASF15:
 1971 0244 63686172 		.ascii	"char\000"
 1971      00
 1972              	.LASF47:
 1973 0249 474E5520 		.ascii	"GNU C 4.9.3 20150303 (release) [ARM/embedded-4_9-br"
 1973      4320342E 
 1973      392E3320 
 1973      32303135 
 1973      30333033 
 1974 027c 616E6368 		.ascii	"anch revision 221220] -mcpu=cortex-m0 -mthumb -g -O"
 1974      20726576 
 1974      6973696F 
 1974      6E203232 
 1974      31323230 
 1975 02af 67202D66 		.ascii	"g -ffunction-sections -ffat-lto-objects\000"
 1975      66756E63 
 1975      74696F6E 
 1975      2D736563 
 1975      74696F6E 
 1976              	.LASF40:
 1977 02d7 7265744D 		.ascii	"retMode\000"
 1977      6F646500 
 1978              	.LASF31:
 1979 02df 4D4F544F 		.ascii	"MOTOR_PutString\000"
 1979      525F5075 
 1979      74537472 
 1979      696E6700 
 1980              	.LASF18:
 1981 02ef 4D4F544F 		.ascii	"MOTOR_Enable\000"
ARM GAS  C:\Users\Andres\AppData\Local\Temp\ccONmjfL.s 			page 66


 1981      525F456E 
 1981      61626C65 
 1981      00
 1982              	.LASF45:
 1983 02fc 4D4F544F 		.ascii	"MOTOR_IntClock_StartEx\000"
 1983      525F496E 
 1983      74436C6F 
 1983      636B5F53 
 1983      74617274 
 1984              	.LASF4:
 1985 0313 6C6F6E67 		.ascii	"long int\000"
 1985      20696E74 
 1985      00
 1986              	.LASF26:
 1987 031c 4D4F544F 		.ascii	"MOTOR_WriteTxData\000"
 1987      525F5772 
 1987      69746554 
 1987      78446174 
 1987      6100
 1988              	.LASF30:
 1989 032e 4D4F544F 		.ascii	"MOTOR_PutChar\000"
 1989      525F5075 
 1989      74436861 
 1989      7200
 1990              	.LASF0:
 1991 033c 7369676E 		.ascii	"signed char\000"
 1991      65642063 
 1991      68617200 
 1992              	.LASF54:
 1993 0348 4D4F544F 		.ascii	"MOTOR_IntClock_Stop\000"
 1993      525F496E 
 1993      74436C6F 
 1993      636B5F53 
 1993      746F7000 
 1994              	.LASF20:
 1995 035c 4D4F544F 		.ascii	"MOTOR_Stop\000"
 1995      525F5374 
 1995      6F7000
 1996              	.LASF37:
 1997 0367 73697A65 		.ascii	"size\000"
 1997      00
 1998              	.LASF23:
 1999 036c 4D4F544F 		.ascii	"MOTOR_SetTxInterruptMode\000"
 1999      525F5365 
 1999      74547849 
 1999      6E746572 
 1999      72757074 
 2000              	.LASF50:
 2001 0385 4D4F544F 		.ascii	"MOTOR_Init\000"
 2001      525F496E 
 2001      697400
 2002              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20150303 (release) [ARM/embedded-4_9-br
