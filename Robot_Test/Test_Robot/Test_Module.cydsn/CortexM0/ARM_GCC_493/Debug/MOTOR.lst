ARM GAS  C:\Users\HENRYA~1\AppData\Local\Temp\ccSeVATh.s 			page 1


   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 1
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"MOTOR.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.MOTOR_Init,"ax",%progbits
  18              		.align	2
  19              		.global	MOTOR_Init
  20              		.code	16
  21              		.thumb_func
  22              		.type	MOTOR_Init, %function
  23              	MOTOR_Init:
  24              	.LFB2:
  25              		.file 1 ".\\Generated_Source\\PSoC4\\MOTOR.c"
   1:.\Generated_Source\PSoC4/MOTOR.c **** /*******************************************************************************
   2:.\Generated_Source\PSoC4/MOTOR.c **** * File Name: MOTOR.c
   3:.\Generated_Source\PSoC4/MOTOR.c **** * Version 2.50
   4:.\Generated_Source\PSoC4/MOTOR.c **** *
   5:.\Generated_Source\PSoC4/MOTOR.c **** * Description:
   6:.\Generated_Source\PSoC4/MOTOR.c **** *  This file provides all API functionality of the UART component
   7:.\Generated_Source\PSoC4/MOTOR.c **** *
   8:.\Generated_Source\PSoC4/MOTOR.c **** * Note:
   9:.\Generated_Source\PSoC4/MOTOR.c **** *
  10:.\Generated_Source\PSoC4/MOTOR.c **** ********************************************************************************
  11:.\Generated_Source\PSoC4/MOTOR.c **** * Copyright 2008-2015, Cypress Semiconductor Corporation.  All rights reserved.
  12:.\Generated_Source\PSoC4/MOTOR.c **** * You may use this file only in accordance with the license, terms, conditions,
  13:.\Generated_Source\PSoC4/MOTOR.c **** * disclaimers, and limitations in the end user license agreement accompanying
  14:.\Generated_Source\PSoC4/MOTOR.c **** * the software package with which this file was provided.
  15:.\Generated_Source\PSoC4/MOTOR.c **** *******************************************************************************/
  16:.\Generated_Source\PSoC4/MOTOR.c **** 
  17:.\Generated_Source\PSoC4/MOTOR.c **** #include "MOTOR.h"
  18:.\Generated_Source\PSoC4/MOTOR.c **** #if (MOTOR_INTERNAL_CLOCK_USED)
  19:.\Generated_Source\PSoC4/MOTOR.c ****     #include "MOTOR_IntClock.h"
  20:.\Generated_Source\PSoC4/MOTOR.c **** #endif /* End MOTOR_INTERNAL_CLOCK_USED */
  21:.\Generated_Source\PSoC4/MOTOR.c **** 
  22:.\Generated_Source\PSoC4/MOTOR.c **** 
  23:.\Generated_Source\PSoC4/MOTOR.c **** /***************************************
  24:.\Generated_Source\PSoC4/MOTOR.c **** * Global data allocation
  25:.\Generated_Source\PSoC4/MOTOR.c **** ***************************************/
  26:.\Generated_Source\PSoC4/MOTOR.c **** 
  27:.\Generated_Source\PSoC4/MOTOR.c **** uint8 MOTOR_initVar = 0u;
  28:.\Generated_Source\PSoC4/MOTOR.c **** 
  29:.\Generated_Source\PSoC4/MOTOR.c **** #if (MOTOR_TX_INTERRUPT_ENABLED && MOTOR_TX_ENABLED)
  30:.\Generated_Source\PSoC4/MOTOR.c ****     volatile uint8 MOTOR_txBuffer[MOTOR_TX_BUFFER_SIZE];
  31:.\Generated_Source\PSoC4/MOTOR.c ****     volatile uint8 MOTOR_txBufferRead = 0u;
  32:.\Generated_Source\PSoC4/MOTOR.c ****     uint8 MOTOR_txBufferWrite = 0u;
ARM GAS  C:\Users\HENRYA~1\AppData\Local\Temp\ccSeVATh.s 			page 2


  33:.\Generated_Source\PSoC4/MOTOR.c **** #endif /* (MOTOR_TX_INTERRUPT_ENABLED && MOTOR_TX_ENABLED) */
  34:.\Generated_Source\PSoC4/MOTOR.c **** 
  35:.\Generated_Source\PSoC4/MOTOR.c **** #if (MOTOR_RX_INTERRUPT_ENABLED && (MOTOR_RX_ENABLED || MOTOR_HD_ENABLED))
  36:.\Generated_Source\PSoC4/MOTOR.c ****     uint8 MOTOR_errorStatus = 0u;
  37:.\Generated_Source\PSoC4/MOTOR.c ****     volatile uint8 MOTOR_rxBuffer[MOTOR_RX_BUFFER_SIZE];
  38:.\Generated_Source\PSoC4/MOTOR.c ****     volatile uint8 MOTOR_rxBufferRead  = 0u;
  39:.\Generated_Source\PSoC4/MOTOR.c ****     volatile uint8 MOTOR_rxBufferWrite = 0u;
  40:.\Generated_Source\PSoC4/MOTOR.c ****     volatile uint8 MOTOR_rxBufferLoopDetect = 0u;
  41:.\Generated_Source\PSoC4/MOTOR.c ****     volatile uint8 MOTOR_rxBufferOverflow   = 0u;
  42:.\Generated_Source\PSoC4/MOTOR.c ****     #if (MOTOR_RXHW_ADDRESS_ENABLED)
  43:.\Generated_Source\PSoC4/MOTOR.c ****         volatile uint8 MOTOR_rxAddressMode = MOTOR_RX_ADDRESS_MODE;
  44:.\Generated_Source\PSoC4/MOTOR.c ****         volatile uint8 MOTOR_rxAddressDetected = 0u;
  45:.\Generated_Source\PSoC4/MOTOR.c ****     #endif /* (MOTOR_RXHW_ADDRESS_ENABLED) */
  46:.\Generated_Source\PSoC4/MOTOR.c **** #endif /* (MOTOR_RX_INTERRUPT_ENABLED && (MOTOR_RX_ENABLED || MOTOR_HD_ENABLED)) */
  47:.\Generated_Source\PSoC4/MOTOR.c **** 
  48:.\Generated_Source\PSoC4/MOTOR.c **** 
  49:.\Generated_Source\PSoC4/MOTOR.c **** /*******************************************************************************
  50:.\Generated_Source\PSoC4/MOTOR.c **** * Function Name: MOTOR_Start
  51:.\Generated_Source\PSoC4/MOTOR.c **** ********************************************************************************
  52:.\Generated_Source\PSoC4/MOTOR.c **** *
  53:.\Generated_Source\PSoC4/MOTOR.c **** * Summary:
  54:.\Generated_Source\PSoC4/MOTOR.c **** *  This is the preferred method to begin component operation.
  55:.\Generated_Source\PSoC4/MOTOR.c **** *  MOTOR_Start() sets the initVar variable, calls the
  56:.\Generated_Source\PSoC4/MOTOR.c **** *  MOTOR_Init() function, and then calls the
  57:.\Generated_Source\PSoC4/MOTOR.c **** *  MOTOR_Enable() function.
  58:.\Generated_Source\PSoC4/MOTOR.c **** *
  59:.\Generated_Source\PSoC4/MOTOR.c **** * Parameters:
  60:.\Generated_Source\PSoC4/MOTOR.c **** *  None.
  61:.\Generated_Source\PSoC4/MOTOR.c **** *
  62:.\Generated_Source\PSoC4/MOTOR.c **** * Return:
  63:.\Generated_Source\PSoC4/MOTOR.c **** *  None.
  64:.\Generated_Source\PSoC4/MOTOR.c **** *
  65:.\Generated_Source\PSoC4/MOTOR.c **** * Global variables:
  66:.\Generated_Source\PSoC4/MOTOR.c **** *  The MOTOR_intiVar variable is used to indicate initial
  67:.\Generated_Source\PSoC4/MOTOR.c **** *  configuration of this component. The variable is initialized to zero (0u)
  68:.\Generated_Source\PSoC4/MOTOR.c **** *  and set to one (1u) the first time MOTOR_Start() is called. This
  69:.\Generated_Source\PSoC4/MOTOR.c **** *  allows for component initialization without re-initialization in all
  70:.\Generated_Source\PSoC4/MOTOR.c **** *  subsequent calls to the MOTOR_Start() routine.
  71:.\Generated_Source\PSoC4/MOTOR.c **** *
  72:.\Generated_Source\PSoC4/MOTOR.c **** * Reentrant:
  73:.\Generated_Source\PSoC4/MOTOR.c **** *  No.
  74:.\Generated_Source\PSoC4/MOTOR.c **** *
  75:.\Generated_Source\PSoC4/MOTOR.c **** *******************************************************************************/
  76:.\Generated_Source\PSoC4/MOTOR.c **** void MOTOR_Start(void) 
  77:.\Generated_Source\PSoC4/MOTOR.c **** {
  78:.\Generated_Source\PSoC4/MOTOR.c ****     /* If not initialized then initialize all required hardware and software */
  79:.\Generated_Source\PSoC4/MOTOR.c ****     if(MOTOR_initVar == 0u)
  80:.\Generated_Source\PSoC4/MOTOR.c ****     {
  81:.\Generated_Source\PSoC4/MOTOR.c ****         MOTOR_Init();
  82:.\Generated_Source\PSoC4/MOTOR.c ****         MOTOR_initVar = 1u;
  83:.\Generated_Source\PSoC4/MOTOR.c ****     }
  84:.\Generated_Source\PSoC4/MOTOR.c **** 
  85:.\Generated_Source\PSoC4/MOTOR.c ****     MOTOR_Enable();
  86:.\Generated_Source\PSoC4/MOTOR.c **** }
  87:.\Generated_Source\PSoC4/MOTOR.c **** 
  88:.\Generated_Source\PSoC4/MOTOR.c **** 
  89:.\Generated_Source\PSoC4/MOTOR.c **** /*******************************************************************************
ARM GAS  C:\Users\HENRYA~1\AppData\Local\Temp\ccSeVATh.s 			page 3


  90:.\Generated_Source\PSoC4/MOTOR.c **** * Function Name: MOTOR_Init
  91:.\Generated_Source\PSoC4/MOTOR.c **** ********************************************************************************
  92:.\Generated_Source\PSoC4/MOTOR.c **** *
  93:.\Generated_Source\PSoC4/MOTOR.c **** * Summary:
  94:.\Generated_Source\PSoC4/MOTOR.c **** *  Initializes or restores the component according to the customizer Configure
  95:.\Generated_Source\PSoC4/MOTOR.c **** *  dialog settings. It is not necessary to call MOTOR_Init() because
  96:.\Generated_Source\PSoC4/MOTOR.c **** *  the MOTOR_Start() API calls this function and is the preferred
  97:.\Generated_Source\PSoC4/MOTOR.c **** *  method to begin component operation.
  98:.\Generated_Source\PSoC4/MOTOR.c **** *
  99:.\Generated_Source\PSoC4/MOTOR.c **** * Parameters:
 100:.\Generated_Source\PSoC4/MOTOR.c **** *  None.
 101:.\Generated_Source\PSoC4/MOTOR.c **** *
 102:.\Generated_Source\PSoC4/MOTOR.c **** * Return:
 103:.\Generated_Source\PSoC4/MOTOR.c **** *  None.
 104:.\Generated_Source\PSoC4/MOTOR.c **** *
 105:.\Generated_Source\PSoC4/MOTOR.c **** *******************************************************************************/
 106:.\Generated_Source\PSoC4/MOTOR.c **** void MOTOR_Init(void) 
 107:.\Generated_Source\PSoC4/MOTOR.c **** {
  26              		.loc 1 107 0
  27              		.cfi_startproc
 108:.\Generated_Source\PSoC4/MOTOR.c ****     #if(MOTOR_RX_ENABLED || MOTOR_HD_ENABLED)
 109:.\Generated_Source\PSoC4/MOTOR.c **** 
 110:.\Generated_Source\PSoC4/MOTOR.c ****         #if (MOTOR_RX_INTERRUPT_ENABLED)
 111:.\Generated_Source\PSoC4/MOTOR.c ****             /* Set RX interrupt vector and priority */
 112:.\Generated_Source\PSoC4/MOTOR.c ****             (void) CyIntSetVector(MOTOR_RX_VECT_NUM, &MOTOR_RXISR);
 113:.\Generated_Source\PSoC4/MOTOR.c ****             CyIntSetPriority(MOTOR_RX_VECT_NUM, MOTOR_RX_PRIOR_NUM);
 114:.\Generated_Source\PSoC4/MOTOR.c ****             MOTOR_errorStatus = 0u;
 115:.\Generated_Source\PSoC4/MOTOR.c ****         #endif /* (MOTOR_RX_INTERRUPT_ENABLED) */
 116:.\Generated_Source\PSoC4/MOTOR.c **** 
 117:.\Generated_Source\PSoC4/MOTOR.c ****         #if (MOTOR_RXHW_ADDRESS_ENABLED)
 118:.\Generated_Source\PSoC4/MOTOR.c ****             MOTOR_SetRxAddressMode(MOTOR_RX_ADDRESS_MODE);
 119:.\Generated_Source\PSoC4/MOTOR.c ****             MOTOR_SetRxAddress1(MOTOR_RX_HW_ADDRESS1);
 120:.\Generated_Source\PSoC4/MOTOR.c ****             MOTOR_SetRxAddress2(MOTOR_RX_HW_ADDRESS2);
 121:.\Generated_Source\PSoC4/MOTOR.c ****         #endif /* End MOTOR_RXHW_ADDRESS_ENABLED */
 122:.\Generated_Source\PSoC4/MOTOR.c **** 
 123:.\Generated_Source\PSoC4/MOTOR.c ****         /* Init Count7 period */
 124:.\Generated_Source\PSoC4/MOTOR.c ****         MOTOR_RXBITCTR_PERIOD_REG = MOTOR_RXBITCTR_INIT;
  28              		.loc 1 124 0
  29 0000 7222     		mov	r2, #114
  30 0002 074B     		ldr	r3, .L2
  31 0004 1A70     		strb	r2, [r3]
 125:.\Generated_Source\PSoC4/MOTOR.c ****         /* Configure the Initial RX interrupt mask */
 126:.\Generated_Source\PSoC4/MOTOR.c ****         MOTOR_RXSTATUS_MASK_REG  = MOTOR_INIT_RX_INTERRUPTS_MASK;
  32              		.loc 1 126 0
  33 0006 523A     		sub	r2, r2, #82
  34 0008 064B     		ldr	r3, .L2+4
  35 000a 1A70     		strb	r2, [r3]
 127:.\Generated_Source\PSoC4/MOTOR.c ****     #endif /* End MOTOR_RX_ENABLED || MOTOR_HD_ENABLED*/
 128:.\Generated_Source\PSoC4/MOTOR.c **** 
 129:.\Generated_Source\PSoC4/MOTOR.c ****     #if(MOTOR_TX_ENABLED)
 130:.\Generated_Source\PSoC4/MOTOR.c ****         #if (MOTOR_TX_INTERRUPT_ENABLED)
 131:.\Generated_Source\PSoC4/MOTOR.c ****             /* Set TX interrupt vector and priority */
 132:.\Generated_Source\PSoC4/MOTOR.c ****             (void) CyIntSetVector(MOTOR_TX_VECT_NUM, &MOTOR_TXISR);
 133:.\Generated_Source\PSoC4/MOTOR.c ****             CyIntSetPriority(MOTOR_TX_VECT_NUM, MOTOR_TX_PRIOR_NUM);
 134:.\Generated_Source\PSoC4/MOTOR.c ****         #endif /* (MOTOR_TX_INTERRUPT_ENABLED) */
 135:.\Generated_Source\PSoC4/MOTOR.c **** 
 136:.\Generated_Source\PSoC4/MOTOR.c ****         /* Write Counter Value for TX Bit Clk Generator*/
ARM GAS  C:\Users\HENRYA~1\AppData\Local\Temp\ccSeVATh.s 			page 4


 137:.\Generated_Source\PSoC4/MOTOR.c ****         #if (MOTOR_TXCLKGEN_DP)
 138:.\Generated_Source\PSoC4/MOTOR.c ****             MOTOR_TXBITCLKGEN_CTR_REG = MOTOR_BIT_CENTER;
  36              		.loc 1 138 0
  37 000c 1A3A     		sub	r2, r2, #26
  38 000e 064B     		ldr	r3, .L2+8
  39 0010 1A70     		strb	r2, [r3]
 139:.\Generated_Source\PSoC4/MOTOR.c ****             MOTOR_TXBITCLKTX_COMPLETE_REG = ((MOTOR_NUMBER_OF_DATA_BITS +
  40              		.loc 1 139 0
  41 0012 4132     		add	r2, r2, #65
  42 0014 054B     		ldr	r3, .L2+12
  43 0016 1A70     		strb	r2, [r3]
 140:.\Generated_Source\PSoC4/MOTOR.c ****                         MOTOR_NUMBER_OF_START_BIT) * MOTOR_OVER_SAMPLE_COUNT) - 1u;
 141:.\Generated_Source\PSoC4/MOTOR.c ****         #else
 142:.\Generated_Source\PSoC4/MOTOR.c ****             MOTOR_TXBITCTR_PERIOD_REG = ((MOTOR_NUMBER_OF_DATA_BITS +
 143:.\Generated_Source\PSoC4/MOTOR.c ****                         MOTOR_NUMBER_OF_START_BIT) * MOTOR_OVER_SAMPLE_8) - 1u;
 144:.\Generated_Source\PSoC4/MOTOR.c ****         #endif /* End MOTOR_TXCLKGEN_DP */
 145:.\Generated_Source\PSoC4/MOTOR.c **** 
 146:.\Generated_Source\PSoC4/MOTOR.c ****         /* Configure the Initial TX interrupt mask */
 147:.\Generated_Source\PSoC4/MOTOR.c ****         #if (MOTOR_TX_INTERRUPT_ENABLED)
 148:.\Generated_Source\PSoC4/MOTOR.c ****             MOTOR_TXSTATUS_MASK_REG = MOTOR_TX_STS_FIFO_EMPTY;
 149:.\Generated_Source\PSoC4/MOTOR.c ****         #else
 150:.\Generated_Source\PSoC4/MOTOR.c ****             MOTOR_TXSTATUS_MASK_REG = MOTOR_INIT_TX_INTERRUPTS_MASK;
  44              		.loc 1 150 0
  45 0018 0022     		mov	r2, #0
  46 001a 054B     		ldr	r3, .L2+16
  47 001c 1A70     		strb	r2, [r3]
 151:.\Generated_Source\PSoC4/MOTOR.c ****         #endif /*End MOTOR_TX_INTERRUPT_ENABLED*/
 152:.\Generated_Source\PSoC4/MOTOR.c **** 
 153:.\Generated_Source\PSoC4/MOTOR.c ****     #endif /* End MOTOR_TX_ENABLED */
 154:.\Generated_Source\PSoC4/MOTOR.c **** 
 155:.\Generated_Source\PSoC4/MOTOR.c ****     #if(MOTOR_PARITY_TYPE_SW)  /* Write Parity to Control Register */
 156:.\Generated_Source\PSoC4/MOTOR.c ****         MOTOR_WriteControlRegister( \
 157:.\Generated_Source\PSoC4/MOTOR.c ****             (MOTOR_ReadControlRegister() & (uint8)~MOTOR_CTRL_PARITY_TYPE_MASK) | \
 158:.\Generated_Source\PSoC4/MOTOR.c ****             (uint8)(MOTOR_PARITY_TYPE << MOTOR_CTRL_PARITY_TYPE0_SHIFT) );
 159:.\Generated_Source\PSoC4/MOTOR.c ****     #endif /* End MOTOR_PARITY_TYPE_SW */
 160:.\Generated_Source\PSoC4/MOTOR.c **** }
  48              		.loc 1 160 0
  49              		@ sp needed
  50 001e 7047     		bx	lr
  51              	.L3:
  52              		.align	2
  53              	.L2:
  54 0020 81000F40 		.word	1074724993
  55 0024 80000F40 		.word	1074724992
  56 0028 23000F40 		.word	1074724899
  57 002c 33000F40 		.word	1074724915
  58 0030 82000F40 		.word	1074724994
  59              		.cfi_endproc
  60              	.LFE2:
  61              		.size	MOTOR_Init, .-MOTOR_Init
  62              		.section	.text.MOTOR_Enable,"ax",%progbits
  63              		.align	2
  64              		.global	MOTOR_Enable
  65              		.code	16
  66              		.thumb_func
  67              		.type	MOTOR_Enable, %function
  68              	MOTOR_Enable:
ARM GAS  C:\Users\HENRYA~1\AppData\Local\Temp\ccSeVATh.s 			page 5


  69              	.LFB3:
 161:.\Generated_Source\PSoC4/MOTOR.c **** 
 162:.\Generated_Source\PSoC4/MOTOR.c **** 
 163:.\Generated_Source\PSoC4/MOTOR.c **** /*******************************************************************************
 164:.\Generated_Source\PSoC4/MOTOR.c **** * Function Name: MOTOR_Enable
 165:.\Generated_Source\PSoC4/MOTOR.c **** ********************************************************************************
 166:.\Generated_Source\PSoC4/MOTOR.c **** *
 167:.\Generated_Source\PSoC4/MOTOR.c **** * Summary:
 168:.\Generated_Source\PSoC4/MOTOR.c **** *  Activates the hardware and begins component operation. It is not necessary
 169:.\Generated_Source\PSoC4/MOTOR.c **** *  to call MOTOR_Enable() because the MOTOR_Start() API
 170:.\Generated_Source\PSoC4/MOTOR.c **** *  calls this function, which is the preferred method to begin component
 171:.\Generated_Source\PSoC4/MOTOR.c **** *  operation.
 172:.\Generated_Source\PSoC4/MOTOR.c **** 
 173:.\Generated_Source\PSoC4/MOTOR.c **** * Parameters:
 174:.\Generated_Source\PSoC4/MOTOR.c **** *  None.
 175:.\Generated_Source\PSoC4/MOTOR.c **** *
 176:.\Generated_Source\PSoC4/MOTOR.c **** * Return:
 177:.\Generated_Source\PSoC4/MOTOR.c **** *  None.
 178:.\Generated_Source\PSoC4/MOTOR.c **** *
 179:.\Generated_Source\PSoC4/MOTOR.c **** * Global Variables:
 180:.\Generated_Source\PSoC4/MOTOR.c **** *  MOTOR_rxAddressDetected - set to initial state (0).
 181:.\Generated_Source\PSoC4/MOTOR.c **** *
 182:.\Generated_Source\PSoC4/MOTOR.c **** *******************************************************************************/
 183:.\Generated_Source\PSoC4/MOTOR.c **** void MOTOR_Enable(void) 
 184:.\Generated_Source\PSoC4/MOTOR.c **** {
  70              		.loc 1 184 0
  71              		.cfi_startproc
  72 0000 10B5     		push	{r4, lr}
  73              		.cfi_def_cfa_offset 8
  74              		.cfi_offset 4, -8
  75              		.cfi_offset 14, -4
 185:.\Generated_Source\PSoC4/MOTOR.c ****     uint8 enableInterrupts;
 186:.\Generated_Source\PSoC4/MOTOR.c ****     enableInterrupts = CyEnterCriticalSection();
  76              		.loc 1 186 0
  77 0002 FFF7FEFF 		bl	CyEnterCriticalSection
  78              	.LVL0:
  79 0006 041C     		mov	r4, r0
  80              	.LVL1:
 187:.\Generated_Source\PSoC4/MOTOR.c **** 
 188:.\Generated_Source\PSoC4/MOTOR.c ****     #if (MOTOR_RX_ENABLED || MOTOR_HD_ENABLED)
 189:.\Generated_Source\PSoC4/MOTOR.c ****         /* RX Counter (Count7) Enable */
 190:.\Generated_Source\PSoC4/MOTOR.c ****         MOTOR_RXBITCTR_CONTROL_REG |= MOTOR_CNTR_ENABLE;
  81              		.loc 1 190 0
  82 0008 0B4A     		ldr	r2, .L5
  83 000a 1178     		ldrb	r1, [r2]
  84 000c 2023     		mov	r3, #32
  85 000e 0B43     		orr	r3, r1
  86 0010 1370     		strb	r3, [r2]
 191:.\Generated_Source\PSoC4/MOTOR.c **** 
 192:.\Generated_Source\PSoC4/MOTOR.c ****         /* Enable the RX Interrupt */
 193:.\Generated_Source\PSoC4/MOTOR.c ****         MOTOR_RXSTATUS_ACTL_REG  |= MOTOR_INT_ENABLE;
  87              		.loc 1 193 0
  88 0012 0A49     		ldr	r1, .L5+4
  89 0014 0A78     		ldrb	r2, [r1]
  90 0016 1023     		mov	r3, #16
  91 0018 1A43     		orr	r2, r3
  92 001a D2B2     		uxtb	r2, r2
ARM GAS  C:\Users\HENRYA~1\AppData\Local\Temp\ccSeVATh.s 			page 6


  93 001c 0A70     		strb	r2, [r1]
 194:.\Generated_Source\PSoC4/MOTOR.c **** 
 195:.\Generated_Source\PSoC4/MOTOR.c ****         #if (MOTOR_RX_INTERRUPT_ENABLED)
 196:.\Generated_Source\PSoC4/MOTOR.c ****             MOTOR_EnableRxInt();
 197:.\Generated_Source\PSoC4/MOTOR.c **** 
 198:.\Generated_Source\PSoC4/MOTOR.c ****             #if (MOTOR_RXHW_ADDRESS_ENABLED)
 199:.\Generated_Source\PSoC4/MOTOR.c ****                 MOTOR_rxAddressDetected = 0u;
 200:.\Generated_Source\PSoC4/MOTOR.c ****             #endif /* (MOTOR_RXHW_ADDRESS_ENABLED) */
 201:.\Generated_Source\PSoC4/MOTOR.c ****         #endif /* (MOTOR_RX_INTERRUPT_ENABLED) */
 202:.\Generated_Source\PSoC4/MOTOR.c ****     #endif /* (MOTOR_RX_ENABLED || MOTOR_HD_ENABLED) */
 203:.\Generated_Source\PSoC4/MOTOR.c **** 
 204:.\Generated_Source\PSoC4/MOTOR.c ****     #if(MOTOR_TX_ENABLED)
 205:.\Generated_Source\PSoC4/MOTOR.c ****         /* TX Counter (DP/Count7) Enable */
 206:.\Generated_Source\PSoC4/MOTOR.c ****         #if(!MOTOR_TXCLKGEN_DP)
 207:.\Generated_Source\PSoC4/MOTOR.c ****             MOTOR_TXBITCTR_CONTROL_REG |= MOTOR_CNTR_ENABLE;
 208:.\Generated_Source\PSoC4/MOTOR.c ****         #endif /* End MOTOR_TXCLKGEN_DP */
 209:.\Generated_Source\PSoC4/MOTOR.c **** 
 210:.\Generated_Source\PSoC4/MOTOR.c ****         /* Enable the TX Interrupt */
 211:.\Generated_Source\PSoC4/MOTOR.c ****         MOTOR_TXSTATUS_ACTL_REG |= MOTOR_INT_ENABLE;
  94              		.loc 1 211 0
  95 001e 084A     		ldr	r2, .L5+8
  96 0020 1178     		ldrb	r1, [r2]
  97 0022 0B43     		orr	r3, r1
  98 0024 DBB2     		uxtb	r3, r3
  99 0026 1370     		strb	r3, [r2]
 212:.\Generated_Source\PSoC4/MOTOR.c ****         #if (MOTOR_TX_INTERRUPT_ENABLED)
 213:.\Generated_Source\PSoC4/MOTOR.c ****             MOTOR_ClearPendingTxInt(); /* Clear history of TX_NOT_EMPTY */
 214:.\Generated_Source\PSoC4/MOTOR.c ****             MOTOR_EnableTxInt();
 215:.\Generated_Source\PSoC4/MOTOR.c ****         #endif /* (MOTOR_TX_INTERRUPT_ENABLED) */
 216:.\Generated_Source\PSoC4/MOTOR.c ****      #endif /* (MOTOR_TX_INTERRUPT_ENABLED) */
 217:.\Generated_Source\PSoC4/MOTOR.c **** 
 218:.\Generated_Source\PSoC4/MOTOR.c ****     #if (MOTOR_INTERNAL_CLOCK_USED)
 219:.\Generated_Source\PSoC4/MOTOR.c ****         MOTOR_IntClock_Start();  /* Enable the clock */
 100              		.loc 1 219 0
 101 0028 FF20     		mov	r0, #255
 102 002a FFF7FEFF 		bl	MOTOR_IntClock_StartEx
 103              	.LVL2:
 220:.\Generated_Source\PSoC4/MOTOR.c ****     #endif /* (MOTOR_INTERNAL_CLOCK_USED) */
 221:.\Generated_Source\PSoC4/MOTOR.c **** 
 222:.\Generated_Source\PSoC4/MOTOR.c ****     CyExitCriticalSection(enableInterrupts);
 104              		.loc 1 222 0
 105 002e 201C     		mov	r0, r4
 106 0030 FFF7FEFF 		bl	CyExitCriticalSection
 107              	.LVL3:
 223:.\Generated_Source\PSoC4/MOTOR.c **** }
 108              		.loc 1 223 0
 109              		@ sp needed
 110              	.LVL4:
 111 0034 10BD     		pop	{r4, pc}
 112              	.L6:
 113 0036 C046     		.align	2
 114              	.L5:
 115 0038 91000F40 		.word	1074725009
 116 003c 90000F40 		.word	1074725008
 117 0040 92000F40 		.word	1074725010
 118              		.cfi_endproc
 119              	.LFE3:
ARM GAS  C:\Users\HENRYA~1\AppData\Local\Temp\ccSeVATh.s 			page 7


 120              		.size	MOTOR_Enable, .-MOTOR_Enable
 121              		.section	.text.MOTOR_Start,"ax",%progbits
 122              		.align	2
 123              		.global	MOTOR_Start
 124              		.code	16
 125              		.thumb_func
 126              		.type	MOTOR_Start, %function
 127              	MOTOR_Start:
 128              	.LFB1:
  77:.\Generated_Source\PSoC4/MOTOR.c ****     /* If not initialized then initialize all required hardware and software */
 129              		.loc 1 77 0
 130              		.cfi_startproc
 131 0000 08B5     		push	{r3, lr}
 132              		.cfi_def_cfa_offset 8
 133              		.cfi_offset 3, -8
 134              		.cfi_offset 14, -4
  79:.\Generated_Source\PSoC4/MOTOR.c ****     {
 135              		.loc 1 79 0
 136 0002 064B     		ldr	r3, .L9
 137 0004 1B78     		ldrb	r3, [r3]
 138 0006 002B     		cmp	r3, #0
 139 0008 04D1     		bne	.L8
  81:.\Generated_Source\PSoC4/MOTOR.c ****         MOTOR_initVar = 1u;
 140              		.loc 1 81 0
 141 000a FFF7FEFF 		bl	MOTOR_Init
 142              	.LVL5:
  82:.\Generated_Source\PSoC4/MOTOR.c ****     }
 143              		.loc 1 82 0
 144 000e 0122     		mov	r2, #1
 145 0010 024B     		ldr	r3, .L9
 146 0012 1A70     		strb	r2, [r3]
 147              	.L8:
  85:.\Generated_Source\PSoC4/MOTOR.c **** }
 148              		.loc 1 85 0
 149 0014 FFF7FEFF 		bl	MOTOR_Enable
 150              	.LVL6:
  86:.\Generated_Source\PSoC4/MOTOR.c **** 
 151              		.loc 1 86 0
 152              		@ sp needed
 153 0018 08BD     		pop	{r3, pc}
 154              	.L10:
 155 001a C046     		.align	2
 156              	.L9:
 157 001c 00000000 		.word	.LANCHOR0
 158              		.cfi_endproc
 159              	.LFE1:
 160              		.size	MOTOR_Start, .-MOTOR_Start
 161              		.section	.text.MOTOR_Stop,"ax",%progbits
 162              		.align	2
 163              		.global	MOTOR_Stop
 164              		.code	16
 165              		.thumb_func
 166              		.type	MOTOR_Stop, %function
 167              	MOTOR_Stop:
 168              	.LFB4:
 224:.\Generated_Source\PSoC4/MOTOR.c **** 
 225:.\Generated_Source\PSoC4/MOTOR.c **** 
ARM GAS  C:\Users\HENRYA~1\AppData\Local\Temp\ccSeVATh.s 			page 8


 226:.\Generated_Source\PSoC4/MOTOR.c **** /*******************************************************************************
 227:.\Generated_Source\PSoC4/MOTOR.c **** * Function Name: MOTOR_Stop
 228:.\Generated_Source\PSoC4/MOTOR.c **** ********************************************************************************
 229:.\Generated_Source\PSoC4/MOTOR.c **** *
 230:.\Generated_Source\PSoC4/MOTOR.c **** * Summary:
 231:.\Generated_Source\PSoC4/MOTOR.c **** *  Disables the UART operation.
 232:.\Generated_Source\PSoC4/MOTOR.c **** *
 233:.\Generated_Source\PSoC4/MOTOR.c **** * Parameters:
 234:.\Generated_Source\PSoC4/MOTOR.c **** *  None.
 235:.\Generated_Source\PSoC4/MOTOR.c **** *
 236:.\Generated_Source\PSoC4/MOTOR.c **** * Return:
 237:.\Generated_Source\PSoC4/MOTOR.c **** *  None.
 238:.\Generated_Source\PSoC4/MOTOR.c **** *
 239:.\Generated_Source\PSoC4/MOTOR.c **** *******************************************************************************/
 240:.\Generated_Source\PSoC4/MOTOR.c **** void MOTOR_Stop(void) 
 241:.\Generated_Source\PSoC4/MOTOR.c **** {
 169              		.loc 1 241 0
 170              		.cfi_startproc
 171 0000 10B5     		push	{r4, lr}
 172              		.cfi_def_cfa_offset 8
 173              		.cfi_offset 4, -8
 174              		.cfi_offset 14, -4
 242:.\Generated_Source\PSoC4/MOTOR.c ****     uint8 enableInterrupts;
 243:.\Generated_Source\PSoC4/MOTOR.c ****     enableInterrupts = CyEnterCriticalSection();
 175              		.loc 1 243 0
 176 0002 FFF7FEFF 		bl	CyEnterCriticalSection
 177              	.LVL7:
 178 0006 041C     		mov	r4, r0
 179              	.LVL8:
 244:.\Generated_Source\PSoC4/MOTOR.c **** 
 245:.\Generated_Source\PSoC4/MOTOR.c ****     /* Write Bit Counter Disable */
 246:.\Generated_Source\PSoC4/MOTOR.c ****     #if (MOTOR_RX_ENABLED || MOTOR_HD_ENABLED)
 247:.\Generated_Source\PSoC4/MOTOR.c ****         MOTOR_RXBITCTR_CONTROL_REG &= (uint8) ~MOTOR_CNTR_ENABLE;
 180              		.loc 1 247 0
 181 0008 094A     		ldr	r2, .L12
 182 000a 1378     		ldrb	r3, [r2]
 183 000c 2021     		mov	r1, #32
 184 000e 8B43     		bic	r3, r1
 185 0010 1370     		strb	r3, [r2]
 248:.\Generated_Source\PSoC4/MOTOR.c ****     #endif /* (MOTOR_RX_ENABLED || MOTOR_HD_ENABLED) */
 249:.\Generated_Source\PSoC4/MOTOR.c **** 
 250:.\Generated_Source\PSoC4/MOTOR.c ****     #if (MOTOR_TX_ENABLED)
 251:.\Generated_Source\PSoC4/MOTOR.c ****         #if(!MOTOR_TXCLKGEN_DP)
 252:.\Generated_Source\PSoC4/MOTOR.c ****             MOTOR_TXBITCTR_CONTROL_REG &= (uint8) ~MOTOR_CNTR_ENABLE;
 253:.\Generated_Source\PSoC4/MOTOR.c ****         #endif /* (!MOTOR_TXCLKGEN_DP) */
 254:.\Generated_Source\PSoC4/MOTOR.c ****     #endif /* (MOTOR_TX_ENABLED) */
 255:.\Generated_Source\PSoC4/MOTOR.c **** 
 256:.\Generated_Source\PSoC4/MOTOR.c ****     #if (MOTOR_INTERNAL_CLOCK_USED)
 257:.\Generated_Source\PSoC4/MOTOR.c ****         MOTOR_IntClock_Stop();   /* Disable the clock */
 186              		.loc 1 257 0
 187 0012 FFF7FEFF 		bl	MOTOR_IntClock_Stop
 188              	.LVL9:
 258:.\Generated_Source\PSoC4/MOTOR.c ****     #endif /* (MOTOR_INTERNAL_CLOCK_USED) */
 259:.\Generated_Source\PSoC4/MOTOR.c **** 
 260:.\Generated_Source\PSoC4/MOTOR.c ****     /* Disable internal interrupt component */
 261:.\Generated_Source\PSoC4/MOTOR.c ****     #if (MOTOR_RX_ENABLED || MOTOR_HD_ENABLED)
 262:.\Generated_Source\PSoC4/MOTOR.c ****         MOTOR_RXSTATUS_ACTL_REG  &= (uint8) ~MOTOR_INT_ENABLE;
ARM GAS  C:\Users\HENRYA~1\AppData\Local\Temp\ccSeVATh.s 			page 9


 189              		.loc 1 262 0
 190 0016 074A     		ldr	r2, .L12+4
 191 0018 1378     		ldrb	r3, [r2]
 192 001a 1021     		mov	r1, #16
 193 001c 8B43     		bic	r3, r1
 194 001e 1370     		strb	r3, [r2]
 263:.\Generated_Source\PSoC4/MOTOR.c **** 
 264:.\Generated_Source\PSoC4/MOTOR.c ****         #if (MOTOR_RX_INTERRUPT_ENABLED)
 265:.\Generated_Source\PSoC4/MOTOR.c ****             MOTOR_DisableRxInt();
 266:.\Generated_Source\PSoC4/MOTOR.c ****         #endif /* (MOTOR_RX_INTERRUPT_ENABLED) */
 267:.\Generated_Source\PSoC4/MOTOR.c ****     #endif /* (MOTOR_RX_ENABLED || MOTOR_HD_ENABLED) */
 268:.\Generated_Source\PSoC4/MOTOR.c **** 
 269:.\Generated_Source\PSoC4/MOTOR.c ****     #if (MOTOR_TX_ENABLED)
 270:.\Generated_Source\PSoC4/MOTOR.c ****         MOTOR_TXSTATUS_ACTL_REG &= (uint8) ~MOTOR_INT_ENABLE;
 195              		.loc 1 270 0
 196 0020 054A     		ldr	r2, .L12+8
 197 0022 1378     		ldrb	r3, [r2]
 198 0024 8B43     		bic	r3, r1
 199 0026 1370     		strb	r3, [r2]
 271:.\Generated_Source\PSoC4/MOTOR.c **** 
 272:.\Generated_Source\PSoC4/MOTOR.c ****         #if (MOTOR_TX_INTERRUPT_ENABLED)
 273:.\Generated_Source\PSoC4/MOTOR.c ****             MOTOR_DisableTxInt();
 274:.\Generated_Source\PSoC4/MOTOR.c ****         #endif /* (MOTOR_TX_INTERRUPT_ENABLED) */
 275:.\Generated_Source\PSoC4/MOTOR.c ****     #endif /* (MOTOR_TX_ENABLED) */
 276:.\Generated_Source\PSoC4/MOTOR.c **** 
 277:.\Generated_Source\PSoC4/MOTOR.c ****     CyExitCriticalSection(enableInterrupts);
 200              		.loc 1 277 0
 201 0028 201C     		mov	r0, r4
 202 002a FFF7FEFF 		bl	CyExitCriticalSection
 203              	.LVL10:
 278:.\Generated_Source\PSoC4/MOTOR.c **** }
 204              		.loc 1 278 0
 205              		@ sp needed
 206              	.LVL11:
 207 002e 10BD     		pop	{r4, pc}
 208              	.L13:
 209              		.align	2
 210              	.L12:
 211 0030 91000F40 		.word	1074725009
 212 0034 90000F40 		.word	1074725008
 213 0038 92000F40 		.word	1074725010
 214              		.cfi_endproc
 215              	.LFE4:
 216              		.size	MOTOR_Stop, .-MOTOR_Stop
 217              		.section	.text.MOTOR_ReadControlRegister,"ax",%progbits
 218              		.align	2
 219              		.global	MOTOR_ReadControlRegister
 220              		.code	16
 221              		.thumb_func
 222              		.type	MOTOR_ReadControlRegister, %function
 223              	MOTOR_ReadControlRegister:
 224              	.LFB5:
 279:.\Generated_Source\PSoC4/MOTOR.c **** 
 280:.\Generated_Source\PSoC4/MOTOR.c **** 
 281:.\Generated_Source\PSoC4/MOTOR.c **** /*******************************************************************************
 282:.\Generated_Source\PSoC4/MOTOR.c **** * Function Name: MOTOR_ReadControlRegister
 283:.\Generated_Source\PSoC4/MOTOR.c **** ********************************************************************************
ARM GAS  C:\Users\HENRYA~1\AppData\Local\Temp\ccSeVATh.s 			page 10


 284:.\Generated_Source\PSoC4/MOTOR.c **** *
 285:.\Generated_Source\PSoC4/MOTOR.c **** * Summary:
 286:.\Generated_Source\PSoC4/MOTOR.c **** *  Returns the current value of the control register.
 287:.\Generated_Source\PSoC4/MOTOR.c **** *
 288:.\Generated_Source\PSoC4/MOTOR.c **** * Parameters:
 289:.\Generated_Source\PSoC4/MOTOR.c **** *  None.
 290:.\Generated_Source\PSoC4/MOTOR.c **** *
 291:.\Generated_Source\PSoC4/MOTOR.c **** * Return:
 292:.\Generated_Source\PSoC4/MOTOR.c **** *  Contents of the control register.
 293:.\Generated_Source\PSoC4/MOTOR.c **** *
 294:.\Generated_Source\PSoC4/MOTOR.c **** *******************************************************************************/
 295:.\Generated_Source\PSoC4/MOTOR.c **** uint8 MOTOR_ReadControlRegister(void) 
 296:.\Generated_Source\PSoC4/MOTOR.c **** {
 225              		.loc 1 296 0
 226              		.cfi_startproc
 297:.\Generated_Source\PSoC4/MOTOR.c ****     #if (MOTOR_CONTROL_REG_REMOVED)
 298:.\Generated_Source\PSoC4/MOTOR.c ****         return(0u);
 299:.\Generated_Source\PSoC4/MOTOR.c ****     #else
 300:.\Generated_Source\PSoC4/MOTOR.c ****         return(MOTOR_CONTROL_REG);
 301:.\Generated_Source\PSoC4/MOTOR.c ****     #endif /* (MOTOR_CONTROL_REG_REMOVED) */
 302:.\Generated_Source\PSoC4/MOTOR.c **** }
 227              		.loc 1 302 0
 228 0000 0020     		mov	r0, #0
 229              		@ sp needed
 230 0002 7047     		bx	lr
 231              		.cfi_endproc
 232              	.LFE5:
 233              		.size	MOTOR_ReadControlRegister, .-MOTOR_ReadControlRegister
 234              		.section	.text.MOTOR_WriteControlRegister,"ax",%progbits
 235              		.align	2
 236              		.global	MOTOR_WriteControlRegister
 237              		.code	16
 238              		.thumb_func
 239              		.type	MOTOR_WriteControlRegister, %function
 240              	MOTOR_WriteControlRegister:
 241              	.LFB6:
 303:.\Generated_Source\PSoC4/MOTOR.c **** 
 304:.\Generated_Source\PSoC4/MOTOR.c **** 
 305:.\Generated_Source\PSoC4/MOTOR.c **** /*******************************************************************************
 306:.\Generated_Source\PSoC4/MOTOR.c **** * Function Name: MOTOR_WriteControlRegister
 307:.\Generated_Source\PSoC4/MOTOR.c **** ********************************************************************************
 308:.\Generated_Source\PSoC4/MOTOR.c **** *
 309:.\Generated_Source\PSoC4/MOTOR.c **** * Summary:
 310:.\Generated_Source\PSoC4/MOTOR.c **** *  Writes an 8-bit value into the control register
 311:.\Generated_Source\PSoC4/MOTOR.c **** *
 312:.\Generated_Source\PSoC4/MOTOR.c **** * Parameters:
 313:.\Generated_Source\PSoC4/MOTOR.c **** *  control:  control register value
 314:.\Generated_Source\PSoC4/MOTOR.c **** *
 315:.\Generated_Source\PSoC4/MOTOR.c **** * Return:
 316:.\Generated_Source\PSoC4/MOTOR.c **** *  None.
 317:.\Generated_Source\PSoC4/MOTOR.c **** *
 318:.\Generated_Source\PSoC4/MOTOR.c **** *******************************************************************************/
 319:.\Generated_Source\PSoC4/MOTOR.c **** void  MOTOR_WriteControlRegister(uint8 control) 
 320:.\Generated_Source\PSoC4/MOTOR.c **** {
 242              		.loc 1 320 0
 243              		.cfi_startproc
 244              	.LVL12:
ARM GAS  C:\Users\HENRYA~1\AppData\Local\Temp\ccSeVATh.s 			page 11


 321:.\Generated_Source\PSoC4/MOTOR.c ****     #if (MOTOR_CONTROL_REG_REMOVED)
 322:.\Generated_Source\PSoC4/MOTOR.c ****         if(0u != control)
 323:.\Generated_Source\PSoC4/MOTOR.c ****         {
 324:.\Generated_Source\PSoC4/MOTOR.c ****             /* Suppress compiler warning */
 325:.\Generated_Source\PSoC4/MOTOR.c ****         }
 326:.\Generated_Source\PSoC4/MOTOR.c ****     #else
 327:.\Generated_Source\PSoC4/MOTOR.c ****        MOTOR_CONTROL_REG = control;
 328:.\Generated_Source\PSoC4/MOTOR.c ****     #endif /* (MOTOR_CONTROL_REG_REMOVED) */
 329:.\Generated_Source\PSoC4/MOTOR.c **** }
 245              		.loc 1 329 0
 246              		@ sp needed
 247 0000 7047     		bx	lr
 248              		.cfi_endproc
 249              	.LFE6:
 250              		.size	MOTOR_WriteControlRegister, .-MOTOR_WriteControlRegister
 251 0002 C046     		.section	.text.MOTOR_SetRxInterruptMode,"ax",%progbits
 252              		.align	2
 253              		.global	MOTOR_SetRxInterruptMode
 254              		.code	16
 255              		.thumb_func
 256              		.type	MOTOR_SetRxInterruptMode, %function
 257              	MOTOR_SetRxInterruptMode:
 258              	.LFB7:
 330:.\Generated_Source\PSoC4/MOTOR.c **** 
 331:.\Generated_Source\PSoC4/MOTOR.c **** 
 332:.\Generated_Source\PSoC4/MOTOR.c **** #if(MOTOR_RX_ENABLED || MOTOR_HD_ENABLED)
 333:.\Generated_Source\PSoC4/MOTOR.c ****     /*******************************************************************************
 334:.\Generated_Source\PSoC4/MOTOR.c ****     * Function Name: MOTOR_SetRxInterruptMode
 335:.\Generated_Source\PSoC4/MOTOR.c ****     ********************************************************************************
 336:.\Generated_Source\PSoC4/MOTOR.c ****     *
 337:.\Generated_Source\PSoC4/MOTOR.c ****     * Summary:
 338:.\Generated_Source\PSoC4/MOTOR.c ****     *  Configures the RX interrupt sources enabled.
 339:.\Generated_Source\PSoC4/MOTOR.c ****     *
 340:.\Generated_Source\PSoC4/MOTOR.c ****     * Parameters:
 341:.\Generated_Source\PSoC4/MOTOR.c ****     *  IntSrc:  Bit field containing the RX interrupts to enable. Based on the 
 342:.\Generated_Source\PSoC4/MOTOR.c ****     *  bit-field arrangement of the status register. This value must be a 
 343:.\Generated_Source\PSoC4/MOTOR.c ****     *  combination of status register bit-masks shown below:
 344:.\Generated_Source\PSoC4/MOTOR.c ****     *      MOTOR_RX_STS_FIFO_NOTEMPTY    Interrupt on byte received.
 345:.\Generated_Source\PSoC4/MOTOR.c ****     *      MOTOR_RX_STS_PAR_ERROR        Interrupt on parity error.
 346:.\Generated_Source\PSoC4/MOTOR.c ****     *      MOTOR_RX_STS_STOP_ERROR       Interrupt on stop error.
 347:.\Generated_Source\PSoC4/MOTOR.c ****     *      MOTOR_RX_STS_BREAK            Interrupt on break.
 348:.\Generated_Source\PSoC4/MOTOR.c ****     *      MOTOR_RX_STS_OVERRUN          Interrupt on overrun error.
 349:.\Generated_Source\PSoC4/MOTOR.c ****     *      MOTOR_RX_STS_ADDR_MATCH       Interrupt on address match.
 350:.\Generated_Source\PSoC4/MOTOR.c ****     *      MOTOR_RX_STS_MRKSPC           Interrupt on address detect.
 351:.\Generated_Source\PSoC4/MOTOR.c ****     *
 352:.\Generated_Source\PSoC4/MOTOR.c ****     * Return:
 353:.\Generated_Source\PSoC4/MOTOR.c ****     *  None.
 354:.\Generated_Source\PSoC4/MOTOR.c ****     *
 355:.\Generated_Source\PSoC4/MOTOR.c ****     * Theory:
 356:.\Generated_Source\PSoC4/MOTOR.c ****     *  Enables the output of specific status bits to the interrupt controller
 357:.\Generated_Source\PSoC4/MOTOR.c ****     *
 358:.\Generated_Source\PSoC4/MOTOR.c ****     *******************************************************************************/
 359:.\Generated_Source\PSoC4/MOTOR.c ****     void MOTOR_SetRxInterruptMode(uint8 intSrc) 
 360:.\Generated_Source\PSoC4/MOTOR.c ****     {
 259              		.loc 1 360 0
 260              		.cfi_startproc
 261              	.LVL13:
ARM GAS  C:\Users\HENRYA~1\AppData\Local\Temp\ccSeVATh.s 			page 12


 361:.\Generated_Source\PSoC4/MOTOR.c ****         MOTOR_RXSTATUS_MASK_REG  = intSrc;
 262              		.loc 1 361 0
 263 0000 014B     		ldr	r3, .L17
 264 0002 1870     		strb	r0, [r3]
 362:.\Generated_Source\PSoC4/MOTOR.c ****     }
 265              		.loc 1 362 0
 266              		@ sp needed
 267 0004 7047     		bx	lr
 268              	.L18:
 269 0006 C046     		.align	2
 270              	.L17:
 271 0008 80000F40 		.word	1074724992
 272              		.cfi_endproc
 273              	.LFE7:
 274              		.size	MOTOR_SetRxInterruptMode, .-MOTOR_SetRxInterruptMode
 275              		.section	.text.MOTOR_ReadRxData,"ax",%progbits
 276              		.align	2
 277              		.global	MOTOR_ReadRxData
 278              		.code	16
 279              		.thumb_func
 280              		.type	MOTOR_ReadRxData, %function
 281              	MOTOR_ReadRxData:
 282              	.LFB8:
 363:.\Generated_Source\PSoC4/MOTOR.c **** 
 364:.\Generated_Source\PSoC4/MOTOR.c **** 
 365:.\Generated_Source\PSoC4/MOTOR.c ****     /*******************************************************************************
 366:.\Generated_Source\PSoC4/MOTOR.c ****     * Function Name: MOTOR_ReadRxData
 367:.\Generated_Source\PSoC4/MOTOR.c ****     ********************************************************************************
 368:.\Generated_Source\PSoC4/MOTOR.c ****     *
 369:.\Generated_Source\PSoC4/MOTOR.c ****     * Summary:
 370:.\Generated_Source\PSoC4/MOTOR.c ****     *  Returns the next byte of received data. This function returns data without
 371:.\Generated_Source\PSoC4/MOTOR.c ****     *  checking the status. You must check the status separately.
 372:.\Generated_Source\PSoC4/MOTOR.c ****     *
 373:.\Generated_Source\PSoC4/MOTOR.c ****     * Parameters:
 374:.\Generated_Source\PSoC4/MOTOR.c ****     *  None.
 375:.\Generated_Source\PSoC4/MOTOR.c ****     *
 376:.\Generated_Source\PSoC4/MOTOR.c ****     * Return:
 377:.\Generated_Source\PSoC4/MOTOR.c ****     *  Received data from RX register
 378:.\Generated_Source\PSoC4/MOTOR.c ****     *
 379:.\Generated_Source\PSoC4/MOTOR.c ****     * Global Variables:
 380:.\Generated_Source\PSoC4/MOTOR.c ****     *  MOTOR_rxBuffer - RAM buffer pointer for save received data.
 381:.\Generated_Source\PSoC4/MOTOR.c ****     *  MOTOR_rxBufferWrite - cyclic index for write to rxBuffer,
 382:.\Generated_Source\PSoC4/MOTOR.c ****     *     checked to identify new data.
 383:.\Generated_Source\PSoC4/MOTOR.c ****     *  MOTOR_rxBufferRead - cyclic index for read from rxBuffer,
 384:.\Generated_Source\PSoC4/MOTOR.c ****     *     incremented after each byte has been read from buffer.
 385:.\Generated_Source\PSoC4/MOTOR.c ****     *  MOTOR_rxBufferLoopDetect - cleared if loop condition was detected
 386:.\Generated_Source\PSoC4/MOTOR.c ****     *     in RX ISR.
 387:.\Generated_Source\PSoC4/MOTOR.c ****     *
 388:.\Generated_Source\PSoC4/MOTOR.c ****     * Reentrant:
 389:.\Generated_Source\PSoC4/MOTOR.c ****     *  No.
 390:.\Generated_Source\PSoC4/MOTOR.c ****     *
 391:.\Generated_Source\PSoC4/MOTOR.c ****     *******************************************************************************/
 392:.\Generated_Source\PSoC4/MOTOR.c ****     uint8 MOTOR_ReadRxData(void) 
 393:.\Generated_Source\PSoC4/MOTOR.c ****     {
 283              		.loc 1 393 0
 284              		.cfi_startproc
 394:.\Generated_Source\PSoC4/MOTOR.c ****         uint8 rxData;
ARM GAS  C:\Users\HENRYA~1\AppData\Local\Temp\ccSeVATh.s 			page 13


 395:.\Generated_Source\PSoC4/MOTOR.c **** 
 396:.\Generated_Source\PSoC4/MOTOR.c ****     #if (MOTOR_RX_INTERRUPT_ENABLED)
 397:.\Generated_Source\PSoC4/MOTOR.c **** 
 398:.\Generated_Source\PSoC4/MOTOR.c ****         uint8 locRxBufferRead;
 399:.\Generated_Source\PSoC4/MOTOR.c ****         uint8 locRxBufferWrite;
 400:.\Generated_Source\PSoC4/MOTOR.c **** 
 401:.\Generated_Source\PSoC4/MOTOR.c ****         /* Protect variables that could change on interrupt */
 402:.\Generated_Source\PSoC4/MOTOR.c ****         MOTOR_DisableRxInt();
 403:.\Generated_Source\PSoC4/MOTOR.c **** 
 404:.\Generated_Source\PSoC4/MOTOR.c ****         locRxBufferRead  = MOTOR_rxBufferRead;
 405:.\Generated_Source\PSoC4/MOTOR.c ****         locRxBufferWrite = MOTOR_rxBufferWrite;
 406:.\Generated_Source\PSoC4/MOTOR.c **** 
 407:.\Generated_Source\PSoC4/MOTOR.c ****         if( (MOTOR_rxBufferLoopDetect != 0u) || (locRxBufferRead != locRxBufferWrite) )
 408:.\Generated_Source\PSoC4/MOTOR.c ****         {
 409:.\Generated_Source\PSoC4/MOTOR.c ****             rxData = MOTOR_rxBuffer[locRxBufferRead];
 410:.\Generated_Source\PSoC4/MOTOR.c ****             locRxBufferRead++;
 411:.\Generated_Source\PSoC4/MOTOR.c **** 
 412:.\Generated_Source\PSoC4/MOTOR.c ****             if(locRxBufferRead >= MOTOR_RX_BUFFER_SIZE)
 413:.\Generated_Source\PSoC4/MOTOR.c ****             {
 414:.\Generated_Source\PSoC4/MOTOR.c ****                 locRxBufferRead = 0u;
 415:.\Generated_Source\PSoC4/MOTOR.c ****             }
 416:.\Generated_Source\PSoC4/MOTOR.c ****             /* Update the real pointer */
 417:.\Generated_Source\PSoC4/MOTOR.c ****             MOTOR_rxBufferRead = locRxBufferRead;
 418:.\Generated_Source\PSoC4/MOTOR.c **** 
 419:.\Generated_Source\PSoC4/MOTOR.c ****             if(MOTOR_rxBufferLoopDetect != 0u)
 420:.\Generated_Source\PSoC4/MOTOR.c ****             {
 421:.\Generated_Source\PSoC4/MOTOR.c ****                 MOTOR_rxBufferLoopDetect = 0u;
 422:.\Generated_Source\PSoC4/MOTOR.c ****                 #if ((MOTOR_RX_INTERRUPT_ENABLED) && (MOTOR_FLOW_CONTROL != 0u))
 423:.\Generated_Source\PSoC4/MOTOR.c ****                     /* When Hardware Flow Control selected - return RX mask */
 424:.\Generated_Source\PSoC4/MOTOR.c ****                     #if( MOTOR_HD_ENABLED )
 425:.\Generated_Source\PSoC4/MOTOR.c ****                         if((MOTOR_CONTROL_REG & MOTOR_CTRL_HD_SEND) == 0u)
 426:.\Generated_Source\PSoC4/MOTOR.c ****                         {   /* In Half duplex mode return RX mask only in RX
 427:.\Generated_Source\PSoC4/MOTOR.c ****                             *  configuration set, otherwise
 428:.\Generated_Source\PSoC4/MOTOR.c ****                             *  mask will be returned in LoadRxConfig() API.
 429:.\Generated_Source\PSoC4/MOTOR.c ****                             */
 430:.\Generated_Source\PSoC4/MOTOR.c ****                             MOTOR_RXSTATUS_MASK_REG  |= MOTOR_RX_STS_FIFO_NOTEMPTY;
 431:.\Generated_Source\PSoC4/MOTOR.c ****                         }
 432:.\Generated_Source\PSoC4/MOTOR.c ****                     #else
 433:.\Generated_Source\PSoC4/MOTOR.c ****                         MOTOR_RXSTATUS_MASK_REG  |= MOTOR_RX_STS_FIFO_NOTEMPTY;
 434:.\Generated_Source\PSoC4/MOTOR.c ****                     #endif /* end MOTOR_HD_ENABLED */
 435:.\Generated_Source\PSoC4/MOTOR.c ****                 #endif /* ((MOTOR_RX_INTERRUPT_ENABLED) && (MOTOR_FLOW_CONTROL != 0u)) */
 436:.\Generated_Source\PSoC4/MOTOR.c ****             }
 437:.\Generated_Source\PSoC4/MOTOR.c ****         }
 438:.\Generated_Source\PSoC4/MOTOR.c ****         else
 439:.\Generated_Source\PSoC4/MOTOR.c ****         {   /* Needs to check status for RX_STS_FIFO_NOTEMPTY bit */
 440:.\Generated_Source\PSoC4/MOTOR.c ****             rxData = MOTOR_RXDATA_REG;
 441:.\Generated_Source\PSoC4/MOTOR.c ****         }
 442:.\Generated_Source\PSoC4/MOTOR.c **** 
 443:.\Generated_Source\PSoC4/MOTOR.c ****         MOTOR_EnableRxInt();
 444:.\Generated_Source\PSoC4/MOTOR.c **** 
 445:.\Generated_Source\PSoC4/MOTOR.c ****     #else
 446:.\Generated_Source\PSoC4/MOTOR.c **** 
 447:.\Generated_Source\PSoC4/MOTOR.c ****         /* Needs to check status for RX_STS_FIFO_NOTEMPTY bit */
 448:.\Generated_Source\PSoC4/MOTOR.c ****         rxData = MOTOR_RXDATA_REG;
 285              		.loc 1 448 0
 286 0000 014B     		ldr	r3, .L20
 287 0002 1878     		ldrb	r0, [r3]
ARM GAS  C:\Users\HENRYA~1\AppData\Local\Temp\ccSeVATh.s 			page 14


 288 0004 C0B2     		uxtb	r0, r0
 289              	.LVL14:
 449:.\Generated_Source\PSoC4/MOTOR.c **** 
 450:.\Generated_Source\PSoC4/MOTOR.c ****     #endif /* (MOTOR_RX_INTERRUPT_ENABLED) */
 451:.\Generated_Source\PSoC4/MOTOR.c **** 
 452:.\Generated_Source\PSoC4/MOTOR.c ****         return(rxData);
 453:.\Generated_Source\PSoC4/MOTOR.c ****     }
 290              		.loc 1 453 0
 291              		@ sp needed
 292 0006 7047     		bx	lr
 293              	.L21:
 294              		.align	2
 295              	.L20:
 296 0008 41000F40 		.word	1074724929
 297              		.cfi_endproc
 298              	.LFE8:
 299              		.size	MOTOR_ReadRxData, .-MOTOR_ReadRxData
 300              		.section	.text.MOTOR_ReadRxStatus,"ax",%progbits
 301              		.align	2
 302              		.global	MOTOR_ReadRxStatus
 303              		.code	16
 304              		.thumb_func
 305              		.type	MOTOR_ReadRxStatus, %function
 306              	MOTOR_ReadRxStatus:
 307              	.LFB9:
 454:.\Generated_Source\PSoC4/MOTOR.c **** 
 455:.\Generated_Source\PSoC4/MOTOR.c **** 
 456:.\Generated_Source\PSoC4/MOTOR.c ****     /*******************************************************************************
 457:.\Generated_Source\PSoC4/MOTOR.c ****     * Function Name: MOTOR_ReadRxStatus
 458:.\Generated_Source\PSoC4/MOTOR.c ****     ********************************************************************************
 459:.\Generated_Source\PSoC4/MOTOR.c ****     *
 460:.\Generated_Source\PSoC4/MOTOR.c ****     * Summary:
 461:.\Generated_Source\PSoC4/MOTOR.c ****     *  Returns the current state of the receiver status register and the software
 462:.\Generated_Source\PSoC4/MOTOR.c ****     *  buffer overflow status.
 463:.\Generated_Source\PSoC4/MOTOR.c ****     *
 464:.\Generated_Source\PSoC4/MOTOR.c ****     * Parameters:
 465:.\Generated_Source\PSoC4/MOTOR.c ****     *  None.
 466:.\Generated_Source\PSoC4/MOTOR.c ****     *
 467:.\Generated_Source\PSoC4/MOTOR.c ****     * Return:
 468:.\Generated_Source\PSoC4/MOTOR.c ****     *  Current state of the status register.
 469:.\Generated_Source\PSoC4/MOTOR.c ****     *
 470:.\Generated_Source\PSoC4/MOTOR.c ****     * Side Effect:
 471:.\Generated_Source\PSoC4/MOTOR.c ****     *  All status register bits are clear-on-read except
 472:.\Generated_Source\PSoC4/MOTOR.c ****     *  MOTOR_RX_STS_FIFO_NOTEMPTY.
 473:.\Generated_Source\PSoC4/MOTOR.c ****     *  MOTOR_RX_STS_FIFO_NOTEMPTY clears immediately after RX data
 474:.\Generated_Source\PSoC4/MOTOR.c ****     *  register read.
 475:.\Generated_Source\PSoC4/MOTOR.c ****     *
 476:.\Generated_Source\PSoC4/MOTOR.c ****     * Global Variables:
 477:.\Generated_Source\PSoC4/MOTOR.c ****     *  MOTOR_rxBufferOverflow - used to indicate overload condition.
 478:.\Generated_Source\PSoC4/MOTOR.c ****     *   It set to one in RX interrupt when there isn't free space in
 479:.\Generated_Source\PSoC4/MOTOR.c ****     *   MOTOR_rxBufferRead to write new data. This condition returned
 480:.\Generated_Source\PSoC4/MOTOR.c ****     *   and cleared to zero by this API as an
 481:.\Generated_Source\PSoC4/MOTOR.c ****     *   MOTOR_RX_STS_SOFT_BUFF_OVER bit along with RX Status register
 482:.\Generated_Source\PSoC4/MOTOR.c ****     *   bits.
 483:.\Generated_Source\PSoC4/MOTOR.c ****     *
 484:.\Generated_Source\PSoC4/MOTOR.c ****     *******************************************************************************/
 485:.\Generated_Source\PSoC4/MOTOR.c ****     uint8 MOTOR_ReadRxStatus(void) 
ARM GAS  C:\Users\HENRYA~1\AppData\Local\Temp\ccSeVATh.s 			page 15


 486:.\Generated_Source\PSoC4/MOTOR.c ****     {
 308              		.loc 1 486 0
 309              		.cfi_startproc
 487:.\Generated_Source\PSoC4/MOTOR.c ****         uint8 status;
 488:.\Generated_Source\PSoC4/MOTOR.c **** 
 489:.\Generated_Source\PSoC4/MOTOR.c ****         status = MOTOR_RXSTATUS_REG & MOTOR_RX_HW_MASK;
 310              		.loc 1 489 0
 311 0000 024B     		ldr	r3, .L23
 312 0002 1878     		ldrb	r0, [r3]
 313 0004 7F23     		mov	r3, #127
 314 0006 1840     		and	r0, r3
 315              	.LVL15:
 490:.\Generated_Source\PSoC4/MOTOR.c **** 
 491:.\Generated_Source\PSoC4/MOTOR.c ****     #if (MOTOR_RX_INTERRUPT_ENABLED)
 492:.\Generated_Source\PSoC4/MOTOR.c ****         if(MOTOR_rxBufferOverflow != 0u)
 493:.\Generated_Source\PSoC4/MOTOR.c ****         {
 494:.\Generated_Source\PSoC4/MOTOR.c ****             status |= MOTOR_RX_STS_SOFT_BUFF_OVER;
 495:.\Generated_Source\PSoC4/MOTOR.c ****             MOTOR_rxBufferOverflow = 0u;
 496:.\Generated_Source\PSoC4/MOTOR.c ****         }
 497:.\Generated_Source\PSoC4/MOTOR.c ****     #endif /* (MOTOR_RX_INTERRUPT_ENABLED) */
 498:.\Generated_Source\PSoC4/MOTOR.c **** 
 499:.\Generated_Source\PSoC4/MOTOR.c ****         return(status);
 500:.\Generated_Source\PSoC4/MOTOR.c ****     }
 316              		.loc 1 500 0
 317              		@ sp needed
 318 0008 7047     		bx	lr
 319              	.L24:
 320 000a C046     		.align	2
 321              	.L23:
 322 000c 60000F40 		.word	1074724960
 323              		.cfi_endproc
 324              	.LFE9:
 325              		.size	MOTOR_ReadRxStatus, .-MOTOR_ReadRxStatus
 326              		.section	.text.MOTOR_GetChar,"ax",%progbits
 327              		.align	2
 328              		.global	MOTOR_GetChar
 329              		.code	16
 330              		.thumb_func
 331              		.type	MOTOR_GetChar, %function
 332              	MOTOR_GetChar:
 333              	.LFB10:
 501:.\Generated_Source\PSoC4/MOTOR.c **** 
 502:.\Generated_Source\PSoC4/MOTOR.c **** 
 503:.\Generated_Source\PSoC4/MOTOR.c ****     /*******************************************************************************
 504:.\Generated_Source\PSoC4/MOTOR.c ****     * Function Name: MOTOR_GetChar
 505:.\Generated_Source\PSoC4/MOTOR.c ****     ********************************************************************************
 506:.\Generated_Source\PSoC4/MOTOR.c ****     *
 507:.\Generated_Source\PSoC4/MOTOR.c ****     * Summary:
 508:.\Generated_Source\PSoC4/MOTOR.c ****     *  Returns the last received byte of data. MOTOR_GetChar() is
 509:.\Generated_Source\PSoC4/MOTOR.c ****     *  designed for ASCII characters and returns a uint8 where 1 to 255 are values
 510:.\Generated_Source\PSoC4/MOTOR.c ****     *  for valid characters and 0 indicates an error occurred or no data is present.
 511:.\Generated_Source\PSoC4/MOTOR.c ****     *
 512:.\Generated_Source\PSoC4/MOTOR.c ****     * Parameters:
 513:.\Generated_Source\PSoC4/MOTOR.c ****     *  None.
 514:.\Generated_Source\PSoC4/MOTOR.c ****     *
 515:.\Generated_Source\PSoC4/MOTOR.c ****     * Return:
 516:.\Generated_Source\PSoC4/MOTOR.c ****     *  Character read from UART RX buffer. ASCII characters from 1 to 255 are valid.
ARM GAS  C:\Users\HENRYA~1\AppData\Local\Temp\ccSeVATh.s 			page 16


 517:.\Generated_Source\PSoC4/MOTOR.c ****     *  A returned zero signifies an error condition or no data available.
 518:.\Generated_Source\PSoC4/MOTOR.c ****     *
 519:.\Generated_Source\PSoC4/MOTOR.c ****     * Global Variables:
 520:.\Generated_Source\PSoC4/MOTOR.c ****     *  MOTOR_rxBuffer - RAM buffer pointer for save received data.
 521:.\Generated_Source\PSoC4/MOTOR.c ****     *  MOTOR_rxBufferWrite - cyclic index for write to rxBuffer,
 522:.\Generated_Source\PSoC4/MOTOR.c ****     *     checked to identify new data.
 523:.\Generated_Source\PSoC4/MOTOR.c ****     *  MOTOR_rxBufferRead - cyclic index for read from rxBuffer,
 524:.\Generated_Source\PSoC4/MOTOR.c ****     *     incremented after each byte has been read from buffer.
 525:.\Generated_Source\PSoC4/MOTOR.c ****     *  MOTOR_rxBufferLoopDetect - cleared if loop condition was detected
 526:.\Generated_Source\PSoC4/MOTOR.c ****     *     in RX ISR.
 527:.\Generated_Source\PSoC4/MOTOR.c ****     *
 528:.\Generated_Source\PSoC4/MOTOR.c ****     * Reentrant:
 529:.\Generated_Source\PSoC4/MOTOR.c ****     *  No.
 530:.\Generated_Source\PSoC4/MOTOR.c ****     *
 531:.\Generated_Source\PSoC4/MOTOR.c ****     *******************************************************************************/
 532:.\Generated_Source\PSoC4/MOTOR.c ****     uint8 MOTOR_GetChar(void) 
 533:.\Generated_Source\PSoC4/MOTOR.c ****     {
 334              		.loc 1 533 0
 335              		.cfi_startproc
 336              	.LVL16:
 534:.\Generated_Source\PSoC4/MOTOR.c ****         uint8 rxData = 0u;
 535:.\Generated_Source\PSoC4/MOTOR.c ****         uint8 rxStatus;
 536:.\Generated_Source\PSoC4/MOTOR.c **** 
 537:.\Generated_Source\PSoC4/MOTOR.c ****     #if (MOTOR_RX_INTERRUPT_ENABLED)
 538:.\Generated_Source\PSoC4/MOTOR.c ****         uint8 locRxBufferRead;
 539:.\Generated_Source\PSoC4/MOTOR.c ****         uint8 locRxBufferWrite;
 540:.\Generated_Source\PSoC4/MOTOR.c **** 
 541:.\Generated_Source\PSoC4/MOTOR.c ****         /* Protect variables that could change on interrupt */
 542:.\Generated_Source\PSoC4/MOTOR.c ****         MOTOR_DisableRxInt();
 543:.\Generated_Source\PSoC4/MOTOR.c **** 
 544:.\Generated_Source\PSoC4/MOTOR.c ****         locRxBufferRead  = MOTOR_rxBufferRead;
 545:.\Generated_Source\PSoC4/MOTOR.c ****         locRxBufferWrite = MOTOR_rxBufferWrite;
 546:.\Generated_Source\PSoC4/MOTOR.c **** 
 547:.\Generated_Source\PSoC4/MOTOR.c ****         if( (MOTOR_rxBufferLoopDetect != 0u) || (locRxBufferRead != locRxBufferWrite) )
 548:.\Generated_Source\PSoC4/MOTOR.c ****         {
 549:.\Generated_Source\PSoC4/MOTOR.c ****             rxData = MOTOR_rxBuffer[locRxBufferRead];
 550:.\Generated_Source\PSoC4/MOTOR.c ****             locRxBufferRead++;
 551:.\Generated_Source\PSoC4/MOTOR.c ****             if(locRxBufferRead >= MOTOR_RX_BUFFER_SIZE)
 552:.\Generated_Source\PSoC4/MOTOR.c ****             {
 553:.\Generated_Source\PSoC4/MOTOR.c ****                 locRxBufferRead = 0u;
 554:.\Generated_Source\PSoC4/MOTOR.c ****             }
 555:.\Generated_Source\PSoC4/MOTOR.c ****             /* Update the real pointer */
 556:.\Generated_Source\PSoC4/MOTOR.c ****             MOTOR_rxBufferRead = locRxBufferRead;
 557:.\Generated_Source\PSoC4/MOTOR.c **** 
 558:.\Generated_Source\PSoC4/MOTOR.c ****             if(MOTOR_rxBufferLoopDetect != 0u)
 559:.\Generated_Source\PSoC4/MOTOR.c ****             {
 560:.\Generated_Source\PSoC4/MOTOR.c ****                 MOTOR_rxBufferLoopDetect = 0u;
 561:.\Generated_Source\PSoC4/MOTOR.c ****                 #if( (MOTOR_RX_INTERRUPT_ENABLED) && (MOTOR_FLOW_CONTROL != 0u) )
 562:.\Generated_Source\PSoC4/MOTOR.c ****                     /* When Hardware Flow Control selected - return RX mask */
 563:.\Generated_Source\PSoC4/MOTOR.c ****                     #if( MOTOR_HD_ENABLED )
 564:.\Generated_Source\PSoC4/MOTOR.c ****                         if((MOTOR_CONTROL_REG & MOTOR_CTRL_HD_SEND) == 0u)
 565:.\Generated_Source\PSoC4/MOTOR.c ****                         {   /* In Half duplex mode return RX mask only if
 566:.\Generated_Source\PSoC4/MOTOR.c ****                             *  RX configuration set, otherwise
 567:.\Generated_Source\PSoC4/MOTOR.c ****                             *  mask will be returned in LoadRxConfig() API.
 568:.\Generated_Source\PSoC4/MOTOR.c ****                             */
 569:.\Generated_Source\PSoC4/MOTOR.c ****                             MOTOR_RXSTATUS_MASK_REG |= MOTOR_RX_STS_FIFO_NOTEMPTY;
 570:.\Generated_Source\PSoC4/MOTOR.c ****                         }
ARM GAS  C:\Users\HENRYA~1\AppData\Local\Temp\ccSeVATh.s 			page 17


 571:.\Generated_Source\PSoC4/MOTOR.c ****                     #else
 572:.\Generated_Source\PSoC4/MOTOR.c ****                         MOTOR_RXSTATUS_MASK_REG |= MOTOR_RX_STS_FIFO_NOTEMPTY;
 573:.\Generated_Source\PSoC4/MOTOR.c ****                     #endif /* end MOTOR_HD_ENABLED */
 574:.\Generated_Source\PSoC4/MOTOR.c ****                 #endif /* MOTOR_RX_INTERRUPT_ENABLED and Hardware flow control*/
 575:.\Generated_Source\PSoC4/MOTOR.c ****             }
 576:.\Generated_Source\PSoC4/MOTOR.c **** 
 577:.\Generated_Source\PSoC4/MOTOR.c ****         }
 578:.\Generated_Source\PSoC4/MOTOR.c ****         else
 579:.\Generated_Source\PSoC4/MOTOR.c ****         {   rxStatus = MOTOR_RXSTATUS_REG;
 580:.\Generated_Source\PSoC4/MOTOR.c ****             if((rxStatus & MOTOR_RX_STS_FIFO_NOTEMPTY) != 0u)
 581:.\Generated_Source\PSoC4/MOTOR.c ****             {   /* Read received data from FIFO */
 582:.\Generated_Source\PSoC4/MOTOR.c ****                 rxData = MOTOR_RXDATA_REG;
 583:.\Generated_Source\PSoC4/MOTOR.c ****                 /*Check status on error*/
 584:.\Generated_Source\PSoC4/MOTOR.c ****                 if((rxStatus & (MOTOR_RX_STS_BREAK | MOTOR_RX_STS_PAR_ERROR |
 585:.\Generated_Source\PSoC4/MOTOR.c ****                                 MOTOR_RX_STS_STOP_ERROR | MOTOR_RX_STS_OVERRUN)) != 0u)
 586:.\Generated_Source\PSoC4/MOTOR.c ****                 {
 587:.\Generated_Source\PSoC4/MOTOR.c ****                     rxData = 0u;
 588:.\Generated_Source\PSoC4/MOTOR.c ****                 }
 589:.\Generated_Source\PSoC4/MOTOR.c ****             }
 590:.\Generated_Source\PSoC4/MOTOR.c ****         }
 591:.\Generated_Source\PSoC4/MOTOR.c **** 
 592:.\Generated_Source\PSoC4/MOTOR.c ****         MOTOR_EnableRxInt();
 593:.\Generated_Source\PSoC4/MOTOR.c **** 
 594:.\Generated_Source\PSoC4/MOTOR.c ****     #else
 595:.\Generated_Source\PSoC4/MOTOR.c **** 
 596:.\Generated_Source\PSoC4/MOTOR.c ****         rxStatus =MOTOR_RXSTATUS_REG;
 337              		.loc 1 596 0
 338 0000 074B     		ldr	r3, .L29
 339 0002 1B78     		ldrb	r3, [r3]
 340 0004 DBB2     		uxtb	r3, r3
 341              	.LVL17:
 597:.\Generated_Source\PSoC4/MOTOR.c ****         if((rxStatus & MOTOR_RX_STS_FIFO_NOTEMPTY) != 0u)
 342              		.loc 1 597 0
 343 0006 9A06     		lsl	r2, r3, #26
 344 0008 06D5     		bpl	.L27
 598:.\Generated_Source\PSoC4/MOTOR.c ****         {
 599:.\Generated_Source\PSoC4/MOTOR.c ****             /* Read received data from FIFO */
 600:.\Generated_Source\PSoC4/MOTOR.c ****             rxData = MOTOR_RXDATA_REG;
 345              		.loc 1 600 0
 346 000a 064A     		ldr	r2, .L29+4
 347 000c 1078     		ldrb	r0, [r2]
 348 000e C0B2     		uxtb	r0, r0
 349              	.LVL18:
 601:.\Generated_Source\PSoC4/MOTOR.c **** 
 602:.\Generated_Source\PSoC4/MOTOR.c ****             /*Check status on error*/
 603:.\Generated_Source\PSoC4/MOTOR.c ****             if((rxStatus & (MOTOR_RX_STS_BREAK | MOTOR_RX_STS_PAR_ERROR |
 350              		.loc 1 603 0
 351 0010 1E22     		mov	r2, #30
 352 0012 1A42     		tst	r2, r3
 353 0014 02D1     		bne	.L28
 354 0016 02E0     		b	.L26
 355              	.LVL19:
 356              	.L27:
 534:.\Generated_Source\PSoC4/MOTOR.c ****         uint8 rxStatus;
 357              		.loc 1 534 0
 358 0018 0020     		mov	r0, #0
 359 001a 00E0     		b	.L26
ARM GAS  C:\Users\HENRYA~1\AppData\Local\Temp\ccSeVATh.s 			page 18


 360              	.LVL20:
 361              	.L28:
 604:.\Generated_Source\PSoC4/MOTOR.c ****                             MOTOR_RX_STS_STOP_ERROR | MOTOR_RX_STS_OVERRUN)) != 0u)
 605:.\Generated_Source\PSoC4/MOTOR.c ****             {
 606:.\Generated_Source\PSoC4/MOTOR.c ****                 rxData = 0u;
 362              		.loc 1 606 0
 363 001c 0020     		mov	r0, #0
 364              	.LVL21:
 365              	.L26:
 607:.\Generated_Source\PSoC4/MOTOR.c ****             }
 608:.\Generated_Source\PSoC4/MOTOR.c ****         }
 609:.\Generated_Source\PSoC4/MOTOR.c ****     #endif /* (MOTOR_RX_INTERRUPT_ENABLED) */
 610:.\Generated_Source\PSoC4/MOTOR.c **** 
 611:.\Generated_Source\PSoC4/MOTOR.c ****         return(rxData);
 612:.\Generated_Source\PSoC4/MOTOR.c ****     }
 366              		.loc 1 612 0
 367              		@ sp needed
 368 001e 7047     		bx	lr
 369              	.L30:
 370              		.align	2
 371              	.L29:
 372 0020 60000F40 		.word	1074724960
 373 0024 41000F40 		.word	1074724929
 374              		.cfi_endproc
 375              	.LFE10:
 376              		.size	MOTOR_GetChar, .-MOTOR_GetChar
 377              		.section	.text.MOTOR_GetByte,"ax",%progbits
 378              		.align	2
 379              		.global	MOTOR_GetByte
 380              		.code	16
 381              		.thumb_func
 382              		.type	MOTOR_GetByte, %function
 383              	MOTOR_GetByte:
 384              	.LFB11:
 613:.\Generated_Source\PSoC4/MOTOR.c **** 
 614:.\Generated_Source\PSoC4/MOTOR.c **** 
 615:.\Generated_Source\PSoC4/MOTOR.c ****     /*******************************************************************************
 616:.\Generated_Source\PSoC4/MOTOR.c ****     * Function Name: MOTOR_GetByte
 617:.\Generated_Source\PSoC4/MOTOR.c ****     ********************************************************************************
 618:.\Generated_Source\PSoC4/MOTOR.c ****     *
 619:.\Generated_Source\PSoC4/MOTOR.c ****     * Summary:
 620:.\Generated_Source\PSoC4/MOTOR.c ****     *  Reads UART RX buffer immediately, returns received character and error
 621:.\Generated_Source\PSoC4/MOTOR.c ****     *  condition.
 622:.\Generated_Source\PSoC4/MOTOR.c ****     *
 623:.\Generated_Source\PSoC4/MOTOR.c ****     * Parameters:
 624:.\Generated_Source\PSoC4/MOTOR.c ****     *  None.
 625:.\Generated_Source\PSoC4/MOTOR.c ****     *
 626:.\Generated_Source\PSoC4/MOTOR.c ****     * Return:
 627:.\Generated_Source\PSoC4/MOTOR.c ****     *  MSB contains status and LSB contains UART RX data. If the MSB is nonzero,
 628:.\Generated_Source\PSoC4/MOTOR.c ****     *  an error has occurred.
 629:.\Generated_Source\PSoC4/MOTOR.c ****     *
 630:.\Generated_Source\PSoC4/MOTOR.c ****     * Reentrant:
 631:.\Generated_Source\PSoC4/MOTOR.c ****     *  No.
 632:.\Generated_Source\PSoC4/MOTOR.c ****     *
 633:.\Generated_Source\PSoC4/MOTOR.c ****     *******************************************************************************/
 634:.\Generated_Source\PSoC4/MOTOR.c ****     uint16 MOTOR_GetByte(void) 
 635:.\Generated_Source\PSoC4/MOTOR.c ****     {
ARM GAS  C:\Users\HENRYA~1\AppData\Local\Temp\ccSeVATh.s 			page 19


 385              		.loc 1 635 0
 386              		.cfi_startproc
 387 0000 10B5     		push	{r4, lr}
 388              		.cfi_def_cfa_offset 8
 389              		.cfi_offset 4, -8
 390              		.cfi_offset 14, -4
 636:.\Generated_Source\PSoC4/MOTOR.c ****         
 637:.\Generated_Source\PSoC4/MOTOR.c ****     #if (MOTOR_RX_INTERRUPT_ENABLED)
 638:.\Generated_Source\PSoC4/MOTOR.c ****         uint16 locErrorStatus;
 639:.\Generated_Source\PSoC4/MOTOR.c ****         /* Protect variables that could change on interrupt */
 640:.\Generated_Source\PSoC4/MOTOR.c ****         MOTOR_DisableRxInt();
 641:.\Generated_Source\PSoC4/MOTOR.c ****         locErrorStatus = (uint16)MOTOR_errorStatus;
 642:.\Generated_Source\PSoC4/MOTOR.c ****         MOTOR_errorStatus = 0u;
 643:.\Generated_Source\PSoC4/MOTOR.c ****         MOTOR_EnableRxInt();
 644:.\Generated_Source\PSoC4/MOTOR.c ****         return ( (uint16)(locErrorStatus << 8u) | MOTOR_ReadRxData() );
 645:.\Generated_Source\PSoC4/MOTOR.c ****     #else
 646:.\Generated_Source\PSoC4/MOTOR.c ****         return ( ((uint16)MOTOR_ReadRxStatus() << 8u) | MOTOR_ReadRxData() );
 391              		.loc 1 646 0
 392 0002 FFF7FEFF 		bl	MOTOR_ReadRxStatus
 393              	.LVL22:
 394 0006 0402     		lsl	r4, r0, #8
 395 0008 FFF7FEFF 		bl	MOTOR_ReadRxData
 396              	.LVL23:
 397 000c 2043     		orr	r0, r4
 398 000e 80B2     		uxth	r0, r0
 647:.\Generated_Source\PSoC4/MOTOR.c ****     #endif /* MOTOR_RX_INTERRUPT_ENABLED */
 648:.\Generated_Source\PSoC4/MOTOR.c ****         
 649:.\Generated_Source\PSoC4/MOTOR.c ****     }
 399              		.loc 1 649 0
 400              		@ sp needed
 401 0010 10BD     		pop	{r4, pc}
 402              		.cfi_endproc
 403              	.LFE11:
 404              		.size	MOTOR_GetByte, .-MOTOR_GetByte
 405 0012 C046     		.section	.text.MOTOR_GetRxBufferSize,"ax",%progbits
 406              		.align	2
 407              		.global	MOTOR_GetRxBufferSize
 408              		.code	16
 409              		.thumb_func
 410              		.type	MOTOR_GetRxBufferSize, %function
 411              	MOTOR_GetRxBufferSize:
 412              	.LFB12:
 650:.\Generated_Source\PSoC4/MOTOR.c **** 
 651:.\Generated_Source\PSoC4/MOTOR.c **** 
 652:.\Generated_Source\PSoC4/MOTOR.c ****     /*******************************************************************************
 653:.\Generated_Source\PSoC4/MOTOR.c ****     * Function Name: MOTOR_GetRxBufferSize
 654:.\Generated_Source\PSoC4/MOTOR.c ****     ********************************************************************************
 655:.\Generated_Source\PSoC4/MOTOR.c ****     *
 656:.\Generated_Source\PSoC4/MOTOR.c ****     * Summary:
 657:.\Generated_Source\PSoC4/MOTOR.c ****     *  Returns the number of received bytes available in the RX buffer.
 658:.\Generated_Source\PSoC4/MOTOR.c ****     *  * RX software buffer is disabled (RX Buffer Size parameter is equal to 4): 
 659:.\Generated_Source\PSoC4/MOTOR.c ****     *    returns 0 for empty RX FIFO or 1 for not empty RX FIFO.
 660:.\Generated_Source\PSoC4/MOTOR.c ****     *  * RX software buffer is enabled: returns the number of bytes available in 
 661:.\Generated_Source\PSoC4/MOTOR.c ****     *    the RX software buffer. Bytes available in the RX FIFO do not take to 
 662:.\Generated_Source\PSoC4/MOTOR.c ****     *    account.
 663:.\Generated_Source\PSoC4/MOTOR.c ****     *
 664:.\Generated_Source\PSoC4/MOTOR.c ****     * Parameters:
ARM GAS  C:\Users\HENRYA~1\AppData\Local\Temp\ccSeVATh.s 			page 20


 665:.\Generated_Source\PSoC4/MOTOR.c ****     *  None.
 666:.\Generated_Source\PSoC4/MOTOR.c ****     *
 667:.\Generated_Source\PSoC4/MOTOR.c ****     * Return:
 668:.\Generated_Source\PSoC4/MOTOR.c ****     *  uint8: Number of bytes in the RX buffer. 
 669:.\Generated_Source\PSoC4/MOTOR.c ****     *    Return value type depends on RX Buffer Size parameter.
 670:.\Generated_Source\PSoC4/MOTOR.c ****     *
 671:.\Generated_Source\PSoC4/MOTOR.c ****     * Global Variables:
 672:.\Generated_Source\PSoC4/MOTOR.c ****     *  MOTOR_rxBufferWrite - used to calculate left bytes.
 673:.\Generated_Source\PSoC4/MOTOR.c ****     *  MOTOR_rxBufferRead - used to calculate left bytes.
 674:.\Generated_Source\PSoC4/MOTOR.c ****     *  MOTOR_rxBufferLoopDetect - checked to decide left bytes amount.
 675:.\Generated_Source\PSoC4/MOTOR.c ****     *
 676:.\Generated_Source\PSoC4/MOTOR.c ****     * Reentrant:
 677:.\Generated_Source\PSoC4/MOTOR.c ****     *  No.
 678:.\Generated_Source\PSoC4/MOTOR.c ****     *
 679:.\Generated_Source\PSoC4/MOTOR.c ****     * Theory:
 680:.\Generated_Source\PSoC4/MOTOR.c ****     *  Allows the user to find out how full the RX Buffer is.
 681:.\Generated_Source\PSoC4/MOTOR.c ****     *
 682:.\Generated_Source\PSoC4/MOTOR.c ****     *******************************************************************************/
 683:.\Generated_Source\PSoC4/MOTOR.c ****     uint8 MOTOR_GetRxBufferSize(void)
 684:.\Generated_Source\PSoC4/MOTOR.c ****                                                             
 685:.\Generated_Source\PSoC4/MOTOR.c ****     {
 413              		.loc 1 685 0
 414              		.cfi_startproc
 686:.\Generated_Source\PSoC4/MOTOR.c ****         uint8 size;
 687:.\Generated_Source\PSoC4/MOTOR.c **** 
 688:.\Generated_Source\PSoC4/MOTOR.c ****     #if (MOTOR_RX_INTERRUPT_ENABLED)
 689:.\Generated_Source\PSoC4/MOTOR.c **** 
 690:.\Generated_Source\PSoC4/MOTOR.c ****         /* Protect variables that could change on interrupt */
 691:.\Generated_Source\PSoC4/MOTOR.c ****         MOTOR_DisableRxInt();
 692:.\Generated_Source\PSoC4/MOTOR.c **** 
 693:.\Generated_Source\PSoC4/MOTOR.c ****         if(MOTOR_rxBufferRead == MOTOR_rxBufferWrite)
 694:.\Generated_Source\PSoC4/MOTOR.c ****         {
 695:.\Generated_Source\PSoC4/MOTOR.c ****             if(MOTOR_rxBufferLoopDetect != 0u)
 696:.\Generated_Source\PSoC4/MOTOR.c ****             {
 697:.\Generated_Source\PSoC4/MOTOR.c ****                 size = MOTOR_RX_BUFFER_SIZE;
 698:.\Generated_Source\PSoC4/MOTOR.c ****             }
 699:.\Generated_Source\PSoC4/MOTOR.c ****             else
 700:.\Generated_Source\PSoC4/MOTOR.c ****             {
 701:.\Generated_Source\PSoC4/MOTOR.c ****                 size = 0u;
 702:.\Generated_Source\PSoC4/MOTOR.c ****             }
 703:.\Generated_Source\PSoC4/MOTOR.c ****         }
 704:.\Generated_Source\PSoC4/MOTOR.c ****         else if(MOTOR_rxBufferRead < MOTOR_rxBufferWrite)
 705:.\Generated_Source\PSoC4/MOTOR.c ****         {
 706:.\Generated_Source\PSoC4/MOTOR.c ****             size = (MOTOR_rxBufferWrite - MOTOR_rxBufferRead);
 707:.\Generated_Source\PSoC4/MOTOR.c ****         }
 708:.\Generated_Source\PSoC4/MOTOR.c ****         else
 709:.\Generated_Source\PSoC4/MOTOR.c ****         {
 710:.\Generated_Source\PSoC4/MOTOR.c ****             size = (MOTOR_RX_BUFFER_SIZE - MOTOR_rxBufferRead) + MOTOR_rxBufferWrite;
 711:.\Generated_Source\PSoC4/MOTOR.c ****         }
 712:.\Generated_Source\PSoC4/MOTOR.c **** 
 713:.\Generated_Source\PSoC4/MOTOR.c ****         MOTOR_EnableRxInt();
 714:.\Generated_Source\PSoC4/MOTOR.c **** 
 715:.\Generated_Source\PSoC4/MOTOR.c ****     #else
 716:.\Generated_Source\PSoC4/MOTOR.c **** 
 717:.\Generated_Source\PSoC4/MOTOR.c ****         /* We can only know if there is data in the fifo. */
 718:.\Generated_Source\PSoC4/MOTOR.c ****         size = ((MOTOR_RXSTATUS_REG & MOTOR_RX_STS_FIFO_NOTEMPTY) != 0u) ? 1u : 0u;
 415              		.loc 1 718 0
ARM GAS  C:\Users\HENRYA~1\AppData\Local\Temp\ccSeVATh.s 			page 21


 416 0000 034B     		ldr	r3, .L35
 417 0002 1B78     		ldrb	r3, [r3]
 418 0004 9B06     		lsl	r3, r3, #26
 419 0006 01D5     		bpl	.L34
 420 0008 0120     		mov	r0, #1
 421 000a 00E0     		b	.L33
 422              	.L34:
 423 000c 0020     		mov	r0, #0
 424              	.L33:
 425              	.LVL24:
 719:.\Generated_Source\PSoC4/MOTOR.c **** 
 720:.\Generated_Source\PSoC4/MOTOR.c ****     #endif /* (MOTOR_RX_INTERRUPT_ENABLED) */
 721:.\Generated_Source\PSoC4/MOTOR.c **** 
 722:.\Generated_Source\PSoC4/MOTOR.c ****         return(size);
 723:.\Generated_Source\PSoC4/MOTOR.c ****     }
 426              		.loc 1 723 0 discriminator 4
 427              		@ sp needed
 428 000e 7047     		bx	lr
 429              	.L36:
 430              		.align	2
 431              	.L35:
 432 0010 60000F40 		.word	1074724960
 433              		.cfi_endproc
 434              	.LFE12:
 435              		.size	MOTOR_GetRxBufferSize, .-MOTOR_GetRxBufferSize
 436              		.section	.text.MOTOR_ClearRxBuffer,"ax",%progbits
 437              		.align	2
 438              		.global	MOTOR_ClearRxBuffer
 439              		.code	16
 440              		.thumb_func
 441              		.type	MOTOR_ClearRxBuffer, %function
 442              	MOTOR_ClearRxBuffer:
 443              	.LFB13:
 724:.\Generated_Source\PSoC4/MOTOR.c **** 
 725:.\Generated_Source\PSoC4/MOTOR.c **** 
 726:.\Generated_Source\PSoC4/MOTOR.c ****     /*******************************************************************************
 727:.\Generated_Source\PSoC4/MOTOR.c ****     * Function Name: MOTOR_ClearRxBuffer
 728:.\Generated_Source\PSoC4/MOTOR.c ****     ********************************************************************************
 729:.\Generated_Source\PSoC4/MOTOR.c ****     *
 730:.\Generated_Source\PSoC4/MOTOR.c ****     * Summary:
 731:.\Generated_Source\PSoC4/MOTOR.c ****     *  Clears the receiver memory buffer and hardware RX FIFO of all received data.
 732:.\Generated_Source\PSoC4/MOTOR.c ****     *
 733:.\Generated_Source\PSoC4/MOTOR.c ****     * Parameters:
 734:.\Generated_Source\PSoC4/MOTOR.c ****     *  None.
 735:.\Generated_Source\PSoC4/MOTOR.c ****     *
 736:.\Generated_Source\PSoC4/MOTOR.c ****     * Return:
 737:.\Generated_Source\PSoC4/MOTOR.c ****     *  None.
 738:.\Generated_Source\PSoC4/MOTOR.c ****     *
 739:.\Generated_Source\PSoC4/MOTOR.c ****     * Global Variables:
 740:.\Generated_Source\PSoC4/MOTOR.c ****     *  MOTOR_rxBufferWrite - cleared to zero.
 741:.\Generated_Source\PSoC4/MOTOR.c ****     *  MOTOR_rxBufferRead - cleared to zero.
 742:.\Generated_Source\PSoC4/MOTOR.c ****     *  MOTOR_rxBufferLoopDetect - cleared to zero.
 743:.\Generated_Source\PSoC4/MOTOR.c ****     *  MOTOR_rxBufferOverflow - cleared to zero.
 744:.\Generated_Source\PSoC4/MOTOR.c ****     *
 745:.\Generated_Source\PSoC4/MOTOR.c ****     * Reentrant:
 746:.\Generated_Source\PSoC4/MOTOR.c ****     *  No.
 747:.\Generated_Source\PSoC4/MOTOR.c ****     *
ARM GAS  C:\Users\HENRYA~1\AppData\Local\Temp\ccSeVATh.s 			page 22


 748:.\Generated_Source\PSoC4/MOTOR.c ****     * Theory:
 749:.\Generated_Source\PSoC4/MOTOR.c ****     *  Setting the pointers to zero makes the system believe there is no data to
 750:.\Generated_Source\PSoC4/MOTOR.c ****     *  read and writing will resume at address 0 overwriting any data that may
 751:.\Generated_Source\PSoC4/MOTOR.c ****     *  have remained in the RAM.
 752:.\Generated_Source\PSoC4/MOTOR.c ****     *
 753:.\Generated_Source\PSoC4/MOTOR.c ****     * Side Effects:
 754:.\Generated_Source\PSoC4/MOTOR.c ****     *  Any received data not read from the RAM or FIFO buffer will be lost.
 755:.\Generated_Source\PSoC4/MOTOR.c ****     *
 756:.\Generated_Source\PSoC4/MOTOR.c ****     *******************************************************************************/
 757:.\Generated_Source\PSoC4/MOTOR.c ****     void MOTOR_ClearRxBuffer(void) 
 758:.\Generated_Source\PSoC4/MOTOR.c ****     {
 444              		.loc 1 758 0
 445              		.cfi_startproc
 446 0000 08B5     		push	{r3, lr}
 447              		.cfi_def_cfa_offset 8
 448              		.cfi_offset 3, -8
 449              		.cfi_offset 14, -4
 759:.\Generated_Source\PSoC4/MOTOR.c ****         uint8 enableInterrupts;
 760:.\Generated_Source\PSoC4/MOTOR.c **** 
 761:.\Generated_Source\PSoC4/MOTOR.c ****         /* Clear the HW FIFO */
 762:.\Generated_Source\PSoC4/MOTOR.c ****         enableInterrupts = CyEnterCriticalSection();
 450              		.loc 1 762 0
 451 0002 FFF7FEFF 		bl	CyEnterCriticalSection
 452              	.LVL25:
 763:.\Generated_Source\PSoC4/MOTOR.c ****         MOTOR_RXDATA_AUX_CTL_REG |= (uint8)  MOTOR_RX_FIFO_CLR;
 453              		.loc 1 763 0
 454 0006 064B     		ldr	r3, .L38
 455 0008 1978     		ldrb	r1, [r3]
 456 000a 0122     		mov	r2, #1
 457 000c 0A43     		orr	r2, r1
 458 000e 1A70     		strb	r2, [r3]
 764:.\Generated_Source\PSoC4/MOTOR.c ****         MOTOR_RXDATA_AUX_CTL_REG &= (uint8) ~MOTOR_RX_FIFO_CLR;
 459              		.loc 1 764 0
 460 0010 1A78     		ldrb	r2, [r3]
 461 0012 0121     		mov	r1, #1
 462 0014 8A43     		bic	r2, r1
 463 0016 1A70     		strb	r2, [r3]
 765:.\Generated_Source\PSoC4/MOTOR.c ****         CyExitCriticalSection(enableInterrupts);
 464              		.loc 1 765 0
 465 0018 FFF7FEFF 		bl	CyExitCriticalSection
 466              	.LVL26:
 766:.\Generated_Source\PSoC4/MOTOR.c **** 
 767:.\Generated_Source\PSoC4/MOTOR.c ****     #if (MOTOR_RX_INTERRUPT_ENABLED)
 768:.\Generated_Source\PSoC4/MOTOR.c **** 
 769:.\Generated_Source\PSoC4/MOTOR.c ****         /* Protect variables that could change on interrupt. */
 770:.\Generated_Source\PSoC4/MOTOR.c ****         MOTOR_DisableRxInt();
 771:.\Generated_Source\PSoC4/MOTOR.c **** 
 772:.\Generated_Source\PSoC4/MOTOR.c ****         MOTOR_rxBufferRead = 0u;
 773:.\Generated_Source\PSoC4/MOTOR.c ****         MOTOR_rxBufferWrite = 0u;
 774:.\Generated_Source\PSoC4/MOTOR.c ****         MOTOR_rxBufferLoopDetect = 0u;
 775:.\Generated_Source\PSoC4/MOTOR.c ****         MOTOR_rxBufferOverflow = 0u;
 776:.\Generated_Source\PSoC4/MOTOR.c **** 
 777:.\Generated_Source\PSoC4/MOTOR.c ****         MOTOR_EnableRxInt();
 778:.\Generated_Source\PSoC4/MOTOR.c **** 
 779:.\Generated_Source\PSoC4/MOTOR.c ****     #endif /* (MOTOR_RX_INTERRUPT_ENABLED) */
 780:.\Generated_Source\PSoC4/MOTOR.c **** 
 781:.\Generated_Source\PSoC4/MOTOR.c ****     }
ARM GAS  C:\Users\HENRYA~1\AppData\Local\Temp\ccSeVATh.s 			page 23


 467              		.loc 1 781 0
 468              		@ sp needed
 469 001c 08BD     		pop	{r3, pc}
 470              	.L39:
 471 001e C046     		.align	2
 472              	.L38:
 473 0020 91000F40 		.word	1074725009
 474              		.cfi_endproc
 475              	.LFE13:
 476              		.size	MOTOR_ClearRxBuffer, .-MOTOR_ClearRxBuffer
 477              		.section	.text.MOTOR_SetRxAddressMode,"ax",%progbits
 478              		.align	2
 479              		.global	MOTOR_SetRxAddressMode
 480              		.code	16
 481              		.thumb_func
 482              		.type	MOTOR_SetRxAddressMode, %function
 483              	MOTOR_SetRxAddressMode:
 484              	.LFB14:
 782:.\Generated_Source\PSoC4/MOTOR.c **** 
 783:.\Generated_Source\PSoC4/MOTOR.c **** 
 784:.\Generated_Source\PSoC4/MOTOR.c ****     /*******************************************************************************
 785:.\Generated_Source\PSoC4/MOTOR.c ****     * Function Name: MOTOR_SetRxAddressMode
 786:.\Generated_Source\PSoC4/MOTOR.c ****     ********************************************************************************
 787:.\Generated_Source\PSoC4/MOTOR.c ****     *
 788:.\Generated_Source\PSoC4/MOTOR.c ****     * Summary:
 789:.\Generated_Source\PSoC4/MOTOR.c ****     *  Sets the software controlled Addressing mode used by the RX portion of the
 790:.\Generated_Source\PSoC4/MOTOR.c ****     *  UART.
 791:.\Generated_Source\PSoC4/MOTOR.c ****     *
 792:.\Generated_Source\PSoC4/MOTOR.c ****     * Parameters:
 793:.\Generated_Source\PSoC4/MOTOR.c ****     *  addressMode: Enumerated value indicating the mode of RX addressing
 794:.\Generated_Source\PSoC4/MOTOR.c ****     *  MOTOR__B_UART__AM_SW_BYTE_BYTE -  Software Byte-by-Byte address
 795:.\Generated_Source\PSoC4/MOTOR.c ****     *                                               detection
 796:.\Generated_Source\PSoC4/MOTOR.c ****     *  MOTOR__B_UART__AM_SW_DETECT_TO_BUFFER - Software Detect to Buffer
 797:.\Generated_Source\PSoC4/MOTOR.c ****     *                                               address detection
 798:.\Generated_Source\PSoC4/MOTOR.c ****     *  MOTOR__B_UART__AM_HW_BYTE_BY_BYTE - Hardware Byte-by-Byte address
 799:.\Generated_Source\PSoC4/MOTOR.c ****     *                                               detection
 800:.\Generated_Source\PSoC4/MOTOR.c ****     *  MOTOR__B_UART__AM_HW_DETECT_TO_BUFFER - Hardware Detect to Buffer
 801:.\Generated_Source\PSoC4/MOTOR.c ****     *                                               address detection
 802:.\Generated_Source\PSoC4/MOTOR.c ****     *  MOTOR__B_UART__AM_NONE - No address detection
 803:.\Generated_Source\PSoC4/MOTOR.c ****     *
 804:.\Generated_Source\PSoC4/MOTOR.c ****     * Return:
 805:.\Generated_Source\PSoC4/MOTOR.c ****     *  None.
 806:.\Generated_Source\PSoC4/MOTOR.c ****     *
 807:.\Generated_Source\PSoC4/MOTOR.c ****     * Global Variables:
 808:.\Generated_Source\PSoC4/MOTOR.c ****     *  MOTOR_rxAddressMode - the parameter stored in this variable for
 809:.\Generated_Source\PSoC4/MOTOR.c ****     *   the farther usage in RX ISR.
 810:.\Generated_Source\PSoC4/MOTOR.c ****     *  MOTOR_rxAddressDetected - set to initial state (0).
 811:.\Generated_Source\PSoC4/MOTOR.c ****     *
 812:.\Generated_Source\PSoC4/MOTOR.c ****     *******************************************************************************/
 813:.\Generated_Source\PSoC4/MOTOR.c ****     void MOTOR_SetRxAddressMode(uint8 addressMode)
 814:.\Generated_Source\PSoC4/MOTOR.c ****                                                         
 815:.\Generated_Source\PSoC4/MOTOR.c ****     {
 485              		.loc 1 815 0
 486              		.cfi_startproc
 487              	.LVL27:
 816:.\Generated_Source\PSoC4/MOTOR.c ****         #if(MOTOR_RXHW_ADDRESS_ENABLED)
 817:.\Generated_Source\PSoC4/MOTOR.c ****             #if(MOTOR_CONTROL_REG_REMOVED)
ARM GAS  C:\Users\HENRYA~1\AppData\Local\Temp\ccSeVATh.s 			page 24


 818:.\Generated_Source\PSoC4/MOTOR.c ****                 if(0u != addressMode)
 819:.\Generated_Source\PSoC4/MOTOR.c ****                 {
 820:.\Generated_Source\PSoC4/MOTOR.c ****                     /* Suppress compiler warning */
 821:.\Generated_Source\PSoC4/MOTOR.c ****                 }
 822:.\Generated_Source\PSoC4/MOTOR.c ****             #else /* MOTOR_CONTROL_REG_REMOVED */
 823:.\Generated_Source\PSoC4/MOTOR.c ****                 uint8 tmpCtrl;
 824:.\Generated_Source\PSoC4/MOTOR.c ****                 tmpCtrl = MOTOR_CONTROL_REG & (uint8)~MOTOR_CTRL_RXADDR_MODE_MASK;
 825:.\Generated_Source\PSoC4/MOTOR.c ****                 tmpCtrl |= (uint8)(addressMode << MOTOR_CTRL_RXADDR_MODE0_SHIFT);
 826:.\Generated_Source\PSoC4/MOTOR.c ****                 MOTOR_CONTROL_REG = tmpCtrl;
 827:.\Generated_Source\PSoC4/MOTOR.c **** 
 828:.\Generated_Source\PSoC4/MOTOR.c ****                 #if(MOTOR_RX_INTERRUPT_ENABLED && \
 829:.\Generated_Source\PSoC4/MOTOR.c ****                    (MOTOR_RXBUFFERSIZE > MOTOR_FIFO_LENGTH) )
 830:.\Generated_Source\PSoC4/MOTOR.c ****                     MOTOR_rxAddressMode = addressMode;
 831:.\Generated_Source\PSoC4/MOTOR.c ****                     MOTOR_rxAddressDetected = 0u;
 832:.\Generated_Source\PSoC4/MOTOR.c ****                 #endif /* End MOTOR_RXBUFFERSIZE > MOTOR_FIFO_LENGTH*/
 833:.\Generated_Source\PSoC4/MOTOR.c ****             #endif /* End MOTOR_CONTROL_REG_REMOVED */
 834:.\Generated_Source\PSoC4/MOTOR.c ****         #else /* MOTOR_RXHW_ADDRESS_ENABLED */
 835:.\Generated_Source\PSoC4/MOTOR.c ****             if(0u != addressMode)
 836:.\Generated_Source\PSoC4/MOTOR.c ****             {
 837:.\Generated_Source\PSoC4/MOTOR.c ****                 /* Suppress compiler warning */
 838:.\Generated_Source\PSoC4/MOTOR.c ****             }
 839:.\Generated_Source\PSoC4/MOTOR.c ****         #endif /* End MOTOR_RXHW_ADDRESS_ENABLED */
 840:.\Generated_Source\PSoC4/MOTOR.c ****     }
 488              		.loc 1 840 0
 489              		@ sp needed
 490 0000 7047     		bx	lr
 491              		.cfi_endproc
 492              	.LFE14:
 493              		.size	MOTOR_SetRxAddressMode, .-MOTOR_SetRxAddressMode
 494 0002 C046     		.section	.text.MOTOR_SetRxAddress1,"ax",%progbits
 495              		.align	2
 496              		.global	MOTOR_SetRxAddress1
 497              		.code	16
 498              		.thumb_func
 499              		.type	MOTOR_SetRxAddress1, %function
 500              	MOTOR_SetRxAddress1:
 501              	.LFB15:
 841:.\Generated_Source\PSoC4/MOTOR.c **** 
 842:.\Generated_Source\PSoC4/MOTOR.c **** 
 843:.\Generated_Source\PSoC4/MOTOR.c ****     /*******************************************************************************
 844:.\Generated_Source\PSoC4/MOTOR.c ****     * Function Name: MOTOR_SetRxAddress1
 845:.\Generated_Source\PSoC4/MOTOR.c ****     ********************************************************************************
 846:.\Generated_Source\PSoC4/MOTOR.c ****     *
 847:.\Generated_Source\PSoC4/MOTOR.c ****     * Summary:
 848:.\Generated_Source\PSoC4/MOTOR.c ****     *  Sets the first of two hardware-detectable receiver addresses.
 849:.\Generated_Source\PSoC4/MOTOR.c ****     *
 850:.\Generated_Source\PSoC4/MOTOR.c ****     * Parameters:
 851:.\Generated_Source\PSoC4/MOTOR.c ****     *  address: Address #1 for hardware address detection.
 852:.\Generated_Source\PSoC4/MOTOR.c ****     *
 853:.\Generated_Source\PSoC4/MOTOR.c ****     * Return:
 854:.\Generated_Source\PSoC4/MOTOR.c ****     *  None.
 855:.\Generated_Source\PSoC4/MOTOR.c ****     *
 856:.\Generated_Source\PSoC4/MOTOR.c ****     *******************************************************************************/
 857:.\Generated_Source\PSoC4/MOTOR.c ****     void MOTOR_SetRxAddress1(uint8 address) 
 858:.\Generated_Source\PSoC4/MOTOR.c ****     {
 502              		.loc 1 858 0
 503              		.cfi_startproc
ARM GAS  C:\Users\HENRYA~1\AppData\Local\Temp\ccSeVATh.s 			page 25


 504              	.LVL28:
 859:.\Generated_Source\PSoC4/MOTOR.c ****         MOTOR_RXADDRESS1_REG = address;
 505              		.loc 1 859 0
 506 0000 014B     		ldr	r3, .L42
 507 0002 1870     		strb	r0, [r3]
 860:.\Generated_Source\PSoC4/MOTOR.c ****     }
 508              		.loc 1 860 0
 509              		@ sp needed
 510 0004 7047     		bx	lr
 511              	.L43:
 512 0006 C046     		.align	2
 513              	.L42:
 514 0008 21000F40 		.word	1074724897
 515              		.cfi_endproc
 516              	.LFE15:
 517              		.size	MOTOR_SetRxAddress1, .-MOTOR_SetRxAddress1
 518              		.section	.text.MOTOR_SetRxAddress2,"ax",%progbits
 519              		.align	2
 520              		.global	MOTOR_SetRxAddress2
 521              		.code	16
 522              		.thumb_func
 523              		.type	MOTOR_SetRxAddress2, %function
 524              	MOTOR_SetRxAddress2:
 525              	.LFB16:
 861:.\Generated_Source\PSoC4/MOTOR.c **** 
 862:.\Generated_Source\PSoC4/MOTOR.c **** 
 863:.\Generated_Source\PSoC4/MOTOR.c ****     /*******************************************************************************
 864:.\Generated_Source\PSoC4/MOTOR.c ****     * Function Name: MOTOR_SetRxAddress2
 865:.\Generated_Source\PSoC4/MOTOR.c ****     ********************************************************************************
 866:.\Generated_Source\PSoC4/MOTOR.c ****     *
 867:.\Generated_Source\PSoC4/MOTOR.c ****     * Summary:
 868:.\Generated_Source\PSoC4/MOTOR.c ****     *  Sets the second of two hardware-detectable receiver addresses.
 869:.\Generated_Source\PSoC4/MOTOR.c ****     *
 870:.\Generated_Source\PSoC4/MOTOR.c ****     * Parameters:
 871:.\Generated_Source\PSoC4/MOTOR.c ****     *  address: Address #2 for hardware address detection.
 872:.\Generated_Source\PSoC4/MOTOR.c ****     *
 873:.\Generated_Source\PSoC4/MOTOR.c ****     * Return:
 874:.\Generated_Source\PSoC4/MOTOR.c ****     *  None.
 875:.\Generated_Source\PSoC4/MOTOR.c ****     *
 876:.\Generated_Source\PSoC4/MOTOR.c ****     *******************************************************************************/
 877:.\Generated_Source\PSoC4/MOTOR.c ****     void MOTOR_SetRxAddress2(uint8 address) 
 878:.\Generated_Source\PSoC4/MOTOR.c ****     {
 526              		.loc 1 878 0
 527              		.cfi_startproc
 528              	.LVL29:
 879:.\Generated_Source\PSoC4/MOTOR.c ****         MOTOR_RXADDRESS2_REG = address;
 529              		.loc 1 879 0
 530 0000 014B     		ldr	r3, .L45
 531 0002 1870     		strb	r0, [r3]
 880:.\Generated_Source\PSoC4/MOTOR.c ****     }
 532              		.loc 1 880 0
 533              		@ sp needed
 534 0004 7047     		bx	lr
 535              	.L46:
 536 0006 C046     		.align	2
 537              	.L45:
 538 0008 31000F40 		.word	1074724913
ARM GAS  C:\Users\HENRYA~1\AppData\Local\Temp\ccSeVATh.s 			page 26


 539              		.cfi_endproc
 540              	.LFE16:
 541              		.size	MOTOR_SetRxAddress2, .-MOTOR_SetRxAddress2
 542              		.section	.text.MOTOR_SetTxInterruptMode,"ax",%progbits
 543              		.align	2
 544              		.global	MOTOR_SetTxInterruptMode
 545              		.code	16
 546              		.thumb_func
 547              		.type	MOTOR_SetTxInterruptMode, %function
 548              	MOTOR_SetTxInterruptMode:
 549              	.LFB17:
 881:.\Generated_Source\PSoC4/MOTOR.c **** 
 882:.\Generated_Source\PSoC4/MOTOR.c **** #endif  /* MOTOR_RX_ENABLED || MOTOR_HD_ENABLED*/
 883:.\Generated_Source\PSoC4/MOTOR.c **** 
 884:.\Generated_Source\PSoC4/MOTOR.c **** 
 885:.\Generated_Source\PSoC4/MOTOR.c **** #if( (MOTOR_TX_ENABLED) || (MOTOR_HD_ENABLED) )
 886:.\Generated_Source\PSoC4/MOTOR.c ****     /*******************************************************************************
 887:.\Generated_Source\PSoC4/MOTOR.c ****     * Function Name: MOTOR_SetTxInterruptMode
 888:.\Generated_Source\PSoC4/MOTOR.c ****     ********************************************************************************
 889:.\Generated_Source\PSoC4/MOTOR.c ****     *
 890:.\Generated_Source\PSoC4/MOTOR.c ****     * Summary:
 891:.\Generated_Source\PSoC4/MOTOR.c ****     *  Configures the TX interrupt sources to be enabled, but does not enable the
 892:.\Generated_Source\PSoC4/MOTOR.c ****     *  interrupt.
 893:.\Generated_Source\PSoC4/MOTOR.c ****     *
 894:.\Generated_Source\PSoC4/MOTOR.c ****     * Parameters:
 895:.\Generated_Source\PSoC4/MOTOR.c ****     *  intSrc: Bit field containing the TX interrupt sources to enable
 896:.\Generated_Source\PSoC4/MOTOR.c ****     *   MOTOR_TX_STS_COMPLETE        Interrupt on TX byte complete
 897:.\Generated_Source\PSoC4/MOTOR.c ****     *   MOTOR_TX_STS_FIFO_EMPTY      Interrupt when TX FIFO is empty
 898:.\Generated_Source\PSoC4/MOTOR.c ****     *   MOTOR_TX_STS_FIFO_FULL       Interrupt when TX FIFO is full
 899:.\Generated_Source\PSoC4/MOTOR.c ****     *   MOTOR_TX_STS_FIFO_NOT_FULL   Interrupt when TX FIFO is not full
 900:.\Generated_Source\PSoC4/MOTOR.c ****     *
 901:.\Generated_Source\PSoC4/MOTOR.c ****     * Return:
 902:.\Generated_Source\PSoC4/MOTOR.c ****     *  None.
 903:.\Generated_Source\PSoC4/MOTOR.c ****     *
 904:.\Generated_Source\PSoC4/MOTOR.c ****     * Theory:
 905:.\Generated_Source\PSoC4/MOTOR.c ****     *  Enables the output of specific status bits to the interrupt controller
 906:.\Generated_Source\PSoC4/MOTOR.c ****     *
 907:.\Generated_Source\PSoC4/MOTOR.c ****     *******************************************************************************/
 908:.\Generated_Source\PSoC4/MOTOR.c ****     void MOTOR_SetTxInterruptMode(uint8 intSrc) 
 909:.\Generated_Source\PSoC4/MOTOR.c ****     {
 550              		.loc 1 909 0
 551              		.cfi_startproc
 552              	.LVL30:
 910:.\Generated_Source\PSoC4/MOTOR.c ****         MOTOR_TXSTATUS_MASK_REG = intSrc;
 553              		.loc 1 910 0
 554 0000 014B     		ldr	r3, .L48
 555 0002 1870     		strb	r0, [r3]
 911:.\Generated_Source\PSoC4/MOTOR.c ****     }
 556              		.loc 1 911 0
 557              		@ sp needed
 558 0004 7047     		bx	lr
 559              	.L49:
 560 0006 C046     		.align	2
 561              	.L48:
 562 0008 82000F40 		.word	1074724994
 563              		.cfi_endproc
 564              	.LFE17:
ARM GAS  C:\Users\HENRYA~1\AppData\Local\Temp\ccSeVATh.s 			page 27


 565              		.size	MOTOR_SetTxInterruptMode, .-MOTOR_SetTxInterruptMode
 566              		.section	.text.MOTOR_WriteTxData,"ax",%progbits
 567              		.align	2
 568              		.global	MOTOR_WriteTxData
 569              		.code	16
 570              		.thumb_func
 571              		.type	MOTOR_WriteTxData, %function
 572              	MOTOR_WriteTxData:
 573              	.LFB18:
 912:.\Generated_Source\PSoC4/MOTOR.c **** 
 913:.\Generated_Source\PSoC4/MOTOR.c **** 
 914:.\Generated_Source\PSoC4/MOTOR.c ****     /*******************************************************************************
 915:.\Generated_Source\PSoC4/MOTOR.c ****     * Function Name: MOTOR_WriteTxData
 916:.\Generated_Source\PSoC4/MOTOR.c ****     ********************************************************************************
 917:.\Generated_Source\PSoC4/MOTOR.c ****     *
 918:.\Generated_Source\PSoC4/MOTOR.c ****     * Summary:
 919:.\Generated_Source\PSoC4/MOTOR.c ****     *  Places a byte of data into the transmit buffer to be sent when the bus is
 920:.\Generated_Source\PSoC4/MOTOR.c ****     *  available without checking the TX status register. You must check status
 921:.\Generated_Source\PSoC4/MOTOR.c ****     *  separately.
 922:.\Generated_Source\PSoC4/MOTOR.c ****     *
 923:.\Generated_Source\PSoC4/MOTOR.c ****     * Parameters:
 924:.\Generated_Source\PSoC4/MOTOR.c ****     *  txDataByte: data byte
 925:.\Generated_Source\PSoC4/MOTOR.c ****     *
 926:.\Generated_Source\PSoC4/MOTOR.c ****     * Return:
 927:.\Generated_Source\PSoC4/MOTOR.c ****     * None.
 928:.\Generated_Source\PSoC4/MOTOR.c ****     *
 929:.\Generated_Source\PSoC4/MOTOR.c ****     * Global Variables:
 930:.\Generated_Source\PSoC4/MOTOR.c ****     *  MOTOR_txBuffer - RAM buffer pointer for save data for transmission
 931:.\Generated_Source\PSoC4/MOTOR.c ****     *  MOTOR_txBufferWrite - cyclic index for write to txBuffer,
 932:.\Generated_Source\PSoC4/MOTOR.c ****     *    incremented after each byte saved to buffer.
 933:.\Generated_Source\PSoC4/MOTOR.c ****     *  MOTOR_txBufferRead - cyclic index for read from txBuffer,
 934:.\Generated_Source\PSoC4/MOTOR.c ****     *    checked to identify the condition to write to FIFO directly or to TX buffer
 935:.\Generated_Source\PSoC4/MOTOR.c ****     *  MOTOR_initVar - checked to identify that the component has been
 936:.\Generated_Source\PSoC4/MOTOR.c ****     *    initialized.
 937:.\Generated_Source\PSoC4/MOTOR.c ****     *
 938:.\Generated_Source\PSoC4/MOTOR.c ****     * Reentrant:
 939:.\Generated_Source\PSoC4/MOTOR.c ****     *  No.
 940:.\Generated_Source\PSoC4/MOTOR.c ****     *
 941:.\Generated_Source\PSoC4/MOTOR.c ****     *******************************************************************************/
 942:.\Generated_Source\PSoC4/MOTOR.c ****     void MOTOR_WriteTxData(uint8 txDataByte) 
 943:.\Generated_Source\PSoC4/MOTOR.c ****     {
 574              		.loc 1 943 0
 575              		.cfi_startproc
 576              	.LVL31:
 944:.\Generated_Source\PSoC4/MOTOR.c ****         /* If not Initialized then skip this function*/
 945:.\Generated_Source\PSoC4/MOTOR.c ****         if(MOTOR_initVar != 0u)
 577              		.loc 1 945 0
 578 0000 034B     		ldr	r3, .L52
 579 0002 1B78     		ldrb	r3, [r3]
 580 0004 002B     		cmp	r3, #0
 581 0006 01D0     		beq	.L50
 946:.\Generated_Source\PSoC4/MOTOR.c ****         {
 947:.\Generated_Source\PSoC4/MOTOR.c ****         #if (MOTOR_TX_INTERRUPT_ENABLED)
 948:.\Generated_Source\PSoC4/MOTOR.c **** 
 949:.\Generated_Source\PSoC4/MOTOR.c ****             /* Protect variables that could change on interrupt. */
 950:.\Generated_Source\PSoC4/MOTOR.c ****             MOTOR_DisableTxInt();
 951:.\Generated_Source\PSoC4/MOTOR.c **** 
ARM GAS  C:\Users\HENRYA~1\AppData\Local\Temp\ccSeVATh.s 			page 28


 952:.\Generated_Source\PSoC4/MOTOR.c ****             if( (MOTOR_txBufferRead == MOTOR_txBufferWrite) &&
 953:.\Generated_Source\PSoC4/MOTOR.c ****                 ((MOTOR_TXSTATUS_REG & MOTOR_TX_STS_FIFO_FULL) == 0u) )
 954:.\Generated_Source\PSoC4/MOTOR.c ****             {
 955:.\Generated_Source\PSoC4/MOTOR.c ****                 /* Add directly to the FIFO. */
 956:.\Generated_Source\PSoC4/MOTOR.c ****                 MOTOR_TXDATA_REG = txDataByte;
 957:.\Generated_Source\PSoC4/MOTOR.c ****             }
 958:.\Generated_Source\PSoC4/MOTOR.c ****             else
 959:.\Generated_Source\PSoC4/MOTOR.c ****             {
 960:.\Generated_Source\PSoC4/MOTOR.c ****                 if(MOTOR_txBufferWrite >= MOTOR_TX_BUFFER_SIZE)
 961:.\Generated_Source\PSoC4/MOTOR.c ****                 {
 962:.\Generated_Source\PSoC4/MOTOR.c ****                     MOTOR_txBufferWrite = 0u;
 963:.\Generated_Source\PSoC4/MOTOR.c ****                 }
 964:.\Generated_Source\PSoC4/MOTOR.c **** 
 965:.\Generated_Source\PSoC4/MOTOR.c ****                 MOTOR_txBuffer[MOTOR_txBufferWrite] = txDataByte;
 966:.\Generated_Source\PSoC4/MOTOR.c **** 
 967:.\Generated_Source\PSoC4/MOTOR.c ****                 /* Add to the software buffer. */
 968:.\Generated_Source\PSoC4/MOTOR.c ****                 MOTOR_txBufferWrite++;
 969:.\Generated_Source\PSoC4/MOTOR.c ****             }
 970:.\Generated_Source\PSoC4/MOTOR.c **** 
 971:.\Generated_Source\PSoC4/MOTOR.c ****             MOTOR_EnableTxInt();
 972:.\Generated_Source\PSoC4/MOTOR.c **** 
 973:.\Generated_Source\PSoC4/MOTOR.c ****         #else
 974:.\Generated_Source\PSoC4/MOTOR.c **** 
 975:.\Generated_Source\PSoC4/MOTOR.c ****             /* Add directly to the FIFO. */
 976:.\Generated_Source\PSoC4/MOTOR.c ****             MOTOR_TXDATA_REG = txDataByte;
 582              		.loc 1 976 0
 583 0008 024B     		ldr	r3, .L52+4
 584 000a 1870     		strb	r0, [r3]
 585              	.L50:
 977:.\Generated_Source\PSoC4/MOTOR.c **** 
 978:.\Generated_Source\PSoC4/MOTOR.c ****         #endif /*(MOTOR_TX_INTERRUPT_ENABLED) */
 979:.\Generated_Source\PSoC4/MOTOR.c ****         }
 980:.\Generated_Source\PSoC4/MOTOR.c ****     }
 586              		.loc 1 980 0
 587              		@ sp needed
 588 000c 7047     		bx	lr
 589              	.L53:
 590 000e C046     		.align	2
 591              	.L52:
 592 0010 00000000 		.word	.LANCHOR0
 593 0014 42000F40 		.word	1074724930
 594              		.cfi_endproc
 595              	.LFE18:
 596              		.size	MOTOR_WriteTxData, .-MOTOR_WriteTxData
 597              		.section	.text.MOTOR_ReadTxStatus,"ax",%progbits
 598              		.align	2
 599              		.global	MOTOR_ReadTxStatus
 600              		.code	16
 601              		.thumb_func
 602              		.type	MOTOR_ReadTxStatus, %function
 603              	MOTOR_ReadTxStatus:
 604              	.LFB19:
 981:.\Generated_Source\PSoC4/MOTOR.c **** 
 982:.\Generated_Source\PSoC4/MOTOR.c **** 
 983:.\Generated_Source\PSoC4/MOTOR.c ****     /*******************************************************************************
 984:.\Generated_Source\PSoC4/MOTOR.c ****     * Function Name: MOTOR_ReadTxStatus
 985:.\Generated_Source\PSoC4/MOTOR.c ****     ********************************************************************************
ARM GAS  C:\Users\HENRYA~1\AppData\Local\Temp\ccSeVATh.s 			page 29


 986:.\Generated_Source\PSoC4/MOTOR.c ****     *
 987:.\Generated_Source\PSoC4/MOTOR.c ****     * Summary:
 988:.\Generated_Source\PSoC4/MOTOR.c ****     *  Reads the status register for the TX portion of the UART.
 989:.\Generated_Source\PSoC4/MOTOR.c ****     *
 990:.\Generated_Source\PSoC4/MOTOR.c ****     * Parameters:
 991:.\Generated_Source\PSoC4/MOTOR.c ****     *  None.
 992:.\Generated_Source\PSoC4/MOTOR.c ****     *
 993:.\Generated_Source\PSoC4/MOTOR.c ****     * Return:
 994:.\Generated_Source\PSoC4/MOTOR.c ****     *  Contents of the status register
 995:.\Generated_Source\PSoC4/MOTOR.c ****     *
 996:.\Generated_Source\PSoC4/MOTOR.c ****     * Theory:
 997:.\Generated_Source\PSoC4/MOTOR.c ****     *  This function reads the TX status register, which is cleared on read.
 998:.\Generated_Source\PSoC4/MOTOR.c ****     *  It is up to the user to handle all bits in this return value accordingly,
 999:.\Generated_Source\PSoC4/MOTOR.c ****     *  even if the bit was not enabled as an interrupt source the event happened
1000:.\Generated_Source\PSoC4/MOTOR.c ****     *  and must be handled accordingly.
1001:.\Generated_Source\PSoC4/MOTOR.c ****     *
1002:.\Generated_Source\PSoC4/MOTOR.c ****     *******************************************************************************/
1003:.\Generated_Source\PSoC4/MOTOR.c ****     uint8 MOTOR_ReadTxStatus(void) 
1004:.\Generated_Source\PSoC4/MOTOR.c ****     {
 605              		.loc 1 1004 0
 606              		.cfi_startproc
1005:.\Generated_Source\PSoC4/MOTOR.c ****         return(MOTOR_TXSTATUS_REG);
 607              		.loc 1 1005 0
 608 0000 014B     		ldr	r3, .L55
 609 0002 1878     		ldrb	r0, [r3]
 610 0004 C0B2     		uxtb	r0, r0
1006:.\Generated_Source\PSoC4/MOTOR.c ****     }
 611              		.loc 1 1006 0
 612              		@ sp needed
 613 0006 7047     		bx	lr
 614              	.L56:
 615              		.align	2
 616              	.L55:
 617 0008 62000F40 		.word	1074724962
 618              		.cfi_endproc
 619              	.LFE19:
 620              		.size	MOTOR_ReadTxStatus, .-MOTOR_ReadTxStatus
 621              		.section	.text.MOTOR_PutChar,"ax",%progbits
 622              		.align	2
 623              		.global	MOTOR_PutChar
 624              		.code	16
 625              		.thumb_func
 626              		.type	MOTOR_PutChar, %function
 627              	MOTOR_PutChar:
 628              	.LFB20:
1007:.\Generated_Source\PSoC4/MOTOR.c **** 
1008:.\Generated_Source\PSoC4/MOTOR.c **** 
1009:.\Generated_Source\PSoC4/MOTOR.c ****     /*******************************************************************************
1010:.\Generated_Source\PSoC4/MOTOR.c ****     * Function Name: MOTOR_PutChar
1011:.\Generated_Source\PSoC4/MOTOR.c ****     ********************************************************************************
1012:.\Generated_Source\PSoC4/MOTOR.c ****     *
1013:.\Generated_Source\PSoC4/MOTOR.c ****     * Summary:
1014:.\Generated_Source\PSoC4/MOTOR.c ****     *  Puts a byte of data into the transmit buffer to be sent when the bus is
1015:.\Generated_Source\PSoC4/MOTOR.c ****     *  available. This is a blocking API that waits until the TX buffer has room to
1016:.\Generated_Source\PSoC4/MOTOR.c ****     *  hold the data.
1017:.\Generated_Source\PSoC4/MOTOR.c ****     *
1018:.\Generated_Source\PSoC4/MOTOR.c ****     * Parameters:
ARM GAS  C:\Users\HENRYA~1\AppData\Local\Temp\ccSeVATh.s 			page 30


1019:.\Generated_Source\PSoC4/MOTOR.c ****     *  txDataByte: Byte containing the data to transmit
1020:.\Generated_Source\PSoC4/MOTOR.c ****     *
1021:.\Generated_Source\PSoC4/MOTOR.c ****     * Return:
1022:.\Generated_Source\PSoC4/MOTOR.c ****     *  None.
1023:.\Generated_Source\PSoC4/MOTOR.c ****     *
1024:.\Generated_Source\PSoC4/MOTOR.c ****     * Global Variables:
1025:.\Generated_Source\PSoC4/MOTOR.c ****     *  MOTOR_txBuffer - RAM buffer pointer for save data for transmission
1026:.\Generated_Source\PSoC4/MOTOR.c ****     *  MOTOR_txBufferWrite - cyclic index for write to txBuffer,
1027:.\Generated_Source\PSoC4/MOTOR.c ****     *     checked to identify free space in txBuffer and incremented after each byte
1028:.\Generated_Source\PSoC4/MOTOR.c ****     *     saved to buffer.
1029:.\Generated_Source\PSoC4/MOTOR.c ****     *  MOTOR_txBufferRead - cyclic index for read from txBuffer,
1030:.\Generated_Source\PSoC4/MOTOR.c ****     *     checked to identify free space in txBuffer.
1031:.\Generated_Source\PSoC4/MOTOR.c ****     *  MOTOR_initVar - checked to identify that the component has been
1032:.\Generated_Source\PSoC4/MOTOR.c ****     *     initialized.
1033:.\Generated_Source\PSoC4/MOTOR.c ****     *
1034:.\Generated_Source\PSoC4/MOTOR.c ****     * Reentrant:
1035:.\Generated_Source\PSoC4/MOTOR.c ****     *  No.
1036:.\Generated_Source\PSoC4/MOTOR.c ****     *
1037:.\Generated_Source\PSoC4/MOTOR.c ****     * Theory:
1038:.\Generated_Source\PSoC4/MOTOR.c ****     *  Allows the user to transmit any byte of data in a single transfer
1039:.\Generated_Source\PSoC4/MOTOR.c ****     *
1040:.\Generated_Source\PSoC4/MOTOR.c ****     *******************************************************************************/
1041:.\Generated_Source\PSoC4/MOTOR.c ****     void MOTOR_PutChar(uint8 txDataByte) 
1042:.\Generated_Source\PSoC4/MOTOR.c ****     {
 629              		.loc 1 1042 0
 630              		.cfi_startproc
 631              	.LVL32:
 632              	.L58:
1043:.\Generated_Source\PSoC4/MOTOR.c ****     #if (MOTOR_TX_INTERRUPT_ENABLED)
1044:.\Generated_Source\PSoC4/MOTOR.c ****         /* The temporary output pointer is used since it takes two instructions
1045:.\Generated_Source\PSoC4/MOTOR.c ****         *  to increment with a wrap, and we can't risk doing that with the real
1046:.\Generated_Source\PSoC4/MOTOR.c ****         *  pointer and getting an interrupt in between instructions.
1047:.\Generated_Source\PSoC4/MOTOR.c ****         */
1048:.\Generated_Source\PSoC4/MOTOR.c ****         uint8 locTxBufferWrite;
1049:.\Generated_Source\PSoC4/MOTOR.c ****         uint8 locTxBufferRead;
1050:.\Generated_Source\PSoC4/MOTOR.c **** 
1051:.\Generated_Source\PSoC4/MOTOR.c ****         do
1052:.\Generated_Source\PSoC4/MOTOR.c ****         { /* Block if software buffer is full, so we don't overwrite. */
1053:.\Generated_Source\PSoC4/MOTOR.c **** 
1054:.\Generated_Source\PSoC4/MOTOR.c ****         #if ((MOTOR_TX_BUFFER_SIZE > MOTOR_MAX_BYTE_VALUE) && (CY_PSOC3))
1055:.\Generated_Source\PSoC4/MOTOR.c ****             /* Disable TX interrupt to protect variables from modification */
1056:.\Generated_Source\PSoC4/MOTOR.c ****             MOTOR_DisableTxInt();
1057:.\Generated_Source\PSoC4/MOTOR.c ****         #endif /* (MOTOR_TX_BUFFER_SIZE > MOTOR_MAX_BYTE_VALUE) && (CY_PSOC3) */
1058:.\Generated_Source\PSoC4/MOTOR.c **** 
1059:.\Generated_Source\PSoC4/MOTOR.c ****             locTxBufferWrite = MOTOR_txBufferWrite;
1060:.\Generated_Source\PSoC4/MOTOR.c ****             locTxBufferRead  = MOTOR_txBufferRead;
1061:.\Generated_Source\PSoC4/MOTOR.c **** 
1062:.\Generated_Source\PSoC4/MOTOR.c ****         #if ((MOTOR_TX_BUFFER_SIZE > MOTOR_MAX_BYTE_VALUE) && (CY_PSOC3))
1063:.\Generated_Source\PSoC4/MOTOR.c ****             /* Enable interrupt to continue transmission */
1064:.\Generated_Source\PSoC4/MOTOR.c ****             MOTOR_EnableTxInt();
1065:.\Generated_Source\PSoC4/MOTOR.c ****         #endif /* (MOTOR_TX_BUFFER_SIZE > MOTOR_MAX_BYTE_VALUE) && (CY_PSOC3) */
1066:.\Generated_Source\PSoC4/MOTOR.c ****         }
1067:.\Generated_Source\PSoC4/MOTOR.c ****         while( (locTxBufferWrite < locTxBufferRead) ? (locTxBufferWrite == (locTxBufferRead - 1u)) 
1068:.\Generated_Source\PSoC4/MOTOR.c ****                                 ((locTxBufferWrite - locTxBufferRead) ==
1069:.\Generated_Source\PSoC4/MOTOR.c ****                                 (uint8)(MOTOR_TX_BUFFER_SIZE - 1u)) );
1070:.\Generated_Source\PSoC4/MOTOR.c **** 
1071:.\Generated_Source\PSoC4/MOTOR.c ****         if( (locTxBufferRead == locTxBufferWrite) &&
ARM GAS  C:\Users\HENRYA~1\AppData\Local\Temp\ccSeVATh.s 			page 31


1072:.\Generated_Source\PSoC4/MOTOR.c ****             ((MOTOR_TXSTATUS_REG & MOTOR_TX_STS_FIFO_FULL) == 0u) )
1073:.\Generated_Source\PSoC4/MOTOR.c ****         {
1074:.\Generated_Source\PSoC4/MOTOR.c ****             /* Add directly to the FIFO */
1075:.\Generated_Source\PSoC4/MOTOR.c ****             MOTOR_TXDATA_REG = txDataByte;
1076:.\Generated_Source\PSoC4/MOTOR.c ****         }
1077:.\Generated_Source\PSoC4/MOTOR.c ****         else
1078:.\Generated_Source\PSoC4/MOTOR.c ****         {
1079:.\Generated_Source\PSoC4/MOTOR.c ****             if(locTxBufferWrite >= MOTOR_TX_BUFFER_SIZE)
1080:.\Generated_Source\PSoC4/MOTOR.c ****             {
1081:.\Generated_Source\PSoC4/MOTOR.c ****                 locTxBufferWrite = 0u;
1082:.\Generated_Source\PSoC4/MOTOR.c ****             }
1083:.\Generated_Source\PSoC4/MOTOR.c ****             /* Add to the software buffer. */
1084:.\Generated_Source\PSoC4/MOTOR.c ****             MOTOR_txBuffer[locTxBufferWrite] = txDataByte;
1085:.\Generated_Source\PSoC4/MOTOR.c ****             locTxBufferWrite++;
1086:.\Generated_Source\PSoC4/MOTOR.c **** 
1087:.\Generated_Source\PSoC4/MOTOR.c ****             /* Finally, update the real output pointer */
1088:.\Generated_Source\PSoC4/MOTOR.c ****         #if ((MOTOR_TX_BUFFER_SIZE > MOTOR_MAX_BYTE_VALUE) && (CY_PSOC3))
1089:.\Generated_Source\PSoC4/MOTOR.c ****             MOTOR_DisableTxInt();
1090:.\Generated_Source\PSoC4/MOTOR.c ****         #endif /* (MOTOR_TX_BUFFER_SIZE > MOTOR_MAX_BYTE_VALUE) && (CY_PSOC3) */
1091:.\Generated_Source\PSoC4/MOTOR.c **** 
1092:.\Generated_Source\PSoC4/MOTOR.c ****             MOTOR_txBufferWrite = locTxBufferWrite;
1093:.\Generated_Source\PSoC4/MOTOR.c **** 
1094:.\Generated_Source\PSoC4/MOTOR.c ****         #if ((MOTOR_TX_BUFFER_SIZE > MOTOR_MAX_BYTE_VALUE) && (CY_PSOC3))
1095:.\Generated_Source\PSoC4/MOTOR.c ****             MOTOR_EnableTxInt();
1096:.\Generated_Source\PSoC4/MOTOR.c ****         #endif /* (MOTOR_TX_BUFFER_SIZE > MOTOR_MAX_BYTE_VALUE) && (CY_PSOC3) */
1097:.\Generated_Source\PSoC4/MOTOR.c **** 
1098:.\Generated_Source\PSoC4/MOTOR.c ****             if(0u != (MOTOR_TXSTATUS_REG & MOTOR_TX_STS_FIFO_EMPTY))
1099:.\Generated_Source\PSoC4/MOTOR.c ****             {
1100:.\Generated_Source\PSoC4/MOTOR.c ****                 /* Trigger TX interrupt to send software buffer */
1101:.\Generated_Source\PSoC4/MOTOR.c ****                 MOTOR_SetPendingTxInt();
1102:.\Generated_Source\PSoC4/MOTOR.c ****             }
1103:.\Generated_Source\PSoC4/MOTOR.c ****         }
1104:.\Generated_Source\PSoC4/MOTOR.c **** 
1105:.\Generated_Source\PSoC4/MOTOR.c ****     #else
1106:.\Generated_Source\PSoC4/MOTOR.c **** 
1107:.\Generated_Source\PSoC4/MOTOR.c ****         while((MOTOR_TXSTATUS_REG & MOTOR_TX_STS_FIFO_FULL) != 0u)
 633              		.loc 1 1107 0 discriminator 1
 634 0000 034B     		ldr	r3, .L59
 635 0002 1B78     		ldrb	r3, [r3]
 636 0004 5B07     		lsl	r3, r3, #29
 637 0006 FBD4     		bmi	.L58
1108:.\Generated_Source\PSoC4/MOTOR.c ****         {
1109:.\Generated_Source\PSoC4/MOTOR.c ****             /* Wait for room in the FIFO */
1110:.\Generated_Source\PSoC4/MOTOR.c ****         }
1111:.\Generated_Source\PSoC4/MOTOR.c **** 
1112:.\Generated_Source\PSoC4/MOTOR.c ****         /* Add directly to the FIFO */
1113:.\Generated_Source\PSoC4/MOTOR.c ****         MOTOR_TXDATA_REG = txDataByte;
 638              		.loc 1 1113 0
 639 0008 024B     		ldr	r3, .L59+4
 640 000a 1870     		strb	r0, [r3]
1114:.\Generated_Source\PSoC4/MOTOR.c **** 
1115:.\Generated_Source\PSoC4/MOTOR.c ****     #endif /* MOTOR_TX_INTERRUPT_ENABLED */
1116:.\Generated_Source\PSoC4/MOTOR.c ****     }
 641              		.loc 1 1116 0
 642              		@ sp needed
 643 000c 7047     		bx	lr
 644              	.L60:
ARM GAS  C:\Users\HENRYA~1\AppData\Local\Temp\ccSeVATh.s 			page 32


 645 000e C046     		.align	2
 646              	.L59:
 647 0010 62000F40 		.word	1074724962
 648 0014 42000F40 		.word	1074724930
 649              		.cfi_endproc
 650              	.LFE20:
 651              		.size	MOTOR_PutChar, .-MOTOR_PutChar
 652              		.section	.text.MOTOR_PutString,"ax",%progbits
 653              		.align	2
 654              		.global	MOTOR_PutString
 655              		.code	16
 656              		.thumb_func
 657              		.type	MOTOR_PutString, %function
 658              	MOTOR_PutString:
 659              	.LFB21:
1117:.\Generated_Source\PSoC4/MOTOR.c **** 
1118:.\Generated_Source\PSoC4/MOTOR.c **** 
1119:.\Generated_Source\PSoC4/MOTOR.c ****     /*******************************************************************************
1120:.\Generated_Source\PSoC4/MOTOR.c ****     * Function Name: MOTOR_PutString
1121:.\Generated_Source\PSoC4/MOTOR.c ****     ********************************************************************************
1122:.\Generated_Source\PSoC4/MOTOR.c ****     *
1123:.\Generated_Source\PSoC4/MOTOR.c ****     * Summary:
1124:.\Generated_Source\PSoC4/MOTOR.c ****     *  Sends a NULL terminated string to the TX buffer for transmission.
1125:.\Generated_Source\PSoC4/MOTOR.c ****     *
1126:.\Generated_Source\PSoC4/MOTOR.c ****     * Parameters:
1127:.\Generated_Source\PSoC4/MOTOR.c ****     *  string[]: Pointer to the null terminated string array residing in RAM or ROM
1128:.\Generated_Source\PSoC4/MOTOR.c ****     *
1129:.\Generated_Source\PSoC4/MOTOR.c ****     * Return:
1130:.\Generated_Source\PSoC4/MOTOR.c ****     *  None.
1131:.\Generated_Source\PSoC4/MOTOR.c ****     *
1132:.\Generated_Source\PSoC4/MOTOR.c ****     * Global Variables:
1133:.\Generated_Source\PSoC4/MOTOR.c ****     *  MOTOR_initVar - checked to identify that the component has been
1134:.\Generated_Source\PSoC4/MOTOR.c ****     *     initialized.
1135:.\Generated_Source\PSoC4/MOTOR.c ****     *
1136:.\Generated_Source\PSoC4/MOTOR.c ****     * Reentrant:
1137:.\Generated_Source\PSoC4/MOTOR.c ****     *  No.
1138:.\Generated_Source\PSoC4/MOTOR.c ****     *
1139:.\Generated_Source\PSoC4/MOTOR.c ****     * Theory:
1140:.\Generated_Source\PSoC4/MOTOR.c ****     *  If there is not enough memory in the TX buffer for the entire string, this
1141:.\Generated_Source\PSoC4/MOTOR.c ****     *  function blocks until the last character of the string is loaded into the
1142:.\Generated_Source\PSoC4/MOTOR.c ****     *  TX buffer.
1143:.\Generated_Source\PSoC4/MOTOR.c ****     *
1144:.\Generated_Source\PSoC4/MOTOR.c ****     *******************************************************************************/
1145:.\Generated_Source\PSoC4/MOTOR.c ****     void MOTOR_PutString(const char8 string[]) 
1146:.\Generated_Source\PSoC4/MOTOR.c ****     {
 660              		.loc 1 1146 0
 661              		.cfi_startproc
 662              	.LVL33:
 663 0000 38B5     		push	{r3, r4, r5, lr}
 664              		.cfi_def_cfa_offset 16
 665              		.cfi_offset 3, -16
 666              		.cfi_offset 4, -12
 667              		.cfi_offset 5, -8
 668              		.cfi_offset 14, -4
 669              	.LVL34:
1147:.\Generated_Source\PSoC4/MOTOR.c ****         uint16 bufIndex = 0u;
1148:.\Generated_Source\PSoC4/MOTOR.c **** 
ARM GAS  C:\Users\HENRYA~1\AppData\Local\Temp\ccSeVATh.s 			page 33


1149:.\Generated_Source\PSoC4/MOTOR.c ****         /* If not Initialized then skip this function */
1150:.\Generated_Source\PSoC4/MOTOR.c ****         if(MOTOR_initVar != 0u)
 670              		.loc 1 1150 0
 671 0002 084B     		ldr	r3, .L66
 672 0004 1B78     		ldrb	r3, [r3]
 673 0006 002B     		cmp	r3, #0
 674 0008 05D1     		bne	.L65
 675 000a 09E0     		b	.L61
 676              	.LVL35:
 677              	.L64:
1151:.\Generated_Source\PSoC4/MOTOR.c ****         {
1152:.\Generated_Source\PSoC4/MOTOR.c ****             /* This is a blocking function, it will not exit until all data is sent */
1153:.\Generated_Source\PSoC4/MOTOR.c ****             while(string[bufIndex] != (char8) 0)
1154:.\Generated_Source\PSoC4/MOTOR.c ****             {
1155:.\Generated_Source\PSoC4/MOTOR.c ****                 MOTOR_PutChar((uint8)string[bufIndex]);
 678              		.loc 1 1155 0
 679 000c FFF7FEFF 		bl	MOTOR_PutChar
 680              	.LVL36:
1156:.\Generated_Source\PSoC4/MOTOR.c ****                 bufIndex++;
 681              		.loc 1 1156 0
 682 0010 0134     		add	r4, r4, #1
 683              	.LVL37:
 684 0012 A4B2     		uxth	r4, r4
 685              	.LVL38:
 686 0014 01E0     		b	.L62
 687              	.LVL39:
 688              	.L65:
 689 0016 051C     		mov	r5, r0
 690 0018 0024     		mov	r4, #0
 691              	.LVL40:
 692              	.L62:
1153:.\Generated_Source\PSoC4/MOTOR.c ****             {
 693              		.loc 1 1153 0
 694 001a 285D     		ldrb	r0, [r5, r4]
 695 001c 0028     		cmp	r0, #0
 696 001e F5D1     		bne	.L64
 697              	.LVL41:
 698              	.L61:
1157:.\Generated_Source\PSoC4/MOTOR.c ****             }
1158:.\Generated_Source\PSoC4/MOTOR.c ****         }
1159:.\Generated_Source\PSoC4/MOTOR.c ****     }
 699              		.loc 1 1159 0
 700              		@ sp needed
 701 0020 38BD     		pop	{r3, r4, r5, pc}
 702              	.L67:
 703 0022 C046     		.align	2
 704              	.L66:
 705 0024 00000000 		.word	.LANCHOR0
 706              		.cfi_endproc
 707              	.LFE21:
 708              		.size	MOTOR_PutString, .-MOTOR_PutString
 709              		.section	.text.MOTOR_PutArray,"ax",%progbits
 710              		.align	2
 711              		.global	MOTOR_PutArray
 712              		.code	16
 713              		.thumb_func
 714              		.type	MOTOR_PutArray, %function
ARM GAS  C:\Users\HENRYA~1\AppData\Local\Temp\ccSeVATh.s 			page 34


 715              	MOTOR_PutArray:
 716              	.LFB22:
1160:.\Generated_Source\PSoC4/MOTOR.c **** 
1161:.\Generated_Source\PSoC4/MOTOR.c **** 
1162:.\Generated_Source\PSoC4/MOTOR.c ****     /*******************************************************************************
1163:.\Generated_Source\PSoC4/MOTOR.c ****     * Function Name: MOTOR_PutArray
1164:.\Generated_Source\PSoC4/MOTOR.c ****     ********************************************************************************
1165:.\Generated_Source\PSoC4/MOTOR.c ****     *
1166:.\Generated_Source\PSoC4/MOTOR.c ****     * Summary:
1167:.\Generated_Source\PSoC4/MOTOR.c ****     *  Places N bytes of data from a memory array into the TX buffer for
1168:.\Generated_Source\PSoC4/MOTOR.c ****     *  transmission.
1169:.\Generated_Source\PSoC4/MOTOR.c ****     *
1170:.\Generated_Source\PSoC4/MOTOR.c ****     * Parameters:
1171:.\Generated_Source\PSoC4/MOTOR.c ****     *  string[]: Address of the memory array residing in RAM or ROM.
1172:.\Generated_Source\PSoC4/MOTOR.c ****     *  byteCount: Number of bytes to be transmitted. The type depends on TX Buffer
1173:.\Generated_Source\PSoC4/MOTOR.c ****     *             Size parameter.
1174:.\Generated_Source\PSoC4/MOTOR.c ****     *
1175:.\Generated_Source\PSoC4/MOTOR.c ****     * Return:
1176:.\Generated_Source\PSoC4/MOTOR.c ****     *  None.
1177:.\Generated_Source\PSoC4/MOTOR.c ****     *
1178:.\Generated_Source\PSoC4/MOTOR.c ****     * Global Variables:
1179:.\Generated_Source\PSoC4/MOTOR.c ****     *  MOTOR_initVar - checked to identify that the component has been
1180:.\Generated_Source\PSoC4/MOTOR.c ****     *     initialized.
1181:.\Generated_Source\PSoC4/MOTOR.c ****     *
1182:.\Generated_Source\PSoC4/MOTOR.c ****     * Reentrant:
1183:.\Generated_Source\PSoC4/MOTOR.c ****     *  No.
1184:.\Generated_Source\PSoC4/MOTOR.c ****     *
1185:.\Generated_Source\PSoC4/MOTOR.c ****     * Theory:
1186:.\Generated_Source\PSoC4/MOTOR.c ****     *  If there is not enough memory in the TX buffer for the entire string, this
1187:.\Generated_Source\PSoC4/MOTOR.c ****     *  function blocks until the last character of the string is loaded into the
1188:.\Generated_Source\PSoC4/MOTOR.c ****     *  TX buffer.
1189:.\Generated_Source\PSoC4/MOTOR.c ****     *
1190:.\Generated_Source\PSoC4/MOTOR.c ****     *******************************************************************************/
1191:.\Generated_Source\PSoC4/MOTOR.c ****     void MOTOR_PutArray(const uint8 string[], uint8 byteCount)
1192:.\Generated_Source\PSoC4/MOTOR.c ****                                                                     
1193:.\Generated_Source\PSoC4/MOTOR.c ****     {
 717              		.loc 1 1193 0
 718              		.cfi_startproc
 719              	.LVL42:
 720 0000 70B5     		push	{r4, r5, r6, lr}
 721              		.cfi_def_cfa_offset 16
 722              		.cfi_offset 4, -16
 723              		.cfi_offset 5, -12
 724              		.cfi_offset 6, -8
 725              		.cfi_offset 14, -4
 726              	.LVL43:
1194:.\Generated_Source\PSoC4/MOTOR.c ****         uint8 bufIndex = 0u;
1195:.\Generated_Source\PSoC4/MOTOR.c **** 
1196:.\Generated_Source\PSoC4/MOTOR.c ****         /* If not Initialized then skip this function */
1197:.\Generated_Source\PSoC4/MOTOR.c ****         if(MOTOR_initVar != 0u)
 727              		.loc 1 1197 0
 728 0002 084B     		ldr	r3, .L73
 729 0004 1B78     		ldrb	r3, [r3]
 730 0006 002B     		cmp	r3, #0
 731 0008 06D1     		bne	.L72
 732 000a 0AE0     		b	.L68
 733              	.LVL44:
ARM GAS  C:\Users\HENRYA~1\AppData\Local\Temp\ccSeVATh.s 			page 35


 734              	.L71:
1198:.\Generated_Source\PSoC4/MOTOR.c ****         {
1199:.\Generated_Source\PSoC4/MOTOR.c ****             while(bufIndex < byteCount)
1200:.\Generated_Source\PSoC4/MOTOR.c ****             {
1201:.\Generated_Source\PSoC4/MOTOR.c ****                 MOTOR_PutChar(string[bufIndex]);
 735              		.loc 1 1201 0
 736 000c 305D     		ldrb	r0, [r6, r4]
 737 000e FFF7FEFF 		bl	MOTOR_PutChar
 738              	.LVL45:
1202:.\Generated_Source\PSoC4/MOTOR.c ****                 bufIndex++;
 739              		.loc 1 1202 0
 740 0012 0134     		add	r4, r4, #1
 741              	.LVL46:
 742 0014 E4B2     		uxtb	r4, r4
 743              	.LVL47:
 744 0016 02E0     		b	.L69
 745              	.LVL48:
 746              	.L72:
 747 0018 0D1C     		mov	r5, r1
 748 001a 061C     		mov	r6, r0
 749 001c 0024     		mov	r4, #0
 750              	.LVL49:
 751              	.L69:
1199:.\Generated_Source\PSoC4/MOTOR.c ****             {
 752              		.loc 1 1199 0
 753 001e AC42     		cmp	r4, r5
 754 0020 F4D3     		bcc	.L71
 755              	.LVL50:
 756              	.L68:
1203:.\Generated_Source\PSoC4/MOTOR.c ****             }
1204:.\Generated_Source\PSoC4/MOTOR.c ****         }
1205:.\Generated_Source\PSoC4/MOTOR.c ****     }
 757              		.loc 1 1205 0
 758              		@ sp needed
 759 0022 70BD     		pop	{r4, r5, r6, pc}
 760              	.L74:
 761              		.align	2
 762              	.L73:
 763 0024 00000000 		.word	.LANCHOR0
 764              		.cfi_endproc
 765              	.LFE22:
 766              		.size	MOTOR_PutArray, .-MOTOR_PutArray
 767              		.section	.text.MOTOR_PutCRLF,"ax",%progbits
 768              		.align	2
 769              		.global	MOTOR_PutCRLF
 770              		.code	16
 771              		.thumb_func
 772              		.type	MOTOR_PutCRLF, %function
 773              	MOTOR_PutCRLF:
 774              	.LFB23:
1206:.\Generated_Source\PSoC4/MOTOR.c **** 
1207:.\Generated_Source\PSoC4/MOTOR.c **** 
1208:.\Generated_Source\PSoC4/MOTOR.c ****     /*******************************************************************************
1209:.\Generated_Source\PSoC4/MOTOR.c ****     * Function Name: MOTOR_PutCRLF
1210:.\Generated_Source\PSoC4/MOTOR.c ****     ********************************************************************************
1211:.\Generated_Source\PSoC4/MOTOR.c ****     *
1212:.\Generated_Source\PSoC4/MOTOR.c ****     * Summary:
ARM GAS  C:\Users\HENRYA~1\AppData\Local\Temp\ccSeVATh.s 			page 36


1213:.\Generated_Source\PSoC4/MOTOR.c ****     *  Writes a byte of data followed by a carriage return (0x0D) and line feed
1214:.\Generated_Source\PSoC4/MOTOR.c ****     *  (0x0A) to the transmit buffer.
1215:.\Generated_Source\PSoC4/MOTOR.c ****     *
1216:.\Generated_Source\PSoC4/MOTOR.c ****     * Parameters:
1217:.\Generated_Source\PSoC4/MOTOR.c ****     *  txDataByte: Data byte to transmit before the carriage return and line feed.
1218:.\Generated_Source\PSoC4/MOTOR.c ****     *
1219:.\Generated_Source\PSoC4/MOTOR.c ****     * Return:
1220:.\Generated_Source\PSoC4/MOTOR.c ****     *  None.
1221:.\Generated_Source\PSoC4/MOTOR.c ****     *
1222:.\Generated_Source\PSoC4/MOTOR.c ****     * Global Variables:
1223:.\Generated_Source\PSoC4/MOTOR.c ****     *  MOTOR_initVar - checked to identify that the component has been
1224:.\Generated_Source\PSoC4/MOTOR.c ****     *     initialized.
1225:.\Generated_Source\PSoC4/MOTOR.c ****     *
1226:.\Generated_Source\PSoC4/MOTOR.c ****     * Reentrant:
1227:.\Generated_Source\PSoC4/MOTOR.c ****     *  No.
1228:.\Generated_Source\PSoC4/MOTOR.c ****     *
1229:.\Generated_Source\PSoC4/MOTOR.c ****     *******************************************************************************/
1230:.\Generated_Source\PSoC4/MOTOR.c ****     void MOTOR_PutCRLF(uint8 txDataByte) 
1231:.\Generated_Source\PSoC4/MOTOR.c ****     {
 775              		.loc 1 1231 0
 776              		.cfi_startproc
 777              	.LVL51:
 778 0000 08B5     		push	{r3, lr}
 779              		.cfi_def_cfa_offset 8
 780              		.cfi_offset 3, -8
 781              		.cfi_offset 14, -4
1232:.\Generated_Source\PSoC4/MOTOR.c ****         /* If not Initialized then skip this function */
1233:.\Generated_Source\PSoC4/MOTOR.c ****         if(MOTOR_initVar != 0u)
 782              		.loc 1 1233 0
 783 0002 064B     		ldr	r3, .L77
 784 0004 1B78     		ldrb	r3, [r3]
 785 0006 002B     		cmp	r3, #0
 786 0008 07D0     		beq	.L75
1234:.\Generated_Source\PSoC4/MOTOR.c ****         {
1235:.\Generated_Source\PSoC4/MOTOR.c ****             MOTOR_PutChar(txDataByte);
 787              		.loc 1 1235 0
 788 000a FFF7FEFF 		bl	MOTOR_PutChar
 789              	.LVL52:
1236:.\Generated_Source\PSoC4/MOTOR.c ****             MOTOR_PutChar(0x0Du);
 790              		.loc 1 1236 0
 791 000e 0D20     		mov	r0, #13
 792 0010 FFF7FEFF 		bl	MOTOR_PutChar
 793              	.LVL53:
1237:.\Generated_Source\PSoC4/MOTOR.c ****             MOTOR_PutChar(0x0Au);
 794              		.loc 1 1237 0
 795 0014 0A20     		mov	r0, #10
 796 0016 FFF7FEFF 		bl	MOTOR_PutChar
 797              	.LVL54:
 798              	.L75:
1238:.\Generated_Source\PSoC4/MOTOR.c ****         }
1239:.\Generated_Source\PSoC4/MOTOR.c ****     }
 799              		.loc 1 1239 0
 800              		@ sp needed
 801 001a 08BD     		pop	{r3, pc}
 802              	.L78:
 803              		.align	2
 804              	.L77:
ARM GAS  C:\Users\HENRYA~1\AppData\Local\Temp\ccSeVATh.s 			page 37


 805 001c 00000000 		.word	.LANCHOR0
 806              		.cfi_endproc
 807              	.LFE23:
 808              		.size	MOTOR_PutCRLF, .-MOTOR_PutCRLF
 809              		.section	.text.MOTOR_GetTxBufferSize,"ax",%progbits
 810              		.align	2
 811              		.global	MOTOR_GetTxBufferSize
 812              		.code	16
 813              		.thumb_func
 814              		.type	MOTOR_GetTxBufferSize, %function
 815              	MOTOR_GetTxBufferSize:
 816              	.LFB24:
1240:.\Generated_Source\PSoC4/MOTOR.c **** 
1241:.\Generated_Source\PSoC4/MOTOR.c **** 
1242:.\Generated_Source\PSoC4/MOTOR.c ****     /*******************************************************************************
1243:.\Generated_Source\PSoC4/MOTOR.c ****     * Function Name: MOTOR_GetTxBufferSize
1244:.\Generated_Source\PSoC4/MOTOR.c ****     ********************************************************************************
1245:.\Generated_Source\PSoC4/MOTOR.c ****     *
1246:.\Generated_Source\PSoC4/MOTOR.c ****     * Summary:
1247:.\Generated_Source\PSoC4/MOTOR.c ****     *  Returns the number of bytes in the TX buffer which are waiting to be 
1248:.\Generated_Source\PSoC4/MOTOR.c ****     *  transmitted.
1249:.\Generated_Source\PSoC4/MOTOR.c ****     *  * TX software buffer is disabled (TX Buffer Size parameter is equal to 4): 
1250:.\Generated_Source\PSoC4/MOTOR.c ****     *    returns 0 for empty TX FIFO, 1 for not full TX FIFO or 4 for full TX FIFO.
1251:.\Generated_Source\PSoC4/MOTOR.c ****     *  * TX software buffer is enabled: returns the number of bytes in the TX 
1252:.\Generated_Source\PSoC4/MOTOR.c ****     *    software buffer which are waiting to be transmitted. Bytes available in the
1253:.\Generated_Source\PSoC4/MOTOR.c ****     *    TX FIFO do not count.
1254:.\Generated_Source\PSoC4/MOTOR.c ****     *
1255:.\Generated_Source\PSoC4/MOTOR.c ****     * Parameters:
1256:.\Generated_Source\PSoC4/MOTOR.c ****     *  None.
1257:.\Generated_Source\PSoC4/MOTOR.c ****     *
1258:.\Generated_Source\PSoC4/MOTOR.c ****     * Return:
1259:.\Generated_Source\PSoC4/MOTOR.c ****     *  Number of bytes used in the TX buffer. Return value type depends on the TX 
1260:.\Generated_Source\PSoC4/MOTOR.c ****     *  Buffer Size parameter.
1261:.\Generated_Source\PSoC4/MOTOR.c ****     *
1262:.\Generated_Source\PSoC4/MOTOR.c ****     * Global Variables:
1263:.\Generated_Source\PSoC4/MOTOR.c ****     *  MOTOR_txBufferWrite - used to calculate left space.
1264:.\Generated_Source\PSoC4/MOTOR.c ****     *  MOTOR_txBufferRead - used to calculate left space.
1265:.\Generated_Source\PSoC4/MOTOR.c ****     *
1266:.\Generated_Source\PSoC4/MOTOR.c ****     * Reentrant:
1267:.\Generated_Source\PSoC4/MOTOR.c ****     *  No.
1268:.\Generated_Source\PSoC4/MOTOR.c ****     *
1269:.\Generated_Source\PSoC4/MOTOR.c ****     * Theory:
1270:.\Generated_Source\PSoC4/MOTOR.c ****     *  Allows the user to find out how full the TX Buffer is.
1271:.\Generated_Source\PSoC4/MOTOR.c ****     *
1272:.\Generated_Source\PSoC4/MOTOR.c ****     *******************************************************************************/
1273:.\Generated_Source\PSoC4/MOTOR.c ****     uint8 MOTOR_GetTxBufferSize(void)
1274:.\Generated_Source\PSoC4/MOTOR.c ****                                                             
1275:.\Generated_Source\PSoC4/MOTOR.c ****     {
 817              		.loc 1 1275 0
 818              		.cfi_startproc
1276:.\Generated_Source\PSoC4/MOTOR.c ****         uint8 size;
1277:.\Generated_Source\PSoC4/MOTOR.c **** 
1278:.\Generated_Source\PSoC4/MOTOR.c ****     #if (MOTOR_TX_INTERRUPT_ENABLED)
1279:.\Generated_Source\PSoC4/MOTOR.c **** 
1280:.\Generated_Source\PSoC4/MOTOR.c ****         /* Protect variables that could change on interrupt. */
1281:.\Generated_Source\PSoC4/MOTOR.c ****         MOTOR_DisableTxInt();
1282:.\Generated_Source\PSoC4/MOTOR.c **** 
ARM GAS  C:\Users\HENRYA~1\AppData\Local\Temp\ccSeVATh.s 			page 38


1283:.\Generated_Source\PSoC4/MOTOR.c ****         if(MOTOR_txBufferRead == MOTOR_txBufferWrite)
1284:.\Generated_Source\PSoC4/MOTOR.c ****         {
1285:.\Generated_Source\PSoC4/MOTOR.c ****             size = 0u;
1286:.\Generated_Source\PSoC4/MOTOR.c ****         }
1287:.\Generated_Source\PSoC4/MOTOR.c ****         else if(MOTOR_txBufferRead < MOTOR_txBufferWrite)
1288:.\Generated_Source\PSoC4/MOTOR.c ****         {
1289:.\Generated_Source\PSoC4/MOTOR.c ****             size = (MOTOR_txBufferWrite - MOTOR_txBufferRead);
1290:.\Generated_Source\PSoC4/MOTOR.c ****         }
1291:.\Generated_Source\PSoC4/MOTOR.c ****         else
1292:.\Generated_Source\PSoC4/MOTOR.c ****         {
1293:.\Generated_Source\PSoC4/MOTOR.c ****             size = (MOTOR_TX_BUFFER_SIZE - MOTOR_txBufferRead) +
1294:.\Generated_Source\PSoC4/MOTOR.c ****                     MOTOR_txBufferWrite;
1295:.\Generated_Source\PSoC4/MOTOR.c ****         }
1296:.\Generated_Source\PSoC4/MOTOR.c **** 
1297:.\Generated_Source\PSoC4/MOTOR.c ****         MOTOR_EnableTxInt();
1298:.\Generated_Source\PSoC4/MOTOR.c **** 
1299:.\Generated_Source\PSoC4/MOTOR.c ****     #else
1300:.\Generated_Source\PSoC4/MOTOR.c **** 
1301:.\Generated_Source\PSoC4/MOTOR.c ****         size = MOTOR_TXSTATUS_REG;
 819              		.loc 1 1301 0
 820 0000 064B     		ldr	r3, .L83
 821 0002 1B78     		ldrb	r3, [r3]
 822 0004 DBB2     		uxtb	r3, r3
 823              	.LVL55:
1302:.\Generated_Source\PSoC4/MOTOR.c **** 
1303:.\Generated_Source\PSoC4/MOTOR.c ****         /* Is the fifo is full. */
1304:.\Generated_Source\PSoC4/MOTOR.c ****         if((size & MOTOR_TX_STS_FIFO_FULL) != 0u)
 824              		.loc 1 1304 0
 825 0006 5A07     		lsl	r2, r3, #29
 826 0008 03D4     		bmi	.L81
1305:.\Generated_Source\PSoC4/MOTOR.c ****         {
1306:.\Generated_Source\PSoC4/MOTOR.c ****             size = MOTOR_FIFO_LENGTH;
1307:.\Generated_Source\PSoC4/MOTOR.c ****         }
1308:.\Generated_Source\PSoC4/MOTOR.c ****         else if((size & MOTOR_TX_STS_FIFO_EMPTY) != 0u)
 827              		.loc 1 1308 0
 828 000a 9B07     		lsl	r3, r3, #30
 829 000c 03D5     		bpl	.L82
 830              	.LVL56:
1309:.\Generated_Source\PSoC4/MOTOR.c ****         {
1310:.\Generated_Source\PSoC4/MOTOR.c ****             size = 0u;
 831              		.loc 1 1310 0
 832 000e 0020     		mov	r0, #0
 833 0010 02E0     		b	.L80
 834              	.LVL57:
 835              	.L81:
1306:.\Generated_Source\PSoC4/MOTOR.c ****         }
 836              		.loc 1 1306 0
 837 0012 0420     		mov	r0, #4
 838 0014 00E0     		b	.L80
 839              	.LVL58:
 840              	.L82:
1311:.\Generated_Source\PSoC4/MOTOR.c ****         }
1312:.\Generated_Source\PSoC4/MOTOR.c ****         else
1313:.\Generated_Source\PSoC4/MOTOR.c ****         {
1314:.\Generated_Source\PSoC4/MOTOR.c ****             /* We only know there is data in the fifo. */
1315:.\Generated_Source\PSoC4/MOTOR.c ****             size = 1u;
 841              		.loc 1 1315 0
ARM GAS  C:\Users\HENRYA~1\AppData\Local\Temp\ccSeVATh.s 			page 39


 842 0016 0120     		mov	r0, #1
 843              	.L80:
 844              	.LVL59:
1316:.\Generated_Source\PSoC4/MOTOR.c ****         }
1317:.\Generated_Source\PSoC4/MOTOR.c **** 
1318:.\Generated_Source\PSoC4/MOTOR.c ****     #endif /* (MOTOR_TX_INTERRUPT_ENABLED) */
1319:.\Generated_Source\PSoC4/MOTOR.c **** 
1320:.\Generated_Source\PSoC4/MOTOR.c ****     return(size);
1321:.\Generated_Source\PSoC4/MOTOR.c ****     }
 845              		.loc 1 1321 0
 846              		@ sp needed
 847 0018 7047     		bx	lr
 848              	.L84:
 849 001a C046     		.align	2
 850              	.L83:
 851 001c 62000F40 		.word	1074724962
 852              		.cfi_endproc
 853              	.LFE24:
 854              		.size	MOTOR_GetTxBufferSize, .-MOTOR_GetTxBufferSize
 855              		.section	.text.MOTOR_ClearTxBuffer,"ax",%progbits
 856              		.align	2
 857              		.global	MOTOR_ClearTxBuffer
 858              		.code	16
 859              		.thumb_func
 860              		.type	MOTOR_ClearTxBuffer, %function
 861              	MOTOR_ClearTxBuffer:
 862              	.LFB25:
1322:.\Generated_Source\PSoC4/MOTOR.c **** 
1323:.\Generated_Source\PSoC4/MOTOR.c **** 
1324:.\Generated_Source\PSoC4/MOTOR.c ****     /*******************************************************************************
1325:.\Generated_Source\PSoC4/MOTOR.c ****     * Function Name: MOTOR_ClearTxBuffer
1326:.\Generated_Source\PSoC4/MOTOR.c ****     ********************************************************************************
1327:.\Generated_Source\PSoC4/MOTOR.c ****     *
1328:.\Generated_Source\PSoC4/MOTOR.c ****     * Summary:
1329:.\Generated_Source\PSoC4/MOTOR.c ****     *  Clears all data from the TX buffer and hardware TX FIFO.
1330:.\Generated_Source\PSoC4/MOTOR.c ****     *
1331:.\Generated_Source\PSoC4/MOTOR.c ****     * Parameters:
1332:.\Generated_Source\PSoC4/MOTOR.c ****     *  None.
1333:.\Generated_Source\PSoC4/MOTOR.c ****     *
1334:.\Generated_Source\PSoC4/MOTOR.c ****     * Return:
1335:.\Generated_Source\PSoC4/MOTOR.c ****     *  None.
1336:.\Generated_Source\PSoC4/MOTOR.c ****     *
1337:.\Generated_Source\PSoC4/MOTOR.c ****     * Global Variables:
1338:.\Generated_Source\PSoC4/MOTOR.c ****     *  MOTOR_txBufferWrite - cleared to zero.
1339:.\Generated_Source\PSoC4/MOTOR.c ****     *  MOTOR_txBufferRead - cleared to zero.
1340:.\Generated_Source\PSoC4/MOTOR.c ****     *
1341:.\Generated_Source\PSoC4/MOTOR.c ****     * Reentrant:
1342:.\Generated_Source\PSoC4/MOTOR.c ****     *  No.
1343:.\Generated_Source\PSoC4/MOTOR.c ****     *
1344:.\Generated_Source\PSoC4/MOTOR.c ****     * Theory:
1345:.\Generated_Source\PSoC4/MOTOR.c ****     *  Setting the pointers to zero makes the system believe there is no data to
1346:.\Generated_Source\PSoC4/MOTOR.c ****     *  read and writing will resume at address 0 overwriting any data that may have
1347:.\Generated_Source\PSoC4/MOTOR.c ****     *  remained in the RAM.
1348:.\Generated_Source\PSoC4/MOTOR.c ****     *
1349:.\Generated_Source\PSoC4/MOTOR.c ****     * Side Effects:
1350:.\Generated_Source\PSoC4/MOTOR.c ****     *  Data waiting in the transmit buffer is not sent; a byte that is currently
1351:.\Generated_Source\PSoC4/MOTOR.c ****     *  transmitting finishes transmitting.
ARM GAS  C:\Users\HENRYA~1\AppData\Local\Temp\ccSeVATh.s 			page 40


1352:.\Generated_Source\PSoC4/MOTOR.c ****     *
1353:.\Generated_Source\PSoC4/MOTOR.c ****     *******************************************************************************/
1354:.\Generated_Source\PSoC4/MOTOR.c ****     void MOTOR_ClearTxBuffer(void) 
1355:.\Generated_Source\PSoC4/MOTOR.c ****     {
 863              		.loc 1 1355 0
 864              		.cfi_startproc
 865 0000 08B5     		push	{r3, lr}
 866              		.cfi_def_cfa_offset 8
 867              		.cfi_offset 3, -8
 868              		.cfi_offset 14, -4
1356:.\Generated_Source\PSoC4/MOTOR.c ****         uint8 enableInterrupts;
1357:.\Generated_Source\PSoC4/MOTOR.c **** 
1358:.\Generated_Source\PSoC4/MOTOR.c ****         enableInterrupts = CyEnterCriticalSection();
 869              		.loc 1 1358 0
 870 0002 FFF7FEFF 		bl	CyEnterCriticalSection
 871              	.LVL60:
1359:.\Generated_Source\PSoC4/MOTOR.c ****         /* Clear the HW FIFO */
1360:.\Generated_Source\PSoC4/MOTOR.c ****         MOTOR_TXDATA_AUX_CTL_REG |= (uint8)  MOTOR_TX_FIFO_CLR;
 872              		.loc 1 1360 0
 873 0006 064B     		ldr	r3, .L86
 874 0008 1978     		ldrb	r1, [r3]
 875 000a 0122     		mov	r2, #1
 876 000c 0A43     		orr	r2, r1
 877 000e 1A70     		strb	r2, [r3]
1361:.\Generated_Source\PSoC4/MOTOR.c ****         MOTOR_TXDATA_AUX_CTL_REG &= (uint8) ~MOTOR_TX_FIFO_CLR;
 878              		.loc 1 1361 0
 879 0010 1A78     		ldrb	r2, [r3]
 880 0012 0121     		mov	r1, #1
 881 0014 8A43     		bic	r2, r1
 882 0016 1A70     		strb	r2, [r3]
1362:.\Generated_Source\PSoC4/MOTOR.c ****         CyExitCriticalSection(enableInterrupts);
 883              		.loc 1 1362 0
 884 0018 FFF7FEFF 		bl	CyExitCriticalSection
 885              	.LVL61:
1363:.\Generated_Source\PSoC4/MOTOR.c **** 
1364:.\Generated_Source\PSoC4/MOTOR.c ****     #if (MOTOR_TX_INTERRUPT_ENABLED)
1365:.\Generated_Source\PSoC4/MOTOR.c **** 
1366:.\Generated_Source\PSoC4/MOTOR.c ****         /* Protect variables that could change on interrupt. */
1367:.\Generated_Source\PSoC4/MOTOR.c ****         MOTOR_DisableTxInt();
1368:.\Generated_Source\PSoC4/MOTOR.c **** 
1369:.\Generated_Source\PSoC4/MOTOR.c ****         MOTOR_txBufferRead = 0u;
1370:.\Generated_Source\PSoC4/MOTOR.c ****         MOTOR_txBufferWrite = 0u;
1371:.\Generated_Source\PSoC4/MOTOR.c **** 
1372:.\Generated_Source\PSoC4/MOTOR.c ****         /* Enable Tx interrupt. */
1373:.\Generated_Source\PSoC4/MOTOR.c ****         MOTOR_EnableTxInt();
1374:.\Generated_Source\PSoC4/MOTOR.c **** 
1375:.\Generated_Source\PSoC4/MOTOR.c ****     #endif /* (MOTOR_TX_INTERRUPT_ENABLED) */
1376:.\Generated_Source\PSoC4/MOTOR.c ****     }
 886              		.loc 1 1376 0
 887              		@ sp needed
 888 001c 08BD     		pop	{r3, pc}
 889              	.L87:
 890 001e C046     		.align	2
 891              	.L86:
 892 0020 92000F40 		.word	1074725010
 893              		.cfi_endproc
 894              	.LFE25:
ARM GAS  C:\Users\HENRYA~1\AppData\Local\Temp\ccSeVATh.s 			page 41


 895              		.size	MOTOR_ClearTxBuffer, .-MOTOR_ClearTxBuffer
 896              		.section	.text.MOTOR_SendBreak,"ax",%progbits
 897              		.align	2
 898              		.global	MOTOR_SendBreak
 899              		.code	16
 900              		.thumb_func
 901              		.type	MOTOR_SendBreak, %function
 902              	MOTOR_SendBreak:
 903              	.LFB26:
1377:.\Generated_Source\PSoC4/MOTOR.c **** 
1378:.\Generated_Source\PSoC4/MOTOR.c **** 
1379:.\Generated_Source\PSoC4/MOTOR.c ****     /*******************************************************************************
1380:.\Generated_Source\PSoC4/MOTOR.c ****     * Function Name: MOTOR_SendBreak
1381:.\Generated_Source\PSoC4/MOTOR.c ****     ********************************************************************************
1382:.\Generated_Source\PSoC4/MOTOR.c ****     *
1383:.\Generated_Source\PSoC4/MOTOR.c ****     * Summary:
1384:.\Generated_Source\PSoC4/MOTOR.c ****     *  Transmits a break signal on the bus.
1385:.\Generated_Source\PSoC4/MOTOR.c ****     *
1386:.\Generated_Source\PSoC4/MOTOR.c ****     * Parameters:
1387:.\Generated_Source\PSoC4/MOTOR.c ****     *  uint8 retMode:  Send Break return mode. See the following table for options.
1388:.\Generated_Source\PSoC4/MOTOR.c ****     *   MOTOR_SEND_BREAK - Initialize registers for break, send the Break
1389:.\Generated_Source\PSoC4/MOTOR.c ****     *       signal and return immediately.
1390:.\Generated_Source\PSoC4/MOTOR.c ****     *   MOTOR_WAIT_FOR_COMPLETE_REINIT - Wait until break transmission is
1391:.\Generated_Source\PSoC4/MOTOR.c ****     *       complete, reinitialize registers to normal transmission mode then return
1392:.\Generated_Source\PSoC4/MOTOR.c ****     *   MOTOR_REINIT - Reinitialize registers to normal transmission mode
1393:.\Generated_Source\PSoC4/MOTOR.c ****     *       then return.
1394:.\Generated_Source\PSoC4/MOTOR.c ****     *   MOTOR_SEND_WAIT_REINIT - Performs both options: 
1395:.\Generated_Source\PSoC4/MOTOR.c ****     *      MOTOR_SEND_BREAK and MOTOR_WAIT_FOR_COMPLETE_REINIT.
1396:.\Generated_Source\PSoC4/MOTOR.c ****     *      This option is recommended for most cases.
1397:.\Generated_Source\PSoC4/MOTOR.c ****     *
1398:.\Generated_Source\PSoC4/MOTOR.c ****     * Return:
1399:.\Generated_Source\PSoC4/MOTOR.c ****     *  None.
1400:.\Generated_Source\PSoC4/MOTOR.c ****     *
1401:.\Generated_Source\PSoC4/MOTOR.c ****     * Global Variables:
1402:.\Generated_Source\PSoC4/MOTOR.c ****     *  MOTOR_initVar - checked to identify that the component has been
1403:.\Generated_Source\PSoC4/MOTOR.c ****     *     initialized.
1404:.\Generated_Source\PSoC4/MOTOR.c ****     *  txPeriod - static variable, used for keeping TX period configuration.
1405:.\Generated_Source\PSoC4/MOTOR.c ****     *
1406:.\Generated_Source\PSoC4/MOTOR.c ****     * Reentrant:
1407:.\Generated_Source\PSoC4/MOTOR.c ****     *  No.
1408:.\Generated_Source\PSoC4/MOTOR.c ****     *
1409:.\Generated_Source\PSoC4/MOTOR.c ****     * Theory:
1410:.\Generated_Source\PSoC4/MOTOR.c ****     *  SendBreak function initializes registers to send 13-bit break signal. It is
1411:.\Generated_Source\PSoC4/MOTOR.c ****     *  important to return the registers configuration to normal for continue 8-bit
1412:.\Generated_Source\PSoC4/MOTOR.c ****     *  operation.
1413:.\Generated_Source\PSoC4/MOTOR.c ****     *  There are 3 variants for this API usage:
1414:.\Generated_Source\PSoC4/MOTOR.c ****     *  1) SendBreak(3) - function will send the Break signal and take care on the
1415:.\Generated_Source\PSoC4/MOTOR.c ****     *     configuration returning. Function will block CPU until transmission
1416:.\Generated_Source\PSoC4/MOTOR.c ****     *     complete.
1417:.\Generated_Source\PSoC4/MOTOR.c ****     *  2) User may want to use blocking time if UART configured to the low speed
1418:.\Generated_Source\PSoC4/MOTOR.c ****     *     operation
1419:.\Generated_Source\PSoC4/MOTOR.c ****     *     Example for this case:
1420:.\Generated_Source\PSoC4/MOTOR.c ****     *     SendBreak(0);     - initialize Break signal transmission
1421:.\Generated_Source\PSoC4/MOTOR.c ****     *         Add your code here to use CPU time
1422:.\Generated_Source\PSoC4/MOTOR.c ****     *     SendBreak(1);     - complete Break operation
1423:.\Generated_Source\PSoC4/MOTOR.c ****     *  3) Same to 2) but user may want to initialize and use the interrupt to
1424:.\Generated_Source\PSoC4/MOTOR.c ****     *     complete break operation.
ARM GAS  C:\Users\HENRYA~1\AppData\Local\Temp\ccSeVATh.s 			page 42


1425:.\Generated_Source\PSoC4/MOTOR.c ****     *     Example for this case:
1426:.\Generated_Source\PSoC4/MOTOR.c ****     *     Initialize TX interrupt with "TX - On TX Complete" parameter
1427:.\Generated_Source\PSoC4/MOTOR.c ****     *     SendBreak(0);     - initialize Break signal transmission
1428:.\Generated_Source\PSoC4/MOTOR.c ****     *         Add your code here to use CPU time
1429:.\Generated_Source\PSoC4/MOTOR.c ****     *     When interrupt appear with MOTOR_TX_STS_COMPLETE status:
1430:.\Generated_Source\PSoC4/MOTOR.c ****     *     SendBreak(2);     - complete Break operation
1431:.\Generated_Source\PSoC4/MOTOR.c ****     *
1432:.\Generated_Source\PSoC4/MOTOR.c ****     * Side Effects:
1433:.\Generated_Source\PSoC4/MOTOR.c ****     *  The MOTOR_SendBreak() function initializes registers to send a
1434:.\Generated_Source\PSoC4/MOTOR.c ****     *  break signal.
1435:.\Generated_Source\PSoC4/MOTOR.c ****     *  Break signal length depends on the break signal bits configuration.
1436:.\Generated_Source\PSoC4/MOTOR.c ****     *  The register configuration should be reinitialized before normal 8-bit
1437:.\Generated_Source\PSoC4/MOTOR.c ****     *  communication can continue.
1438:.\Generated_Source\PSoC4/MOTOR.c ****     *
1439:.\Generated_Source\PSoC4/MOTOR.c ****     *******************************************************************************/
1440:.\Generated_Source\PSoC4/MOTOR.c ****     void MOTOR_SendBreak(uint8 retMode) 
1441:.\Generated_Source\PSoC4/MOTOR.c ****     {
 904              		.loc 1 1441 0
 905              		.cfi_startproc
 906              	.LVL62:
1442:.\Generated_Source\PSoC4/MOTOR.c **** 
1443:.\Generated_Source\PSoC4/MOTOR.c ****         /* If not Initialized then skip this function*/
1444:.\Generated_Source\PSoC4/MOTOR.c ****         if(MOTOR_initVar != 0u)
 907              		.loc 1 1444 0
 908 0000 124B     		ldr	r3, .L95
 909 0002 1B78     		ldrb	r3, [r3]
 910 0004 002B     		cmp	r3, #0
 911 0006 1FD0     		beq	.L88
 912              	.LBB2:
1445:.\Generated_Source\PSoC4/MOTOR.c ****         {
1446:.\Generated_Source\PSoC4/MOTOR.c ****             /* Set the Counter to 13-bits and transmit a 00 byte */
1447:.\Generated_Source\PSoC4/MOTOR.c ****             /* When that is done then reset the counter value back */
1448:.\Generated_Source\PSoC4/MOTOR.c ****             uint8 tmpStat;
1449:.\Generated_Source\PSoC4/MOTOR.c **** 
1450:.\Generated_Source\PSoC4/MOTOR.c ****         #if(MOTOR_HD_ENABLED) /* Half Duplex mode*/
1451:.\Generated_Source\PSoC4/MOTOR.c **** 
1452:.\Generated_Source\PSoC4/MOTOR.c ****             if( (retMode == MOTOR_SEND_BREAK) ||
1453:.\Generated_Source\PSoC4/MOTOR.c ****                 (retMode == MOTOR_SEND_WAIT_REINIT ) )
1454:.\Generated_Source\PSoC4/MOTOR.c ****             {
1455:.\Generated_Source\PSoC4/MOTOR.c ****                 /* CTRL_HD_SEND_BREAK - sends break bits in HD mode */
1456:.\Generated_Source\PSoC4/MOTOR.c ****                 MOTOR_WriteControlRegister(MOTOR_ReadControlRegister() |
1457:.\Generated_Source\PSoC4/MOTOR.c ****                                                       MOTOR_CTRL_HD_SEND_BREAK);
1458:.\Generated_Source\PSoC4/MOTOR.c ****                 /* Send zeros */
1459:.\Generated_Source\PSoC4/MOTOR.c ****                 MOTOR_TXDATA_REG = 0u;
1460:.\Generated_Source\PSoC4/MOTOR.c **** 
1461:.\Generated_Source\PSoC4/MOTOR.c ****                 do /* Wait until transmit starts */
1462:.\Generated_Source\PSoC4/MOTOR.c ****                 {
1463:.\Generated_Source\PSoC4/MOTOR.c ****                     tmpStat = MOTOR_TXSTATUS_REG;
1464:.\Generated_Source\PSoC4/MOTOR.c ****                 }
1465:.\Generated_Source\PSoC4/MOTOR.c ****                 while((tmpStat & MOTOR_TX_STS_FIFO_EMPTY) != 0u);
1466:.\Generated_Source\PSoC4/MOTOR.c ****             }
1467:.\Generated_Source\PSoC4/MOTOR.c **** 
1468:.\Generated_Source\PSoC4/MOTOR.c ****             if( (retMode == MOTOR_WAIT_FOR_COMPLETE_REINIT) ||
1469:.\Generated_Source\PSoC4/MOTOR.c ****                 (retMode == MOTOR_SEND_WAIT_REINIT) )
1470:.\Generated_Source\PSoC4/MOTOR.c ****             {
1471:.\Generated_Source\PSoC4/MOTOR.c ****                 do /* Wait until transmit complete */
1472:.\Generated_Source\PSoC4/MOTOR.c ****                 {
ARM GAS  C:\Users\HENRYA~1\AppData\Local\Temp\ccSeVATh.s 			page 43


1473:.\Generated_Source\PSoC4/MOTOR.c ****                     tmpStat = MOTOR_TXSTATUS_REG;
1474:.\Generated_Source\PSoC4/MOTOR.c ****                 }
1475:.\Generated_Source\PSoC4/MOTOR.c ****                 while(((uint8)~tmpStat & MOTOR_TX_STS_COMPLETE) != 0u);
1476:.\Generated_Source\PSoC4/MOTOR.c ****             }
1477:.\Generated_Source\PSoC4/MOTOR.c **** 
1478:.\Generated_Source\PSoC4/MOTOR.c ****             if( (retMode == MOTOR_WAIT_FOR_COMPLETE_REINIT) ||
1479:.\Generated_Source\PSoC4/MOTOR.c ****                 (retMode == MOTOR_REINIT) ||
1480:.\Generated_Source\PSoC4/MOTOR.c ****                 (retMode == MOTOR_SEND_WAIT_REINIT) )
1481:.\Generated_Source\PSoC4/MOTOR.c ****             {
1482:.\Generated_Source\PSoC4/MOTOR.c ****                 MOTOR_WriteControlRegister(MOTOR_ReadControlRegister() &
1483:.\Generated_Source\PSoC4/MOTOR.c ****                                               (uint8)~MOTOR_CTRL_HD_SEND_BREAK);
1484:.\Generated_Source\PSoC4/MOTOR.c ****             }
1485:.\Generated_Source\PSoC4/MOTOR.c **** 
1486:.\Generated_Source\PSoC4/MOTOR.c ****         #else /* MOTOR_HD_ENABLED Full Duplex mode */
1487:.\Generated_Source\PSoC4/MOTOR.c **** 
1488:.\Generated_Source\PSoC4/MOTOR.c ****             static uint8 txPeriod;
1489:.\Generated_Source\PSoC4/MOTOR.c **** 
1490:.\Generated_Source\PSoC4/MOTOR.c ****             if( (retMode == MOTOR_SEND_BREAK) ||
 913              		.loc 1 1490 0
 914 0008 0028     		cmp	r0, #0
 915 000a 01D0     		beq	.L90
 916              		.loc 1 1490 0 is_stmt 0 discriminator 1
 917 000c 0328     		cmp	r0, #3
 918 000e 0CD1     		bne	.L91
 919              	.L90:
1491:.\Generated_Source\PSoC4/MOTOR.c ****                 (retMode == MOTOR_SEND_WAIT_REINIT) )
1492:.\Generated_Source\PSoC4/MOTOR.c ****             {
1493:.\Generated_Source\PSoC4/MOTOR.c ****                 /* CTRL_HD_SEND_BREAK - skip to send parity bit at Break signal in Full Duplex mode
1494:.\Generated_Source\PSoC4/MOTOR.c ****                 #if( (MOTOR_PARITY_TYPE != MOTOR__B_UART__NONE_REVB) || \
1495:.\Generated_Source\PSoC4/MOTOR.c ****                                     (MOTOR_PARITY_TYPE_SW != 0u) )
1496:.\Generated_Source\PSoC4/MOTOR.c ****                     MOTOR_WriteControlRegister(MOTOR_ReadControlRegister() |
1497:.\Generated_Source\PSoC4/MOTOR.c ****                                                           MOTOR_CTRL_HD_SEND_BREAK);
1498:.\Generated_Source\PSoC4/MOTOR.c ****                 #endif /* End MOTOR_PARITY_TYPE != MOTOR__B_UART__NONE_REVB  */
1499:.\Generated_Source\PSoC4/MOTOR.c **** 
1500:.\Generated_Source\PSoC4/MOTOR.c ****                 #if(MOTOR_TXCLKGEN_DP)
1501:.\Generated_Source\PSoC4/MOTOR.c ****                     txPeriod = MOTOR_TXBITCLKTX_COMPLETE_REG;
 920              		.loc 1 1501 0 is_stmt 1
 921 0010 0F4B     		ldr	r3, .L95+4
 922 0012 1978     		ldrb	r1, [r3]
 923 0014 0D4A     		ldr	r2, .L95
 924 0016 5170     		strb	r1, [r2, #1]
1502:.\Generated_Source\PSoC4/MOTOR.c ****                     MOTOR_TXBITCLKTX_COMPLETE_REG = MOTOR_TXBITCTR_BREAKBITS;
 925              		.loc 1 1502 0
 926 0018 6722     		mov	r2, #103
 927 001a 1A70     		strb	r2, [r3]
1503:.\Generated_Source\PSoC4/MOTOR.c ****                 #else
1504:.\Generated_Source\PSoC4/MOTOR.c ****                     txPeriod = MOTOR_TXBITCTR_PERIOD_REG;
1505:.\Generated_Source\PSoC4/MOTOR.c ****                     MOTOR_TXBITCTR_PERIOD_REG = MOTOR_TXBITCTR_BREAKBITS8X;
1506:.\Generated_Source\PSoC4/MOTOR.c ****                 #endif /* End MOTOR_TXCLKGEN_DP */
1507:.\Generated_Source\PSoC4/MOTOR.c **** 
1508:.\Generated_Source\PSoC4/MOTOR.c ****                 /* Send zeros */
1509:.\Generated_Source\PSoC4/MOTOR.c ****                 MOTOR_TXDATA_REG = 0u;
 928              		.loc 1 1509 0
 929 001c 0022     		mov	r2, #0
 930 001e 0D4B     		ldr	r3, .L95+8
 931 0020 1A70     		strb	r2, [r3]
 932              	.L92:
ARM GAS  C:\Users\HENRYA~1\AppData\Local\Temp\ccSeVATh.s 			page 44


1510:.\Generated_Source\PSoC4/MOTOR.c **** 
1511:.\Generated_Source\PSoC4/MOTOR.c ****                 do /* Wait until transmit starts */
1512:.\Generated_Source\PSoC4/MOTOR.c ****                 {
1513:.\Generated_Source\PSoC4/MOTOR.c ****                     tmpStat = MOTOR_TXSTATUS_REG;
 933              		.loc 1 1513 0 discriminator 1
 934 0022 0D4B     		ldr	r3, .L95+12
 935 0024 1B78     		ldrb	r3, [r3]
 936              	.LVL63:
1514:.\Generated_Source\PSoC4/MOTOR.c ****                 }
1515:.\Generated_Source\PSoC4/MOTOR.c ****                 while((tmpStat & MOTOR_TX_STS_FIFO_EMPTY) != 0u);
 937              		.loc 1 1515 0 discriminator 1
 938 0026 9B07     		lsl	r3, r3, #30
 939 0028 FBD4     		bmi	.L92
 940              	.LVL64:
 941              	.L91:
1516:.\Generated_Source\PSoC4/MOTOR.c ****             }
1517:.\Generated_Source\PSoC4/MOTOR.c **** 
1518:.\Generated_Source\PSoC4/MOTOR.c ****             if( (retMode == MOTOR_WAIT_FOR_COMPLETE_REINIT) ||
 942              		.loc 1 1518 0
 943 002a 0128     		cmp	r0, #1
 944 002c 01D0     		beq	.L93
 945              		.loc 1 1518 0 is_stmt 0 discriminator 1
 946 002e 0328     		cmp	r0, #3
 947 0030 03D1     		bne	.L94
 948              	.L93:
1519:.\Generated_Source\PSoC4/MOTOR.c ****                 (retMode == MOTOR_SEND_WAIT_REINIT) )
1520:.\Generated_Source\PSoC4/MOTOR.c ****             {
1521:.\Generated_Source\PSoC4/MOTOR.c ****                 do /* Wait until transmit complete */
1522:.\Generated_Source\PSoC4/MOTOR.c ****                 {
1523:.\Generated_Source\PSoC4/MOTOR.c ****                     tmpStat = MOTOR_TXSTATUS_REG;
 949              		.loc 1 1523 0 is_stmt 1 discriminator 1
 950 0032 094B     		ldr	r3, .L95+12
 951 0034 1B78     		ldrb	r3, [r3]
 952              	.LVL65:
1524:.\Generated_Source\PSoC4/MOTOR.c ****                 }
1525:.\Generated_Source\PSoC4/MOTOR.c ****                 while(((uint8)~tmpStat & MOTOR_TX_STS_COMPLETE) != 0u);
 953              		.loc 1 1525 0 discriminator 1
 954 0036 DB07     		lsl	r3, r3, #31
 955 0038 FBD5     		bpl	.L93
 956              	.LVL66:
 957              	.L94:
1526:.\Generated_Source\PSoC4/MOTOR.c ****             }
1527:.\Generated_Source\PSoC4/MOTOR.c **** 
1528:.\Generated_Source\PSoC4/MOTOR.c ****             if( (retMode == MOTOR_WAIT_FOR_COMPLETE_REINIT) ||
1529:.\Generated_Source\PSoC4/MOTOR.c ****                 (retMode == MOTOR_REINIT) ||
 958              		.loc 1 1529 0
 959 003a 0138     		sub	r0, r0, #1
 960              	.LVL67:
1528:.\Generated_Source\PSoC4/MOTOR.c ****                 (retMode == MOTOR_REINIT) ||
 961              		.loc 1 1528 0
 962 003c 0228     		cmp	r0, #2
 963 003e 03D8     		bhi	.L88
1530:.\Generated_Source\PSoC4/MOTOR.c ****                 (retMode == MOTOR_SEND_WAIT_REINIT) )
1531:.\Generated_Source\PSoC4/MOTOR.c ****             {
1532:.\Generated_Source\PSoC4/MOTOR.c **** 
1533:.\Generated_Source\PSoC4/MOTOR.c ****             #if(MOTOR_TXCLKGEN_DP)
1534:.\Generated_Source\PSoC4/MOTOR.c ****                 MOTOR_TXBITCLKTX_COMPLETE_REG = txPeriod;
ARM GAS  C:\Users\HENRYA~1\AppData\Local\Temp\ccSeVATh.s 			page 45


 964              		.loc 1 1534 0
 965 0040 024B     		ldr	r3, .L95
 966 0042 5A78     		ldrb	r2, [r3, #1]
 967 0044 024B     		ldr	r3, .L95+4
 968 0046 1A70     		strb	r2, [r3]
 969              	.L88:
 970              	.LBE2:
1535:.\Generated_Source\PSoC4/MOTOR.c ****             #else
1536:.\Generated_Source\PSoC4/MOTOR.c ****                 MOTOR_TXBITCTR_PERIOD_REG = txPeriod;
1537:.\Generated_Source\PSoC4/MOTOR.c ****             #endif /* End MOTOR_TXCLKGEN_DP */
1538:.\Generated_Source\PSoC4/MOTOR.c **** 
1539:.\Generated_Source\PSoC4/MOTOR.c ****             #if( (MOTOR_PARITY_TYPE != MOTOR__B_UART__NONE_REVB) || \
1540:.\Generated_Source\PSoC4/MOTOR.c ****                  (MOTOR_PARITY_TYPE_SW != 0u) )
1541:.\Generated_Source\PSoC4/MOTOR.c ****                 MOTOR_WriteControlRegister(MOTOR_ReadControlRegister() &
1542:.\Generated_Source\PSoC4/MOTOR.c ****                                                       (uint8) ~MOTOR_CTRL_HD_SEND_BREAK);
1543:.\Generated_Source\PSoC4/MOTOR.c ****             #endif /* End MOTOR_PARITY_TYPE != NONE */
1544:.\Generated_Source\PSoC4/MOTOR.c ****             }
1545:.\Generated_Source\PSoC4/MOTOR.c ****         #endif    /* End MOTOR_HD_ENABLED */
1546:.\Generated_Source\PSoC4/MOTOR.c ****         }
1547:.\Generated_Source\PSoC4/MOTOR.c ****     }
 971              		.loc 1 1547 0
 972              		@ sp needed
 973 0048 7047     		bx	lr
 974              	.L96:
 975 004a C046     		.align	2
 976              	.L95:
 977 004c 00000000 		.word	.LANCHOR0
 978 0050 33000F40 		.word	1074724915
 979 0054 42000F40 		.word	1074724930
 980 0058 62000F40 		.word	1074724962
 981              		.cfi_endproc
 982              	.LFE26:
 983              		.size	MOTOR_SendBreak, .-MOTOR_SendBreak
 984              		.section	.text.MOTOR_SetTxAddressMode,"ax",%progbits
 985              		.align	2
 986              		.global	MOTOR_SetTxAddressMode
 987              		.code	16
 988              		.thumb_func
 989              		.type	MOTOR_SetTxAddressMode, %function
 990              	MOTOR_SetTxAddressMode:
 991              	.LFB27:
1548:.\Generated_Source\PSoC4/MOTOR.c **** 
1549:.\Generated_Source\PSoC4/MOTOR.c **** 
1550:.\Generated_Source\PSoC4/MOTOR.c ****     /*******************************************************************************
1551:.\Generated_Source\PSoC4/MOTOR.c ****     * Function Name: MOTOR_SetTxAddressMode
1552:.\Generated_Source\PSoC4/MOTOR.c ****     ********************************************************************************
1553:.\Generated_Source\PSoC4/MOTOR.c ****     *
1554:.\Generated_Source\PSoC4/MOTOR.c ****     * Summary:
1555:.\Generated_Source\PSoC4/MOTOR.c ****     *  Configures the transmitter to signal the next bytes is address or data.
1556:.\Generated_Source\PSoC4/MOTOR.c ****     *
1557:.\Generated_Source\PSoC4/MOTOR.c ****     * Parameters:
1558:.\Generated_Source\PSoC4/MOTOR.c ****     *  addressMode: 
1559:.\Generated_Source\PSoC4/MOTOR.c ****     *       MOTOR_SET_SPACE - Configure the transmitter to send the next
1560:.\Generated_Source\PSoC4/MOTOR.c ****     *                                    byte as a data.
1561:.\Generated_Source\PSoC4/MOTOR.c ****     *       MOTOR_SET_MARK  - Configure the transmitter to send the next
1562:.\Generated_Source\PSoC4/MOTOR.c ****     *                                    byte as an address.
1563:.\Generated_Source\PSoC4/MOTOR.c ****     *
ARM GAS  C:\Users\HENRYA~1\AppData\Local\Temp\ccSeVATh.s 			page 46


1564:.\Generated_Source\PSoC4/MOTOR.c ****     * Return:
1565:.\Generated_Source\PSoC4/MOTOR.c ****     *  None.
1566:.\Generated_Source\PSoC4/MOTOR.c ****     *
1567:.\Generated_Source\PSoC4/MOTOR.c ****     * Side Effects:
1568:.\Generated_Source\PSoC4/MOTOR.c ****     *  This function sets and clears MOTOR_CTRL_MARK bit in the Control
1569:.\Generated_Source\PSoC4/MOTOR.c ****     *  register.
1570:.\Generated_Source\PSoC4/MOTOR.c ****     *
1571:.\Generated_Source\PSoC4/MOTOR.c ****     *******************************************************************************/
1572:.\Generated_Source\PSoC4/MOTOR.c ****     void MOTOR_SetTxAddressMode(uint8 addressMode) 
1573:.\Generated_Source\PSoC4/MOTOR.c ****     {
 992              		.loc 1 1573 0
 993              		.cfi_startproc
 994              	.LVL68:
1574:.\Generated_Source\PSoC4/MOTOR.c ****         /* Mark/Space sending enable */
1575:.\Generated_Source\PSoC4/MOTOR.c ****         if(addressMode != 0u)
1576:.\Generated_Source\PSoC4/MOTOR.c ****         {
1577:.\Generated_Source\PSoC4/MOTOR.c ****         #if( MOTOR_CONTROL_REG_REMOVED == 0u )
1578:.\Generated_Source\PSoC4/MOTOR.c ****             MOTOR_WriteControlRegister(MOTOR_ReadControlRegister() |
1579:.\Generated_Source\PSoC4/MOTOR.c ****                                                   MOTOR_CTRL_MARK);
1580:.\Generated_Source\PSoC4/MOTOR.c ****         #endif /* End MOTOR_CONTROL_REG_REMOVED == 0u */
1581:.\Generated_Source\PSoC4/MOTOR.c ****         }
1582:.\Generated_Source\PSoC4/MOTOR.c ****         else
1583:.\Generated_Source\PSoC4/MOTOR.c ****         {
1584:.\Generated_Source\PSoC4/MOTOR.c ****         #if( MOTOR_CONTROL_REG_REMOVED == 0u )
1585:.\Generated_Source\PSoC4/MOTOR.c ****             MOTOR_WriteControlRegister(MOTOR_ReadControlRegister() &
1586:.\Generated_Source\PSoC4/MOTOR.c ****                                                   (uint8) ~MOTOR_CTRL_MARK);
1587:.\Generated_Source\PSoC4/MOTOR.c ****         #endif /* End MOTOR_CONTROL_REG_REMOVED == 0u */
1588:.\Generated_Source\PSoC4/MOTOR.c ****         }
1589:.\Generated_Source\PSoC4/MOTOR.c ****     }
 995              		.loc 1 1589 0
 996              		@ sp needed
 997 0000 7047     		bx	lr
 998              		.cfi_endproc
 999              	.LFE27:
 1000              		.size	MOTOR_SetTxAddressMode, .-MOTOR_SetTxAddressMode
 1001              		.global	MOTOR_initVar
 1002 0002 C046     		.bss
 1003              		.set	.LANCHOR0,. + 0
 1004              		.type	MOTOR_initVar, %object
 1005              		.size	MOTOR_initVar, 1
 1006              	MOTOR_initVar:
 1007 0000 00       		.space	1
 1008              		.type	txPeriod.4898, %object
 1009              		.size	txPeriod.4898, 1
 1010              	txPeriod.4898:
 1011 0001 00       		.space	1
 1012              		.text
 1013              	.Letext0:
 1014              		.file 2 ".\\Generated_Source\\PSoC4\\cytypes.h"
 1015              		.file 3 ".\\Generated_Source\\PSoC4\\MOTOR_IntClock.h"
 1016              		.file 4 ".\\Generated_Source\\PSoC4\\CyLib.h"
 1017              		.section	.debug_info,"",%progbits
 1018              	.Ldebug_info0:
 1019 0000 1E060000 		.4byte	0x61e
 1020 0004 0400     		.2byte	0x4
 1021 0006 00000000 		.4byte	.Ldebug_abbrev0
 1022 000a 04       		.byte	0x4
ARM GAS  C:\Users\HENRYA~1\AppData\Local\Temp\ccSeVATh.s 			page 47


 1023 000b 01       		.uleb128 0x1
 1024 000c 5A020000 		.4byte	.LASF62
 1025 0010 01       		.byte	0x1
 1026 0011 02030000 		.4byte	.LASF63
 1027 0015 DE010000 		.4byte	.LASF64
 1028 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1029 001d 00000000 		.4byte	0
 1030 0021 00000000 		.4byte	.Ldebug_line0
 1031 0025 02       		.uleb128 0x2
 1032 0026 01       		.byte	0x1
 1033 0027 06       		.byte	0x6
 1034 0028 AF000000 		.4byte	.LASF0
 1035 002c 02       		.uleb128 0x2
 1036 002d 01       		.byte	0x1
 1037 002e 08       		.byte	0x8
 1038 002f 28030000 		.4byte	.LASF1
 1039 0033 02       		.uleb128 0x2
 1040 0034 02       		.byte	0x2
 1041 0035 05       		.byte	0x5
 1042 0036 36030000 		.4byte	.LASF2
 1043 003a 02       		.uleb128 0x2
 1044 003b 02       		.byte	0x2
 1045 003c 07       		.byte	0x7
 1046 003d 6B010000 		.4byte	.LASF3
 1047 0041 02       		.uleb128 0x2
 1048 0042 04       		.byte	0x4
 1049 0043 05       		.byte	0x5
 1050 0044 C4000000 		.4byte	.LASF4
 1051 0048 02       		.uleb128 0x2
 1052 0049 04       		.byte	0x4
 1053 004a 07       		.byte	0x7
 1054 004b 3D010000 		.4byte	.LASF5
 1055 004f 02       		.uleb128 0x2
 1056 0050 08       		.byte	0x8
 1057 0051 05       		.byte	0x5
 1058 0052 A1000000 		.4byte	.LASF6
 1059 0056 02       		.uleb128 0x2
 1060 0057 08       		.byte	0x8
 1061 0058 07       		.byte	0x7
 1062 0059 5A000000 		.4byte	.LASF7
 1063 005d 03       		.uleb128 0x3
 1064 005e 04       		.byte	0x4
 1065 005f 05       		.byte	0x5
 1066 0060 696E7400 		.ascii	"int\000"
 1067 0064 02       		.uleb128 0x2
 1068 0065 04       		.byte	0x4
 1069 0066 07       		.byte	0x7
 1070 0067 1C010000 		.4byte	.LASF8
 1071 006b 04       		.uleb128 0x4
 1072 006c CD000000 		.4byte	.LASF9
 1073 0070 02       		.byte	0x2
 1074 0071 9801     		.2byte	0x198
 1075 0073 2C000000 		.4byte	0x2c
 1076 0077 04       		.uleb128 0x4
 1077 0078 00000000 		.4byte	.LASF10
 1078 007c 02       		.byte	0x2
 1079 007d 9901     		.2byte	0x199
ARM GAS  C:\Users\HENRYA~1\AppData\Local\Temp\ccSeVATh.s 			page 48


 1080 007f 3A000000 		.4byte	0x3a
 1081 0083 04       		.uleb128 0x4
 1082 0084 E6000000 		.4byte	.LASF11
 1083 0088 02       		.byte	0x2
 1084 0089 9A01     		.2byte	0x19a
 1085 008b 48000000 		.4byte	0x48
 1086 008f 02       		.uleb128 0x2
 1087 0090 04       		.byte	0x4
 1088 0091 04       		.byte	0x4
 1089 0092 FC020000 		.4byte	.LASF12
 1090 0096 02       		.uleb128 0x2
 1091 0097 08       		.byte	0x8
 1092 0098 04       		.byte	0x4
 1093 0099 D3000000 		.4byte	.LASF13
 1094 009d 04       		.uleb128 0x4
 1095 009e C2030000 		.4byte	.LASF14
 1096 00a2 02       		.byte	0x2
 1097 00a3 A901     		.2byte	0x1a9
 1098 00a5 A9000000 		.4byte	0xa9
 1099 00a9 02       		.uleb128 0x2
 1100 00aa 01       		.byte	0x1
 1101 00ab 08       		.byte	0x8
 1102 00ac 96030000 		.4byte	.LASF15
 1103 00b0 04       		.uleb128 0x4
 1104 00b1 23030000 		.4byte	.LASF16
 1105 00b5 02       		.byte	0x2
 1106 00b6 4202     		.2byte	0x242
 1107 00b8 BC000000 		.4byte	0xbc
 1108 00bc 05       		.uleb128 0x5
 1109 00bd 6B000000 		.4byte	0x6b
 1110 00c1 02       		.uleb128 0x2
 1111 00c2 04       		.byte	0x4
 1112 00c3 07       		.byte	0x7
 1113 00c4 22020000 		.4byte	.LASF17
 1114 00c8 06       		.uleb128 0x6
 1115 00c9 5B040000 		.4byte	.LASF65
 1116 00cd 01       		.byte	0x1
 1117 00ce 6A       		.byte	0x6a
 1118 00cf 00000000 		.4byte	.LFB2
 1119 00d3 34000000 		.4byte	.LFE2-.LFB2
 1120 00d7 01       		.uleb128 0x1
 1121 00d8 9C       		.byte	0x9c
 1122 00d9 07       		.uleb128 0x7
 1123 00da 28000000 		.4byte	.LASF18
 1124 00de 01       		.byte	0x1
 1125 00df B7       		.byte	0xb7
 1126 00e0 00000000 		.4byte	.LFB3
 1127 00e4 44000000 		.4byte	.LFE3-.LFB3
 1128 00e8 01       		.uleb128 0x1
 1129 00e9 9C       		.byte	0x9c
 1130 00ea 2B010000 		.4byte	0x12b
 1131 00ee 08       		.uleb128 0x8
 1132 00ef 06040000 		.4byte	.LASF21
 1133 00f3 01       		.byte	0x1
 1134 00f4 B9       		.byte	0xb9
 1135 00f5 6B000000 		.4byte	0x6b
 1136 00f9 00000000 		.4byte	.LLST0
ARM GAS  C:\Users\HENRYA~1\AppData\Local\Temp\ccSeVATh.s 			page 49


 1137 00fd 09       		.uleb128 0x9
 1138 00fe 06000000 		.4byte	.LVL0
 1139 0102 ED050000 		.4byte	0x5ed
 1140 0106 0A       		.uleb128 0xa
 1141 0107 2E000000 		.4byte	.LVL2
 1142 010b F8050000 		.4byte	0x5f8
 1143 010f 1A010000 		.4byte	0x11a
 1144 0113 0B       		.uleb128 0xb
 1145 0114 01       		.uleb128 0x1
 1146 0115 50       		.byte	0x50
 1147 0116 02       		.uleb128 0x2
 1148 0117 08       		.byte	0x8
 1149 0118 FF       		.byte	0xff
 1150 0119 00       		.byte	0
 1151 011a 0C       		.uleb128 0xc
 1152 011b 34000000 		.4byte	.LVL3
 1153 011f 09060000 		.4byte	0x609
 1154 0123 0B       		.uleb128 0xb
 1155 0124 01       		.uleb128 0x1
 1156 0125 50       		.byte	0x50
 1157 0126 02       		.uleb128 0x2
 1158 0127 74       		.byte	0x74
 1159 0128 00       		.sleb128 0
 1160 0129 00       		.byte	0
 1161 012a 00       		.byte	0
 1162 012b 07       		.uleb128 0x7
 1163 012c 35000000 		.4byte	.LASF19
 1164 0130 01       		.byte	0x1
 1165 0131 4C       		.byte	0x4c
 1166 0132 00000000 		.4byte	.LFB1
 1167 0136 20000000 		.4byte	.LFE1-.LFB1
 1168 013a 01       		.uleb128 0x1
 1169 013b 9C       		.byte	0x9c
 1170 013c 53010000 		.4byte	0x153
 1171 0140 09       		.uleb128 0x9
 1172 0141 0E000000 		.4byte	.LVL5
 1173 0145 C8000000 		.4byte	0xc8
 1174 0149 09       		.uleb128 0x9
 1175 014a 18000000 		.4byte	.LVL6
 1176 014e D9000000 		.4byte	0xd9
 1177 0152 00       		.byte	0
 1178 0153 07       		.uleb128 0x7
 1179 0154 33020000 		.4byte	.LASF20
 1180 0158 01       		.byte	0x1
 1181 0159 F0       		.byte	0xf0
 1182 015a 00000000 		.4byte	.LFB4
 1183 015e 3C000000 		.4byte	.LFE4-.LFB4
 1184 0162 01       		.uleb128 0x1
 1185 0163 9C       		.byte	0x9c
 1186 0164 9A010000 		.4byte	0x19a
 1187 0168 08       		.uleb128 0x8
 1188 0169 06040000 		.4byte	.LASF21
 1189 016d 01       		.byte	0x1
 1190 016e F2       		.byte	0xf2
 1191 016f 6B000000 		.4byte	0x6b
 1192 0173 13000000 		.4byte	.LLST1
 1193 0177 09       		.uleb128 0x9
ARM GAS  C:\Users\HENRYA~1\AppData\Local\Temp\ccSeVATh.s 			page 50


 1194 0178 06000000 		.4byte	.LVL7
 1195 017c ED050000 		.4byte	0x5ed
 1196 0180 09       		.uleb128 0x9
 1197 0181 16000000 		.4byte	.LVL9
 1198 0185 1A060000 		.4byte	0x61a
 1199 0189 0C       		.uleb128 0xc
 1200 018a 2E000000 		.4byte	.LVL10
 1201 018e 09060000 		.4byte	0x609
 1202 0192 0B       		.uleb128 0xb
 1203 0193 01       		.uleb128 0x1
 1204 0194 50       		.byte	0x50
 1205 0195 02       		.uleb128 0x2
 1206 0196 74       		.byte	0x74
 1207 0197 00       		.sleb128 0
 1208 0198 00       		.byte	0
 1209 0199 00       		.byte	0
 1210 019a 0D       		.uleb128 0xd
 1211 019b 71000000 		.4byte	.LASF44
 1212 019f 01       		.byte	0x1
 1213 01a0 2701     		.2byte	0x127
 1214 01a2 6B000000 		.4byte	0x6b
 1215 01a6 00000000 		.4byte	.LFB5
 1216 01aa 04000000 		.4byte	.LFE5-.LFB5
 1217 01ae 01       		.uleb128 0x1
 1218 01af 9C       		.byte	0x9c
 1219 01b0 0E       		.uleb128 0xe
 1220 01b1 AA010000 		.4byte	.LASF22
 1221 01b5 01       		.byte	0x1
 1222 01b6 3F01     		.2byte	0x13f
 1223 01b8 00000000 		.4byte	.LFB6
 1224 01bc 02000000 		.4byte	.LFE6-.LFB6
 1225 01c0 01       		.uleb128 0x1
 1226 01c1 9C       		.byte	0x9c
 1227 01c2 D5010000 		.4byte	0x1d5
 1228 01c6 0F       		.uleb128 0xf
 1229 01c7 ED000000 		.4byte	.LASF24
 1230 01cb 01       		.byte	0x1
 1231 01cc 3F01     		.2byte	0x13f
 1232 01ce 6B000000 		.4byte	0x6b
 1233 01d2 01       		.uleb128 0x1
 1234 01d3 50       		.byte	0x50
 1235 01d4 00       		.byte	0
 1236 01d5 0E       		.uleb128 0xe
 1237 01d6 C5010000 		.4byte	.LASF23
 1238 01da 01       		.byte	0x1
 1239 01db 6701     		.2byte	0x167
 1240 01dd 00000000 		.4byte	.LFB7
 1241 01e1 0C000000 		.4byte	.LFE7-.LFB7
 1242 01e5 01       		.uleb128 0x1
 1243 01e6 9C       		.byte	0x9c
 1244 01e7 FA010000 		.4byte	0x1fa
 1245 01eb 0F       		.uleb128 0xf
 1246 01ec 95010000 		.4byte	.LASF25
 1247 01f0 01       		.byte	0x1
 1248 01f1 6701     		.2byte	0x167
 1249 01f3 6B000000 		.4byte	0x6b
 1250 01f7 01       		.uleb128 0x1
ARM GAS  C:\Users\HENRYA~1\AppData\Local\Temp\ccSeVATh.s 			page 51


 1251 01f8 50       		.byte	0x50
 1252 01f9 00       		.byte	0
 1253 01fa 10       		.uleb128 0x10
 1254 01fb 3C040000 		.4byte	.LASF27
 1255 01ff 01       		.byte	0x1
 1256 0200 8801     		.2byte	0x188
 1257 0202 6B000000 		.4byte	0x6b
 1258 0206 00000000 		.4byte	.LFB8
 1259 020a 0C000000 		.4byte	.LFE8-.LFB8
 1260 020e 01       		.uleb128 0x1
 1261 020f 9C       		.byte	0x9c
 1262 0210 23020000 		.4byte	0x223
 1263 0214 11       		.uleb128 0x11
 1264 0215 78030000 		.4byte	.LASF26
 1265 0219 01       		.byte	0x1
 1266 021a 8A01     		.2byte	0x18a
 1267 021c 6B000000 		.4byte	0x6b
 1268 0220 01       		.uleb128 0x1
 1269 0221 50       		.byte	0x50
 1270 0222 00       		.byte	0
 1271 0223 10       		.uleb128 0x10
 1272 0224 3E020000 		.4byte	.LASF28
 1273 0228 01       		.byte	0x1
 1274 0229 E501     		.2byte	0x1e5
 1275 022b 6B000000 		.4byte	0x6b
 1276 022f 00000000 		.4byte	.LFB9
 1277 0233 10000000 		.4byte	.LFE9-.LFB9
 1278 0237 01       		.uleb128 0x1
 1279 0238 9C       		.byte	0x9c
 1280 0239 4C020000 		.4byte	0x24c
 1281 023d 11       		.uleb128 0x11
 1282 023e 17040000 		.4byte	.LASF29
 1283 0242 01       		.byte	0x1
 1284 0243 E701     		.2byte	0x1e7
 1285 0245 6B000000 		.4byte	0x6b
 1286 0249 01       		.uleb128 0x1
 1287 024a 50       		.byte	0x50
 1288 024b 00       		.byte	0
 1289 024c 10       		.uleb128 0x10
 1290 024d 7E010000 		.4byte	.LASF30
 1291 0251 01       		.byte	0x1
 1292 0252 1402     		.2byte	0x214
 1293 0254 6B000000 		.4byte	0x6b
 1294 0258 00000000 		.4byte	.LFB10
 1295 025c 28000000 		.4byte	.LFE10-.LFB10
 1296 0260 01       		.uleb128 0x1
 1297 0261 9C       		.byte	0x9c
 1298 0262 85020000 		.4byte	0x285
 1299 0266 12       		.uleb128 0x12
 1300 0267 78030000 		.4byte	.LASF26
 1301 026b 01       		.byte	0x1
 1302 026c 1602     		.2byte	0x216
 1303 026e 6B000000 		.4byte	0x6b
 1304 0272 26000000 		.4byte	.LLST2
 1305 0276 11       		.uleb128 0x11
 1306 0277 51020000 		.4byte	.LASF31
 1307 027b 01       		.byte	0x1
ARM GAS  C:\Users\HENRYA~1\AppData\Local\Temp\ccSeVATh.s 			page 52


 1308 027c 1702     		.2byte	0x217
 1309 027e 6B000000 		.4byte	0x6b
 1310 0282 01       		.uleb128 0x1
 1311 0283 53       		.byte	0x53
 1312 0284 00       		.byte	0
 1313 0285 10       		.uleb128 0x10
 1314 0286 2E040000 		.4byte	.LASF32
 1315 028a 01       		.byte	0x1
 1316 028b 7A02     		.2byte	0x27a
 1317 028d 77000000 		.4byte	0x77
 1318 0291 00000000 		.4byte	.LFB11
 1319 0295 12000000 		.4byte	.LFE11-.LFB11
 1320 0299 01       		.uleb128 0x1
 1321 029a 9C       		.byte	0x9c
 1322 029b B2020000 		.4byte	0x2b2
 1323 029f 09       		.uleb128 0x9
 1324 02a0 06000000 		.4byte	.LVL22
 1325 02a4 23020000 		.4byte	0x223
 1326 02a8 09       		.uleb128 0x9
 1327 02a9 0C000000 		.4byte	.LVL23
 1328 02ad FA010000 		.4byte	0x1fa
 1329 02b1 00       		.byte	0
 1330 02b2 10       		.uleb128 0x10
 1331 02b3 8B000000 		.4byte	.LASF33
 1332 02b7 01       		.byte	0x1
 1333 02b8 AB02     		.2byte	0x2ab
 1334 02ba 6B000000 		.4byte	0x6b
 1335 02be 00000000 		.4byte	.LFB12
 1336 02c2 14000000 		.4byte	.LFE12-.LFB12
 1337 02c6 01       		.uleb128 0x1
 1338 02c7 9C       		.byte	0x9c
 1339 02c8 DB020000 		.4byte	0x2db
 1340 02cc 11       		.uleb128 0x11
 1341 02cd 66010000 		.4byte	.LASF34
 1342 02d1 01       		.byte	0x1
 1343 02d2 AE02     		.2byte	0x2ae
 1344 02d4 6B000000 		.4byte	0x6b
 1345 02d8 01       		.uleb128 0x1
 1346 02d9 50       		.byte	0x50
 1347 02da 00       		.byte	0
 1348 02db 0E       		.uleb128 0xe
 1349 02dc 66040000 		.4byte	.LASF35
 1350 02e0 01       		.byte	0x1
 1351 02e1 F502     		.2byte	0x2f5
 1352 02e3 00000000 		.4byte	.LFB13
 1353 02e7 24000000 		.4byte	.LFE13-.LFB13
 1354 02eb 01       		.uleb128 0x1
 1355 02ec 9C       		.byte	0x9c
 1356 02ed 14030000 		.4byte	0x314
 1357 02f1 12       		.uleb128 0x12
 1358 02f2 06040000 		.4byte	.LASF21
 1359 02f6 01       		.byte	0x1
 1360 02f7 F702     		.2byte	0x2f7
 1361 02f9 6B000000 		.4byte	0x6b
 1362 02fd 5C000000 		.4byte	.LLST3
 1363 0301 09       		.uleb128 0x9
 1364 0302 06000000 		.4byte	.LVL25
ARM GAS  C:\Users\HENRYA~1\AppData\Local\Temp\ccSeVATh.s 			page 53


 1365 0306 ED050000 		.4byte	0x5ed
 1366 030a 09       		.uleb128 0x9
 1367 030b 1C000000 		.4byte	.LVL26
 1368 030f 09060000 		.4byte	0x609
 1369 0313 00       		.byte	0
 1370 0314 0E       		.uleb128 0xe
 1371 0315 57030000 		.4byte	.LASF36
 1372 0319 01       		.byte	0x1
 1373 031a 2D03     		.2byte	0x32d
 1374 031c 00000000 		.4byte	.LFB14
 1375 0320 02000000 		.4byte	.LFE14-.LFB14
 1376 0324 01       		.uleb128 0x1
 1377 0325 9C       		.byte	0x9c
 1378 0326 39030000 		.4byte	0x339
 1379 032a 0F       		.uleb128 0xf
 1380 032b DA000000 		.4byte	.LASF37
 1381 032f 01       		.byte	0x1
 1382 0330 2D03     		.2byte	0x32d
 1383 0332 6B000000 		.4byte	0x6b
 1384 0336 01       		.uleb128 0x1
 1385 0337 50       		.byte	0x50
 1386 0338 00       		.byte	0
 1387 0339 0E       		.uleb128 0xe
 1388 033a C8030000 		.4byte	.LASF38
 1389 033e 01       		.byte	0x1
 1390 033f 5903     		.2byte	0x359
 1391 0341 00000000 		.4byte	.LFB15
 1392 0345 0C000000 		.4byte	.LFE15-.LFB15
 1393 0349 01       		.uleb128 0x1
 1394 034a 9C       		.byte	0x9c
 1395 034b 5E030000 		.4byte	0x35e
 1396 034f 0F       		.uleb128 0xf
 1397 0350 2B020000 		.4byte	.LASF39
 1398 0354 01       		.byte	0x1
 1399 0355 5903     		.2byte	0x359
 1400 0357 6B000000 		.4byte	0x6b
 1401 035b 01       		.uleb128 0x1
 1402 035c 50       		.byte	0x50
 1403 035d 00       		.byte	0
 1404 035e 0E       		.uleb128 0xe
 1405 035f DC030000 		.4byte	.LASF40
 1406 0363 01       		.byte	0x1
 1407 0364 6D03     		.2byte	0x36d
 1408 0366 00000000 		.4byte	.LFB16
 1409 036a 0C000000 		.4byte	.LFE16-.LFB16
 1410 036e 01       		.uleb128 0x1
 1411 036f 9C       		.byte	0x9c
 1412 0370 83030000 		.4byte	0x383
 1413 0374 0F       		.uleb128 0xf
 1414 0375 2B020000 		.4byte	.LASF39
 1415 0379 01       		.byte	0x1
 1416 037a 6D03     		.2byte	0x36d
 1417 037c 6B000000 		.4byte	0x6b
 1418 0380 01       		.uleb128 0x1
 1419 0381 50       		.byte	0x50
 1420 0382 00       		.byte	0
 1421 0383 0E       		.uleb128 0xe
ARM GAS  C:\Users\HENRYA~1\AppData\Local\Temp\ccSeVATh.s 			page 54


 1422 0384 9B030000 		.4byte	.LASF41
 1423 0388 01       		.byte	0x1
 1424 0389 8C03     		.2byte	0x38c
 1425 038b 00000000 		.4byte	.LFB17
 1426 038f 0C000000 		.4byte	.LFE17-.LFB17
 1427 0393 01       		.uleb128 0x1
 1428 0394 9C       		.byte	0x9c
 1429 0395 A8030000 		.4byte	0x3a8
 1430 0399 0F       		.uleb128 0xf
 1431 039a 95010000 		.4byte	.LASF25
 1432 039e 01       		.byte	0x1
 1433 039f 8C03     		.2byte	0x38c
 1434 03a1 6B000000 		.4byte	0x6b
 1435 03a5 01       		.uleb128 0x1
 1436 03a6 50       		.byte	0x50
 1437 03a7 00       		.byte	0
 1438 03a8 0E       		.uleb128 0xe
 1439 03a9 41000000 		.4byte	.LASF42
 1440 03ad 01       		.byte	0x1
 1441 03ae AE03     		.2byte	0x3ae
 1442 03b0 00000000 		.4byte	.LFB18
 1443 03b4 18000000 		.4byte	.LFE18-.LFB18
 1444 03b8 01       		.uleb128 0x1
 1445 03b9 9C       		.byte	0x9c
 1446 03ba CD030000 		.4byte	0x3cd
 1447 03be 0F       		.uleb128 0xf
 1448 03bf 1D000000 		.4byte	.LASF43
 1449 03c3 01       		.byte	0x1
 1450 03c4 AE03     		.2byte	0x3ae
 1451 03c6 6B000000 		.4byte	0x6b
 1452 03ca 01       		.uleb128 0x1
 1453 03cb 50       		.byte	0x50
 1454 03cc 00       		.byte	0
 1455 03cd 0D       		.uleb128 0xd
 1456 03ce 7A040000 		.4byte	.LASF45
 1457 03d2 01       		.byte	0x1
 1458 03d3 EB03     		.2byte	0x3eb
 1459 03d5 6B000000 		.4byte	0x6b
 1460 03d9 00000000 		.4byte	.LFB19
 1461 03dd 0C000000 		.4byte	.LFE19-.LFB19
 1462 03e1 01       		.uleb128 0x1
 1463 03e2 9C       		.byte	0x9c
 1464 03e3 0E       		.uleb128 0xe
 1465 03e4 B4030000 		.4byte	.LASF46
 1466 03e8 01       		.byte	0x1
 1467 03e9 1104     		.2byte	0x411
 1468 03eb 00000000 		.4byte	.LFB20
 1469 03ef 18000000 		.4byte	.LFE20-.LFB20
 1470 03f3 01       		.uleb128 0x1
 1471 03f4 9C       		.byte	0x9c
 1472 03f5 08040000 		.4byte	0x408
 1473 03f9 0F       		.uleb128 0xf
 1474 03fa 1D000000 		.4byte	.LASF43
 1475 03fe 01       		.byte	0x1
 1476 03ff 1104     		.2byte	0x411
 1477 0401 6B000000 		.4byte	0x6b
 1478 0405 01       		.uleb128 0x1
ARM GAS  C:\Users\HENRYA~1\AppData\Local\Temp\ccSeVATh.s 			page 55


 1479 0406 50       		.byte	0x50
 1480 0407 00       		.byte	0
 1481 0408 0E       		.uleb128 0xe
 1482 0409 1E040000 		.4byte	.LASF47
 1483 040d 01       		.byte	0x1
 1484 040e 7904     		.2byte	0x479
 1485 0410 00000000 		.4byte	.LFB21
 1486 0414 28000000 		.4byte	.LFE21-.LFB21
 1487 0418 01       		.uleb128 0x1
 1488 0419 9C       		.byte	0x9c
 1489 041a 48040000 		.4byte	0x448
 1490 041e 13       		.uleb128 0x13
 1491 041f 53000000 		.4byte	.LASF48
 1492 0423 01       		.byte	0x1
 1493 0424 7904     		.2byte	0x479
 1494 0426 48040000 		.4byte	0x448
 1495 042a 6F000000 		.4byte	.LLST4
 1496 042e 12       		.uleb128 0x12
 1497 042f 8C010000 		.4byte	.LASF49
 1498 0433 01       		.byte	0x1
 1499 0434 7B04     		.2byte	0x47b
 1500 0436 77000000 		.4byte	0x77
 1501 043a B1000000 		.4byte	.LLST5
 1502 043e 09       		.uleb128 0x9
 1503 043f 10000000 		.4byte	.LVL36
 1504 0443 E3030000 		.4byte	0x3e3
 1505 0447 00       		.byte	0
 1506 0448 14       		.uleb128 0x14
 1507 0449 04       		.byte	0x4
 1508 044a 4E040000 		.4byte	0x44e
 1509 044e 15       		.uleb128 0x15
 1510 044f 9D000000 		.4byte	0x9d
 1511 0453 0E       		.uleb128 0xe
 1512 0454 F5000000 		.4byte	.LASF50
 1513 0458 01       		.byte	0x1
 1514 0459 A704     		.2byte	0x4a7
 1515 045b 00000000 		.4byte	.LFB22
 1516 045f 28000000 		.4byte	.LFE22-.LFB22
 1517 0463 01       		.uleb128 0x1
 1518 0464 9C       		.byte	0x9c
 1519 0465 A3040000 		.4byte	0x4a3
 1520 0469 13       		.uleb128 0x13
 1521 046a 53000000 		.4byte	.LASF48
 1522 046e 01       		.byte	0x1
 1523 046f A704     		.2byte	0x4a7
 1524 0471 A3040000 		.4byte	0x4a3
 1525 0475 F2000000 		.4byte	.LLST6
 1526 0479 13       		.uleb128 0x13
 1527 047a 6E030000 		.4byte	.LASF51
 1528 047e 01       		.byte	0x1
 1529 047f A704     		.2byte	0x4a7
 1530 0481 6B000000 		.4byte	0x6b
 1531 0485 34010000 		.4byte	.LLST7
 1532 0489 12       		.uleb128 0x12
 1533 048a 8C010000 		.4byte	.LASF49
 1534 048e 01       		.byte	0x1
 1535 048f AA04     		.2byte	0x4aa
ARM GAS  C:\Users\HENRYA~1\AppData\Local\Temp\ccSeVATh.s 			page 56


 1536 0491 6B000000 		.4byte	0x6b
 1537 0495 6E010000 		.4byte	.LLST8
 1538 0499 09       		.uleb128 0x9
 1539 049a 12000000 		.4byte	.LVL45
 1540 049e E3030000 		.4byte	0x3e3
 1541 04a2 00       		.byte	0
 1542 04a3 14       		.uleb128 0x14
 1543 04a4 04       		.byte	0x4
 1544 04a5 A9040000 		.4byte	0x4a9
 1545 04a9 15       		.uleb128 0x15
 1546 04aa 6B000000 		.4byte	0x6b
 1547 04ae 0E       		.uleb128 0xe
 1548 04af 4D040000 		.4byte	.LASF52
 1549 04b3 01       		.byte	0x1
 1550 04b4 CE04     		.2byte	0x4ce
 1551 04b6 00000000 		.4byte	.LFB23
 1552 04ba 20000000 		.4byte	.LFE23-.LFB23
 1553 04be 01       		.uleb128 0x1
 1554 04bf 9C       		.byte	0x9c
 1555 04c0 00050000 		.4byte	0x500
 1556 04c4 13       		.uleb128 0x13
 1557 04c5 1D000000 		.4byte	.LASF43
 1558 04c9 01       		.byte	0x1
 1559 04ca CE04     		.2byte	0x4ce
 1560 04cc 6B000000 		.4byte	0x6b
 1561 04d0 AF010000 		.4byte	.LLST9
 1562 04d4 09       		.uleb128 0x9
 1563 04d5 0E000000 		.4byte	.LVL52
 1564 04d9 E3030000 		.4byte	0x3e3
 1565 04dd 0A       		.uleb128 0xa
 1566 04de 14000000 		.4byte	.LVL53
 1567 04e2 E3030000 		.4byte	0x3e3
 1568 04e6 F0040000 		.4byte	0x4f0
 1569 04ea 0B       		.uleb128 0xb
 1570 04eb 01       		.uleb128 0x1
 1571 04ec 50       		.byte	0x50
 1572 04ed 01       		.uleb128 0x1
 1573 04ee 3D       		.byte	0x3d
 1574 04ef 00       		.byte	0
 1575 04f0 0C       		.uleb128 0xc
 1576 04f1 1A000000 		.4byte	.LVL54
 1577 04f5 E3030000 		.4byte	0x3e3
 1578 04f9 0B       		.uleb128 0xb
 1579 04fa 01       		.uleb128 0x1
 1580 04fb 50       		.byte	0x50
 1581 04fc 01       		.uleb128 0x1
 1582 04fd 3A       		.byte	0x3a
 1583 04fe 00       		.byte	0
 1584 04ff 00       		.byte	0
 1585 0500 10       		.uleb128 0x10
 1586 0501 F0030000 		.4byte	.LASF53
 1587 0505 01       		.byte	0x1
 1588 0506 F904     		.2byte	0x4f9
 1589 0508 6B000000 		.4byte	0x6b
 1590 050c 00000000 		.4byte	.LFB24
 1591 0510 20000000 		.4byte	.LFE24-.LFB24
 1592 0514 01       		.uleb128 0x1
ARM GAS  C:\Users\HENRYA~1\AppData\Local\Temp\ccSeVATh.s 			page 57


 1593 0515 9C       		.byte	0x9c
 1594 0516 2B050000 		.4byte	0x52b
 1595 051a 12       		.uleb128 0x12
 1596 051b 66010000 		.4byte	.LASF34
 1597 051f 01       		.byte	0x1
 1598 0520 FC04     		.2byte	0x4fc
 1599 0522 6B000000 		.4byte	0x6b
 1600 0526 D0010000 		.4byte	.LLST10
 1601 052a 00       		.byte	0
 1602 052b 0E       		.uleb128 0xe
 1603 052c 29010000 		.4byte	.LASF54
 1604 0530 01       		.byte	0x1
 1605 0531 4A05     		.2byte	0x54a
 1606 0533 00000000 		.4byte	.LFB25
 1607 0537 24000000 		.4byte	.LFE25-.LFB25
 1608 053b 01       		.uleb128 0x1
 1609 053c 9C       		.byte	0x9c
 1610 053d 64050000 		.4byte	0x564
 1611 0541 12       		.uleb128 0x12
 1612 0542 06040000 		.4byte	.LASF21
 1613 0546 01       		.byte	0x1
 1614 0547 4C05     		.2byte	0x54c
 1615 0549 6B000000 		.4byte	0x6b
 1616 054d F9010000 		.4byte	.LLST11
 1617 0551 09       		.uleb128 0x9
 1618 0552 06000000 		.4byte	.LVL60
 1619 0556 ED050000 		.4byte	0x5ed
 1620 055a 09       		.uleb128 0x9
 1621 055b 1C000000 		.4byte	.LVL61
 1622 055f 09060000 		.4byte	0x609
 1623 0563 00       		.byte	0
 1624 0564 0E       		.uleb128 0xe
 1625 0565 04010000 		.4byte	.LASF55
 1626 0569 01       		.byte	0x1
 1627 056a A005     		.2byte	0x5a0
 1628 056c 00000000 		.4byte	.LFB26
 1629 0570 5C000000 		.4byte	.LFE26-.LFB26
 1630 0574 01       		.uleb128 0x1
 1631 0575 9C       		.byte	0x9c
 1632 0576 B7050000 		.4byte	0x5b7
 1633 057a 13       		.uleb128 0x13
 1634 057b 14010000 		.4byte	.LASF56
 1635 057f 01       		.byte	0x1
 1636 0580 A005     		.2byte	0x5a0
 1637 0582 6B000000 		.4byte	0x6b
 1638 0586 0C020000 		.4byte	.LLST12
 1639 058a 16       		.uleb128 0x16
 1640 058b 08000000 		.4byte	.LBB2
 1641 058f 40000000 		.4byte	.LBE2-.LBB2
 1642 0593 12       		.uleb128 0x12
 1643 0594 1A020000 		.4byte	.LASF57
 1644 0598 01       		.byte	0x1
 1645 0599 A805     		.2byte	0x5a8
 1646 059b 6B000000 		.4byte	0x6b
 1647 059f 2D020000 		.4byte	.LLST13
 1648 05a3 11       		.uleb128 0x11
 1649 05a4 BB000000 		.4byte	.LASF58
ARM GAS  C:\Users\HENRYA~1\AppData\Local\Temp\ccSeVATh.s 			page 58


 1650 05a8 01       		.byte	0x1
 1651 05a9 D005     		.2byte	0x5d0
 1652 05ab 6B000000 		.4byte	0x6b
 1653 05af 05       		.uleb128 0x5
 1654 05b0 03       		.byte	0x3
 1655 05b1 01000000 		.4byte	txPeriod.4898
 1656 05b5 00       		.byte	0
 1657 05b6 00       		.byte	0
 1658 05b7 0E       		.uleb128 0xe
 1659 05b8 7F030000 		.4byte	.LASF59
 1660 05bc 01       		.byte	0x1
 1661 05bd 2406     		.2byte	0x624
 1662 05bf 00000000 		.4byte	.LFB27
 1663 05c3 02000000 		.4byte	.LFE27-.LFB27
 1664 05c7 01       		.uleb128 0x1
 1665 05c8 9C       		.byte	0x9c
 1666 05c9 DC050000 		.4byte	0x5dc
 1667 05cd 0F       		.uleb128 0xf
 1668 05ce DA000000 		.4byte	.LASF37
 1669 05d2 01       		.byte	0x1
 1670 05d3 2406     		.2byte	0x624
 1671 05d5 6B000000 		.4byte	0x6b
 1672 05d9 01       		.uleb128 0x1
 1673 05da 50       		.byte	0x50
 1674 05db 00       		.byte	0
 1675 05dc 17       		.uleb128 0x17
 1676 05dd 9C010000 		.4byte	.LASF66
 1677 05e1 01       		.byte	0x1
 1678 05e2 1B       		.byte	0x1b
 1679 05e3 6B000000 		.4byte	0x6b
 1680 05e7 05       		.uleb128 0x5
 1681 05e8 03       		.byte	0x3
 1682 05e9 00000000 		.4byte	MOTOR_initVar
 1683 05ed 18       		.uleb128 0x18
 1684 05ee 4F010000 		.4byte	.LASF67
 1685 05f2 04       		.byte	0x4
 1686 05f3 E3       		.byte	0xe3
 1687 05f4 6B000000 		.4byte	0x6b
 1688 05f8 19       		.uleb128 0x19
 1689 05f9 40030000 		.4byte	.LASF60
 1690 05fd 03       		.byte	0x3
 1691 05fe 1D       		.byte	0x1d
 1692 05ff 09060000 		.4byte	0x609
 1693 0603 1A       		.uleb128 0x1a
 1694 0604 83000000 		.4byte	0x83
 1695 0608 00       		.byte	0
 1696 0609 19       		.uleb128 0x19
 1697 060a 07000000 		.4byte	.LASF61
 1698 060e 04       		.byte	0x4
 1699 060f E4       		.byte	0xe4
 1700 0610 1A060000 		.4byte	0x61a
 1701 0614 1A       		.uleb128 0x1a
 1702 0615 6B000000 		.4byte	0x6b
 1703 0619 00       		.byte	0
 1704 061a 1B       		.uleb128 0x1b
 1705 061b E8020000 		.4byte	.LASF68
 1706 061f 03       		.byte	0x3
ARM GAS  C:\Users\HENRYA~1\AppData\Local\Temp\ccSeVATh.s 			page 59


 1707 0620 27       		.byte	0x27
 1708 0621 00       		.byte	0
 1709              		.section	.debug_abbrev,"",%progbits
 1710              	.Ldebug_abbrev0:
 1711 0000 01       		.uleb128 0x1
 1712 0001 11       		.uleb128 0x11
 1713 0002 01       		.byte	0x1
 1714 0003 25       		.uleb128 0x25
 1715 0004 0E       		.uleb128 0xe
 1716 0005 13       		.uleb128 0x13
 1717 0006 0B       		.uleb128 0xb
 1718 0007 03       		.uleb128 0x3
 1719 0008 0E       		.uleb128 0xe
 1720 0009 1B       		.uleb128 0x1b
 1721 000a 0E       		.uleb128 0xe
 1722 000b 55       		.uleb128 0x55
 1723 000c 17       		.uleb128 0x17
 1724 000d 11       		.uleb128 0x11
 1725 000e 01       		.uleb128 0x1
 1726 000f 10       		.uleb128 0x10
 1727 0010 17       		.uleb128 0x17
 1728 0011 00       		.byte	0
 1729 0012 00       		.byte	0
 1730 0013 02       		.uleb128 0x2
 1731 0014 24       		.uleb128 0x24
 1732 0015 00       		.byte	0
 1733 0016 0B       		.uleb128 0xb
 1734 0017 0B       		.uleb128 0xb
 1735 0018 3E       		.uleb128 0x3e
 1736 0019 0B       		.uleb128 0xb
 1737 001a 03       		.uleb128 0x3
 1738 001b 0E       		.uleb128 0xe
 1739 001c 00       		.byte	0
 1740 001d 00       		.byte	0
 1741 001e 03       		.uleb128 0x3
 1742 001f 24       		.uleb128 0x24
 1743 0020 00       		.byte	0
 1744 0021 0B       		.uleb128 0xb
 1745 0022 0B       		.uleb128 0xb
 1746 0023 3E       		.uleb128 0x3e
 1747 0024 0B       		.uleb128 0xb
 1748 0025 03       		.uleb128 0x3
 1749 0026 08       		.uleb128 0x8
 1750 0027 00       		.byte	0
 1751 0028 00       		.byte	0
 1752 0029 04       		.uleb128 0x4
 1753 002a 16       		.uleb128 0x16
 1754 002b 00       		.byte	0
 1755 002c 03       		.uleb128 0x3
 1756 002d 0E       		.uleb128 0xe
 1757 002e 3A       		.uleb128 0x3a
 1758 002f 0B       		.uleb128 0xb
 1759 0030 3B       		.uleb128 0x3b
 1760 0031 05       		.uleb128 0x5
 1761 0032 49       		.uleb128 0x49
 1762 0033 13       		.uleb128 0x13
 1763 0034 00       		.byte	0
ARM GAS  C:\Users\HENRYA~1\AppData\Local\Temp\ccSeVATh.s 			page 60


 1764 0035 00       		.byte	0
 1765 0036 05       		.uleb128 0x5
 1766 0037 35       		.uleb128 0x35
 1767 0038 00       		.byte	0
 1768 0039 49       		.uleb128 0x49
 1769 003a 13       		.uleb128 0x13
 1770 003b 00       		.byte	0
 1771 003c 00       		.byte	0
 1772 003d 06       		.uleb128 0x6
 1773 003e 2E       		.uleb128 0x2e
 1774 003f 00       		.byte	0
 1775 0040 3F       		.uleb128 0x3f
 1776 0041 19       		.uleb128 0x19
 1777 0042 03       		.uleb128 0x3
 1778 0043 0E       		.uleb128 0xe
 1779 0044 3A       		.uleb128 0x3a
 1780 0045 0B       		.uleb128 0xb
 1781 0046 3B       		.uleb128 0x3b
 1782 0047 0B       		.uleb128 0xb
 1783 0048 27       		.uleb128 0x27
 1784 0049 19       		.uleb128 0x19
 1785 004a 11       		.uleb128 0x11
 1786 004b 01       		.uleb128 0x1
 1787 004c 12       		.uleb128 0x12
 1788 004d 06       		.uleb128 0x6
 1789 004e 40       		.uleb128 0x40
 1790 004f 18       		.uleb128 0x18
 1791 0050 9742     		.uleb128 0x2117
 1792 0052 19       		.uleb128 0x19
 1793 0053 00       		.byte	0
 1794 0054 00       		.byte	0
 1795 0055 07       		.uleb128 0x7
 1796 0056 2E       		.uleb128 0x2e
 1797 0057 01       		.byte	0x1
 1798 0058 3F       		.uleb128 0x3f
 1799 0059 19       		.uleb128 0x19
 1800 005a 03       		.uleb128 0x3
 1801 005b 0E       		.uleb128 0xe
 1802 005c 3A       		.uleb128 0x3a
 1803 005d 0B       		.uleb128 0xb
 1804 005e 3B       		.uleb128 0x3b
 1805 005f 0B       		.uleb128 0xb
 1806 0060 27       		.uleb128 0x27
 1807 0061 19       		.uleb128 0x19
 1808 0062 11       		.uleb128 0x11
 1809 0063 01       		.uleb128 0x1
 1810 0064 12       		.uleb128 0x12
 1811 0065 06       		.uleb128 0x6
 1812 0066 40       		.uleb128 0x40
 1813 0067 18       		.uleb128 0x18
 1814 0068 9742     		.uleb128 0x2117
 1815 006a 19       		.uleb128 0x19
 1816 006b 01       		.uleb128 0x1
 1817 006c 13       		.uleb128 0x13
 1818 006d 00       		.byte	0
 1819 006e 00       		.byte	0
 1820 006f 08       		.uleb128 0x8
ARM GAS  C:\Users\HENRYA~1\AppData\Local\Temp\ccSeVATh.s 			page 61


 1821 0070 34       		.uleb128 0x34
 1822 0071 00       		.byte	0
 1823 0072 03       		.uleb128 0x3
 1824 0073 0E       		.uleb128 0xe
 1825 0074 3A       		.uleb128 0x3a
 1826 0075 0B       		.uleb128 0xb
 1827 0076 3B       		.uleb128 0x3b
 1828 0077 0B       		.uleb128 0xb
 1829 0078 49       		.uleb128 0x49
 1830 0079 13       		.uleb128 0x13
 1831 007a 02       		.uleb128 0x2
 1832 007b 17       		.uleb128 0x17
 1833 007c 00       		.byte	0
 1834 007d 00       		.byte	0
 1835 007e 09       		.uleb128 0x9
 1836 007f 898201   		.uleb128 0x4109
 1837 0082 00       		.byte	0
 1838 0083 11       		.uleb128 0x11
 1839 0084 01       		.uleb128 0x1
 1840 0085 31       		.uleb128 0x31
 1841 0086 13       		.uleb128 0x13
 1842 0087 00       		.byte	0
 1843 0088 00       		.byte	0
 1844 0089 0A       		.uleb128 0xa
 1845 008a 898201   		.uleb128 0x4109
 1846 008d 01       		.byte	0x1
 1847 008e 11       		.uleb128 0x11
 1848 008f 01       		.uleb128 0x1
 1849 0090 31       		.uleb128 0x31
 1850 0091 13       		.uleb128 0x13
 1851 0092 01       		.uleb128 0x1
 1852 0093 13       		.uleb128 0x13
 1853 0094 00       		.byte	0
 1854 0095 00       		.byte	0
 1855 0096 0B       		.uleb128 0xb
 1856 0097 8A8201   		.uleb128 0x410a
 1857 009a 00       		.byte	0
 1858 009b 02       		.uleb128 0x2
 1859 009c 18       		.uleb128 0x18
 1860 009d 9142     		.uleb128 0x2111
 1861 009f 18       		.uleb128 0x18
 1862 00a0 00       		.byte	0
 1863 00a1 00       		.byte	0
 1864 00a2 0C       		.uleb128 0xc
 1865 00a3 898201   		.uleb128 0x4109
 1866 00a6 01       		.byte	0x1
 1867 00a7 11       		.uleb128 0x11
 1868 00a8 01       		.uleb128 0x1
 1869 00a9 31       		.uleb128 0x31
 1870 00aa 13       		.uleb128 0x13
 1871 00ab 00       		.byte	0
 1872 00ac 00       		.byte	0
 1873 00ad 0D       		.uleb128 0xd
 1874 00ae 2E       		.uleb128 0x2e
 1875 00af 00       		.byte	0
 1876 00b0 3F       		.uleb128 0x3f
 1877 00b1 19       		.uleb128 0x19
ARM GAS  C:\Users\HENRYA~1\AppData\Local\Temp\ccSeVATh.s 			page 62


 1878 00b2 03       		.uleb128 0x3
 1879 00b3 0E       		.uleb128 0xe
 1880 00b4 3A       		.uleb128 0x3a
 1881 00b5 0B       		.uleb128 0xb
 1882 00b6 3B       		.uleb128 0x3b
 1883 00b7 05       		.uleb128 0x5
 1884 00b8 27       		.uleb128 0x27
 1885 00b9 19       		.uleb128 0x19
 1886 00ba 49       		.uleb128 0x49
 1887 00bb 13       		.uleb128 0x13
 1888 00bc 11       		.uleb128 0x11
 1889 00bd 01       		.uleb128 0x1
 1890 00be 12       		.uleb128 0x12
 1891 00bf 06       		.uleb128 0x6
 1892 00c0 40       		.uleb128 0x40
 1893 00c1 18       		.uleb128 0x18
 1894 00c2 9742     		.uleb128 0x2117
 1895 00c4 19       		.uleb128 0x19
 1896 00c5 00       		.byte	0
 1897 00c6 00       		.byte	0
 1898 00c7 0E       		.uleb128 0xe
 1899 00c8 2E       		.uleb128 0x2e
 1900 00c9 01       		.byte	0x1
 1901 00ca 3F       		.uleb128 0x3f
 1902 00cb 19       		.uleb128 0x19
 1903 00cc 03       		.uleb128 0x3
 1904 00cd 0E       		.uleb128 0xe
 1905 00ce 3A       		.uleb128 0x3a
 1906 00cf 0B       		.uleb128 0xb
 1907 00d0 3B       		.uleb128 0x3b
 1908 00d1 05       		.uleb128 0x5
 1909 00d2 27       		.uleb128 0x27
 1910 00d3 19       		.uleb128 0x19
 1911 00d4 11       		.uleb128 0x11
 1912 00d5 01       		.uleb128 0x1
 1913 00d6 12       		.uleb128 0x12
 1914 00d7 06       		.uleb128 0x6
 1915 00d8 40       		.uleb128 0x40
 1916 00d9 18       		.uleb128 0x18
 1917 00da 9742     		.uleb128 0x2117
 1918 00dc 19       		.uleb128 0x19
 1919 00dd 01       		.uleb128 0x1
 1920 00de 13       		.uleb128 0x13
 1921 00df 00       		.byte	0
 1922 00e0 00       		.byte	0
 1923 00e1 0F       		.uleb128 0xf
 1924 00e2 05       		.uleb128 0x5
 1925 00e3 00       		.byte	0
 1926 00e4 03       		.uleb128 0x3
 1927 00e5 0E       		.uleb128 0xe
 1928 00e6 3A       		.uleb128 0x3a
 1929 00e7 0B       		.uleb128 0xb
 1930 00e8 3B       		.uleb128 0x3b
 1931 00e9 05       		.uleb128 0x5
 1932 00ea 49       		.uleb128 0x49
 1933 00eb 13       		.uleb128 0x13
 1934 00ec 02       		.uleb128 0x2
ARM GAS  C:\Users\HENRYA~1\AppData\Local\Temp\ccSeVATh.s 			page 63


 1935 00ed 18       		.uleb128 0x18
 1936 00ee 00       		.byte	0
 1937 00ef 00       		.byte	0
 1938 00f0 10       		.uleb128 0x10
 1939 00f1 2E       		.uleb128 0x2e
 1940 00f2 01       		.byte	0x1
 1941 00f3 3F       		.uleb128 0x3f
 1942 00f4 19       		.uleb128 0x19
 1943 00f5 03       		.uleb128 0x3
 1944 00f6 0E       		.uleb128 0xe
 1945 00f7 3A       		.uleb128 0x3a
 1946 00f8 0B       		.uleb128 0xb
 1947 00f9 3B       		.uleb128 0x3b
 1948 00fa 05       		.uleb128 0x5
 1949 00fb 27       		.uleb128 0x27
 1950 00fc 19       		.uleb128 0x19
 1951 00fd 49       		.uleb128 0x49
 1952 00fe 13       		.uleb128 0x13
 1953 00ff 11       		.uleb128 0x11
 1954 0100 01       		.uleb128 0x1
 1955 0101 12       		.uleb128 0x12
 1956 0102 06       		.uleb128 0x6
 1957 0103 40       		.uleb128 0x40
 1958 0104 18       		.uleb128 0x18
 1959 0105 9742     		.uleb128 0x2117
 1960 0107 19       		.uleb128 0x19
 1961 0108 01       		.uleb128 0x1
 1962 0109 13       		.uleb128 0x13
 1963 010a 00       		.byte	0
 1964 010b 00       		.byte	0
 1965 010c 11       		.uleb128 0x11
 1966 010d 34       		.uleb128 0x34
 1967 010e 00       		.byte	0
 1968 010f 03       		.uleb128 0x3
 1969 0110 0E       		.uleb128 0xe
 1970 0111 3A       		.uleb128 0x3a
 1971 0112 0B       		.uleb128 0xb
 1972 0113 3B       		.uleb128 0x3b
 1973 0114 05       		.uleb128 0x5
 1974 0115 49       		.uleb128 0x49
 1975 0116 13       		.uleb128 0x13
 1976 0117 02       		.uleb128 0x2
 1977 0118 18       		.uleb128 0x18
 1978 0119 00       		.byte	0
 1979 011a 00       		.byte	0
 1980 011b 12       		.uleb128 0x12
 1981 011c 34       		.uleb128 0x34
 1982 011d 00       		.byte	0
 1983 011e 03       		.uleb128 0x3
 1984 011f 0E       		.uleb128 0xe
 1985 0120 3A       		.uleb128 0x3a
 1986 0121 0B       		.uleb128 0xb
 1987 0122 3B       		.uleb128 0x3b
 1988 0123 05       		.uleb128 0x5
 1989 0124 49       		.uleb128 0x49
 1990 0125 13       		.uleb128 0x13
 1991 0126 02       		.uleb128 0x2
ARM GAS  C:\Users\HENRYA~1\AppData\Local\Temp\ccSeVATh.s 			page 64


 1992 0127 17       		.uleb128 0x17
 1993 0128 00       		.byte	0
 1994 0129 00       		.byte	0
 1995 012a 13       		.uleb128 0x13
 1996 012b 05       		.uleb128 0x5
 1997 012c 00       		.byte	0
 1998 012d 03       		.uleb128 0x3
 1999 012e 0E       		.uleb128 0xe
 2000 012f 3A       		.uleb128 0x3a
 2001 0130 0B       		.uleb128 0xb
 2002 0131 3B       		.uleb128 0x3b
 2003 0132 05       		.uleb128 0x5
 2004 0133 49       		.uleb128 0x49
 2005 0134 13       		.uleb128 0x13
 2006 0135 02       		.uleb128 0x2
 2007 0136 17       		.uleb128 0x17
 2008 0137 00       		.byte	0
 2009 0138 00       		.byte	0
 2010 0139 14       		.uleb128 0x14
 2011 013a 0F       		.uleb128 0xf
 2012 013b 00       		.byte	0
 2013 013c 0B       		.uleb128 0xb
 2014 013d 0B       		.uleb128 0xb
 2015 013e 49       		.uleb128 0x49
 2016 013f 13       		.uleb128 0x13
 2017 0140 00       		.byte	0
 2018 0141 00       		.byte	0
 2019 0142 15       		.uleb128 0x15
 2020 0143 26       		.uleb128 0x26
 2021 0144 00       		.byte	0
 2022 0145 49       		.uleb128 0x49
 2023 0146 13       		.uleb128 0x13
 2024 0147 00       		.byte	0
 2025 0148 00       		.byte	0
 2026 0149 16       		.uleb128 0x16
 2027 014a 0B       		.uleb128 0xb
 2028 014b 01       		.byte	0x1
 2029 014c 11       		.uleb128 0x11
 2030 014d 01       		.uleb128 0x1
 2031 014e 12       		.uleb128 0x12
 2032 014f 06       		.uleb128 0x6
 2033 0150 00       		.byte	0
 2034 0151 00       		.byte	0
 2035 0152 17       		.uleb128 0x17
 2036 0153 34       		.uleb128 0x34
 2037 0154 00       		.byte	0
 2038 0155 03       		.uleb128 0x3
 2039 0156 0E       		.uleb128 0xe
 2040 0157 3A       		.uleb128 0x3a
 2041 0158 0B       		.uleb128 0xb
 2042 0159 3B       		.uleb128 0x3b
 2043 015a 0B       		.uleb128 0xb
 2044 015b 49       		.uleb128 0x49
 2045 015c 13       		.uleb128 0x13
 2046 015d 3F       		.uleb128 0x3f
 2047 015e 19       		.uleb128 0x19
 2048 015f 02       		.uleb128 0x2
ARM GAS  C:\Users\HENRYA~1\AppData\Local\Temp\ccSeVATh.s 			page 65


 2049 0160 18       		.uleb128 0x18
 2050 0161 00       		.byte	0
 2051 0162 00       		.byte	0
 2052 0163 18       		.uleb128 0x18
 2053 0164 2E       		.uleb128 0x2e
 2054 0165 00       		.byte	0
 2055 0166 3F       		.uleb128 0x3f
 2056 0167 19       		.uleb128 0x19
 2057 0168 03       		.uleb128 0x3
 2058 0169 0E       		.uleb128 0xe
 2059 016a 3A       		.uleb128 0x3a
 2060 016b 0B       		.uleb128 0xb
 2061 016c 3B       		.uleb128 0x3b
 2062 016d 0B       		.uleb128 0xb
 2063 016e 27       		.uleb128 0x27
 2064 016f 19       		.uleb128 0x19
 2065 0170 49       		.uleb128 0x49
 2066 0171 13       		.uleb128 0x13
 2067 0172 3C       		.uleb128 0x3c
 2068 0173 19       		.uleb128 0x19
 2069 0174 00       		.byte	0
 2070 0175 00       		.byte	0
 2071 0176 19       		.uleb128 0x19
 2072 0177 2E       		.uleb128 0x2e
 2073 0178 01       		.byte	0x1
 2074 0179 3F       		.uleb128 0x3f
 2075 017a 19       		.uleb128 0x19
 2076 017b 03       		.uleb128 0x3
 2077 017c 0E       		.uleb128 0xe
 2078 017d 3A       		.uleb128 0x3a
 2079 017e 0B       		.uleb128 0xb
 2080 017f 3B       		.uleb128 0x3b
 2081 0180 0B       		.uleb128 0xb
 2082 0181 27       		.uleb128 0x27
 2083 0182 19       		.uleb128 0x19
 2084 0183 3C       		.uleb128 0x3c
 2085 0184 19       		.uleb128 0x19
 2086 0185 01       		.uleb128 0x1
 2087 0186 13       		.uleb128 0x13
 2088 0187 00       		.byte	0
 2089 0188 00       		.byte	0
 2090 0189 1A       		.uleb128 0x1a
 2091 018a 05       		.uleb128 0x5
 2092 018b 00       		.byte	0
 2093 018c 49       		.uleb128 0x49
 2094 018d 13       		.uleb128 0x13
 2095 018e 00       		.byte	0
 2096 018f 00       		.byte	0
 2097 0190 1B       		.uleb128 0x1b
 2098 0191 2E       		.uleb128 0x2e
 2099 0192 00       		.byte	0
 2100 0193 3F       		.uleb128 0x3f
 2101 0194 19       		.uleb128 0x19
 2102 0195 03       		.uleb128 0x3
 2103 0196 0E       		.uleb128 0xe
 2104 0197 3A       		.uleb128 0x3a
 2105 0198 0B       		.uleb128 0xb
ARM GAS  C:\Users\HENRYA~1\AppData\Local\Temp\ccSeVATh.s 			page 66


 2106 0199 3B       		.uleb128 0x3b
 2107 019a 0B       		.uleb128 0xb
 2108 019b 27       		.uleb128 0x27
 2109 019c 19       		.uleb128 0x19
 2110 019d 3C       		.uleb128 0x3c
 2111 019e 19       		.uleb128 0x19
 2112 019f 00       		.byte	0
 2113 01a0 00       		.byte	0
 2114 01a1 00       		.byte	0
 2115              		.section	.debug_loc,"",%progbits
 2116              	.Ldebug_loc0:
 2117              	.LLST0:
 2118 0000 08000000 		.4byte	.LVL1
 2119 0004 34000000 		.4byte	.LVL4
 2120 0008 0100     		.2byte	0x1
 2121 000a 54       		.byte	0x54
 2122 000b 00000000 		.4byte	0
 2123 000f 00000000 		.4byte	0
 2124              	.LLST1:
 2125 0013 08000000 		.4byte	.LVL8
 2126 0017 2E000000 		.4byte	.LVL11
 2127 001b 0100     		.2byte	0x1
 2128 001d 54       		.byte	0x54
 2129 001e 00000000 		.4byte	0
 2130 0022 00000000 		.4byte	0
 2131              	.LLST2:
 2132 0026 00000000 		.4byte	.LVL16
 2133 002a 10000000 		.4byte	.LVL18
 2134 002e 0200     		.2byte	0x2
 2135 0030 30       		.byte	0x30
 2136 0031 9F       		.byte	0x9f
 2137 0032 10000000 		.4byte	.LVL18
 2138 0036 18000000 		.4byte	.LVL19
 2139 003a 0100     		.2byte	0x1
 2140 003c 50       		.byte	0x50
 2141 003d 18000000 		.4byte	.LVL19
 2142 0041 1C000000 		.4byte	.LVL20
 2143 0045 0200     		.2byte	0x2
 2144 0047 30       		.byte	0x30
 2145 0048 9F       		.byte	0x9f
 2146 0049 1C000000 		.4byte	.LVL20
 2147 004d 28000000 		.4byte	.LFE10
 2148 0051 0100     		.2byte	0x1
 2149 0053 50       		.byte	0x50
 2150 0054 00000000 		.4byte	0
 2151 0058 00000000 		.4byte	0
 2152              	.LLST3:
 2153 005c 06000000 		.4byte	.LVL25
 2154 0060 1B000000 		.4byte	.LVL26-1
 2155 0064 0100     		.2byte	0x1
 2156 0066 50       		.byte	0x50
 2157 0067 00000000 		.4byte	0
 2158 006b 00000000 		.4byte	0
 2159              	.LLST4:
 2160 006f 00000000 		.4byte	.LVL33
 2161 0073 0C000000 		.4byte	.LVL35
 2162 0077 0100     		.2byte	0x1
ARM GAS  C:\Users\HENRYA~1\AppData\Local\Temp\ccSeVATh.s 			page 67


 2163 0079 50       		.byte	0x50
 2164 007a 0C000000 		.4byte	.LVL35
 2165 007e 16000000 		.4byte	.LVL39
 2166 0082 0100     		.2byte	0x1
 2167 0084 55       		.byte	0x55
 2168 0085 16000000 		.4byte	.LVL39
 2169 0089 1A000000 		.4byte	.LVL40
 2170 008d 0100     		.2byte	0x1
 2171 008f 50       		.byte	0x50
 2172 0090 1A000000 		.4byte	.LVL40
 2173 0094 20000000 		.4byte	.LVL41
 2174 0098 0100     		.2byte	0x1
 2175 009a 55       		.byte	0x55
 2176 009b 20000000 		.4byte	.LVL41
 2177 009f 28000000 		.4byte	.LFE21
 2178 00a3 0400     		.2byte	0x4
 2179 00a5 F3       		.byte	0xf3
 2180 00a6 01       		.uleb128 0x1
 2181 00a7 50       		.byte	0x50
 2182 00a8 9F       		.byte	0x9f
 2183 00a9 00000000 		.4byte	0
 2184 00ad 00000000 		.4byte	0
 2185              	.LLST5:
 2186 00b1 02000000 		.4byte	.LVL34
 2187 00b5 0C000000 		.4byte	.LVL35
 2188 00b9 0200     		.2byte	0x2
 2189 00bb 30       		.byte	0x30
 2190 00bc 9F       		.byte	0x9f
 2191 00bd 0C000000 		.4byte	.LVL35
 2192 00c1 12000000 		.4byte	.LVL37
 2193 00c5 0100     		.2byte	0x1
 2194 00c7 54       		.byte	0x54
 2195 00c8 14000000 		.4byte	.LVL38
 2196 00cc 16000000 		.4byte	.LVL39
 2197 00d0 0100     		.2byte	0x1
 2198 00d2 54       		.byte	0x54
 2199 00d3 16000000 		.4byte	.LVL39
 2200 00d7 1A000000 		.4byte	.LVL40
 2201 00db 0200     		.2byte	0x2
 2202 00dd 30       		.byte	0x30
 2203 00de 9F       		.byte	0x9f
 2204 00df 1A000000 		.4byte	.LVL40
 2205 00e3 20000000 		.4byte	.LVL41
 2206 00e7 0100     		.2byte	0x1
 2207 00e9 54       		.byte	0x54
 2208 00ea 00000000 		.4byte	0
 2209 00ee 00000000 		.4byte	0
 2210              	.LLST6:
 2211 00f2 00000000 		.4byte	.LVL42
 2212 00f6 0C000000 		.4byte	.LVL44
 2213 00fa 0100     		.2byte	0x1
 2214 00fc 50       		.byte	0x50
 2215 00fd 0C000000 		.4byte	.LVL44
 2216 0101 18000000 		.4byte	.LVL48
 2217 0105 0100     		.2byte	0x1
 2218 0107 56       		.byte	0x56
 2219 0108 18000000 		.4byte	.LVL48
ARM GAS  C:\Users\HENRYA~1\AppData\Local\Temp\ccSeVATh.s 			page 68


 2220 010c 1E000000 		.4byte	.LVL49
 2221 0110 0100     		.2byte	0x1
 2222 0112 50       		.byte	0x50
 2223 0113 1E000000 		.4byte	.LVL49
 2224 0117 22000000 		.4byte	.LVL50
 2225 011b 0100     		.2byte	0x1
 2226 011d 56       		.byte	0x56
 2227 011e 22000000 		.4byte	.LVL50
 2228 0122 28000000 		.4byte	.LFE22
 2229 0126 0400     		.2byte	0x4
 2230 0128 F3       		.byte	0xf3
 2231 0129 01       		.uleb128 0x1
 2232 012a 50       		.byte	0x50
 2233 012b 9F       		.byte	0x9f
 2234 012c 00000000 		.4byte	0
 2235 0130 00000000 		.4byte	0
 2236              	.LLST7:
 2237 0134 00000000 		.4byte	.LVL42
 2238 0138 0C000000 		.4byte	.LVL44
 2239 013c 0100     		.2byte	0x1
 2240 013e 51       		.byte	0x51
 2241 013f 0C000000 		.4byte	.LVL44
 2242 0143 18000000 		.4byte	.LVL48
 2243 0147 0400     		.2byte	0x4
 2244 0149 F3       		.byte	0xf3
 2245 014a 01       		.uleb128 0x1
 2246 014b 51       		.byte	0x51
 2247 014c 9F       		.byte	0x9f
 2248 014d 18000000 		.4byte	.LVL48
 2249 0151 1E000000 		.4byte	.LVL49
 2250 0155 0100     		.2byte	0x1
 2251 0157 51       		.byte	0x51
 2252 0158 1E000000 		.4byte	.LVL49
 2253 015c 28000000 		.4byte	.LFE22
 2254 0160 0400     		.2byte	0x4
 2255 0162 F3       		.byte	0xf3
 2256 0163 01       		.uleb128 0x1
 2257 0164 51       		.byte	0x51
 2258 0165 9F       		.byte	0x9f
 2259 0166 00000000 		.4byte	0
 2260 016a 00000000 		.4byte	0
 2261              	.LLST8:
 2262 016e 02000000 		.4byte	.LVL43
 2263 0172 0C000000 		.4byte	.LVL44
 2264 0176 0200     		.2byte	0x2
 2265 0178 30       		.byte	0x30
 2266 0179 9F       		.byte	0x9f
 2267 017a 0C000000 		.4byte	.LVL44
 2268 017e 14000000 		.4byte	.LVL46
 2269 0182 0100     		.2byte	0x1
 2270 0184 54       		.byte	0x54
 2271 0185 16000000 		.4byte	.LVL47
 2272 0189 18000000 		.4byte	.LVL48
 2273 018d 0100     		.2byte	0x1
 2274 018f 54       		.byte	0x54
 2275 0190 18000000 		.4byte	.LVL48
 2276 0194 1E000000 		.4byte	.LVL49
ARM GAS  C:\Users\HENRYA~1\AppData\Local\Temp\ccSeVATh.s 			page 69


 2277 0198 0200     		.2byte	0x2
 2278 019a 30       		.byte	0x30
 2279 019b 9F       		.byte	0x9f
 2280 019c 1E000000 		.4byte	.LVL49
 2281 01a0 22000000 		.4byte	.LVL50
 2282 01a4 0100     		.2byte	0x1
 2283 01a6 54       		.byte	0x54
 2284 01a7 00000000 		.4byte	0
 2285 01ab 00000000 		.4byte	0
 2286              	.LLST9:
 2287 01af 00000000 		.4byte	.LVL51
 2288 01b3 0D000000 		.4byte	.LVL52-1
 2289 01b7 0100     		.2byte	0x1
 2290 01b9 50       		.byte	0x50
 2291 01ba 0D000000 		.4byte	.LVL52-1
 2292 01be 20000000 		.4byte	.LFE23
 2293 01c2 0400     		.2byte	0x4
 2294 01c4 F3       		.byte	0xf3
 2295 01c5 01       		.uleb128 0x1
 2296 01c6 50       		.byte	0x50
 2297 01c7 9F       		.byte	0x9f
 2298 01c8 00000000 		.4byte	0
 2299 01cc 00000000 		.4byte	0
 2300              	.LLST10:
 2301 01d0 06000000 		.4byte	.LVL55
 2302 01d4 0E000000 		.4byte	.LVL56
 2303 01d8 0100     		.2byte	0x1
 2304 01da 53       		.byte	0x53
 2305 01db 12000000 		.4byte	.LVL57
 2306 01df 16000000 		.4byte	.LVL58
 2307 01e3 0100     		.2byte	0x1
 2308 01e5 53       		.byte	0x53
 2309 01e6 18000000 		.4byte	.LVL59
 2310 01ea 20000000 		.4byte	.LFE24
 2311 01ee 0100     		.2byte	0x1
 2312 01f0 50       		.byte	0x50
 2313 01f1 00000000 		.4byte	0
 2314 01f5 00000000 		.4byte	0
 2315              	.LLST11:
 2316 01f9 06000000 		.4byte	.LVL60
 2317 01fd 1B000000 		.4byte	.LVL61-1
 2318 0201 0100     		.2byte	0x1
 2319 0203 50       		.byte	0x50
 2320 0204 00000000 		.4byte	0
 2321 0208 00000000 		.4byte	0
 2322              	.LLST12:
 2323 020c 00000000 		.4byte	.LVL62
 2324 0210 3C000000 		.4byte	.LVL67
 2325 0214 0100     		.2byte	0x1
 2326 0216 50       		.byte	0x50
 2327 0217 3C000000 		.4byte	.LVL67
 2328 021b 5C000000 		.4byte	.LFE26
 2329 021f 0400     		.2byte	0x4
 2330 0221 F3       		.byte	0xf3
 2331 0222 01       		.uleb128 0x1
 2332 0223 50       		.byte	0x50
 2333 0224 9F       		.byte	0x9f
ARM GAS  C:\Users\HENRYA~1\AppData\Local\Temp\ccSeVATh.s 			page 70


 2334 0225 00000000 		.4byte	0
 2335 0229 00000000 		.4byte	0
 2336              	.LLST13:
 2337 022d 26000000 		.4byte	.LVL63
 2338 0231 2A000000 		.4byte	.LVL64
 2339 0235 0100     		.2byte	0x1
 2340 0237 53       		.byte	0x53
 2341 0238 36000000 		.4byte	.LVL65
 2342 023c 3A000000 		.4byte	.LVL66
 2343 0240 0100     		.2byte	0x1
 2344 0242 53       		.byte	0x53
 2345 0243 00000000 		.4byte	0
 2346 0247 00000000 		.4byte	0
 2347              		.section	.debug_aranges,"",%progbits
 2348 0000 EC000000 		.4byte	0xec
 2349 0004 0200     		.2byte	0x2
 2350 0006 00000000 		.4byte	.Ldebug_info0
 2351 000a 04       		.byte	0x4
 2352 000b 00       		.byte	0
 2353 000c 0000     		.2byte	0
 2354 000e 0000     		.2byte	0
 2355 0010 00000000 		.4byte	.LFB2
 2356 0014 34000000 		.4byte	.LFE2-.LFB2
 2357 0018 00000000 		.4byte	.LFB3
 2358 001c 44000000 		.4byte	.LFE3-.LFB3
 2359 0020 00000000 		.4byte	.LFB1
 2360 0024 20000000 		.4byte	.LFE1-.LFB1
 2361 0028 00000000 		.4byte	.LFB4
 2362 002c 3C000000 		.4byte	.LFE4-.LFB4
 2363 0030 00000000 		.4byte	.LFB5
 2364 0034 04000000 		.4byte	.LFE5-.LFB5
 2365 0038 00000000 		.4byte	.LFB6
 2366 003c 02000000 		.4byte	.LFE6-.LFB6
 2367 0040 00000000 		.4byte	.LFB7
 2368 0044 0C000000 		.4byte	.LFE7-.LFB7
 2369 0048 00000000 		.4byte	.LFB8
 2370 004c 0C000000 		.4byte	.LFE8-.LFB8
 2371 0050 00000000 		.4byte	.LFB9
 2372 0054 10000000 		.4byte	.LFE9-.LFB9
 2373 0058 00000000 		.4byte	.LFB10
 2374 005c 28000000 		.4byte	.LFE10-.LFB10
 2375 0060 00000000 		.4byte	.LFB11
 2376 0064 12000000 		.4byte	.LFE11-.LFB11
 2377 0068 00000000 		.4byte	.LFB12
 2378 006c 14000000 		.4byte	.LFE12-.LFB12
 2379 0070 00000000 		.4byte	.LFB13
 2380 0074 24000000 		.4byte	.LFE13-.LFB13
 2381 0078 00000000 		.4byte	.LFB14
 2382 007c 02000000 		.4byte	.LFE14-.LFB14
 2383 0080 00000000 		.4byte	.LFB15
 2384 0084 0C000000 		.4byte	.LFE15-.LFB15
 2385 0088 00000000 		.4byte	.LFB16
 2386 008c 0C000000 		.4byte	.LFE16-.LFB16
 2387 0090 00000000 		.4byte	.LFB17
 2388 0094 0C000000 		.4byte	.LFE17-.LFB17
 2389 0098 00000000 		.4byte	.LFB18
 2390 009c 18000000 		.4byte	.LFE18-.LFB18
ARM GAS  C:\Users\HENRYA~1\AppData\Local\Temp\ccSeVATh.s 			page 71


 2391 00a0 00000000 		.4byte	.LFB19
 2392 00a4 0C000000 		.4byte	.LFE19-.LFB19
 2393 00a8 00000000 		.4byte	.LFB20
 2394 00ac 18000000 		.4byte	.LFE20-.LFB20
 2395 00b0 00000000 		.4byte	.LFB21
 2396 00b4 28000000 		.4byte	.LFE21-.LFB21
 2397 00b8 00000000 		.4byte	.LFB22
 2398 00bc 28000000 		.4byte	.LFE22-.LFB22
 2399 00c0 00000000 		.4byte	.LFB23
 2400 00c4 20000000 		.4byte	.LFE23-.LFB23
 2401 00c8 00000000 		.4byte	.LFB24
 2402 00cc 20000000 		.4byte	.LFE24-.LFB24
 2403 00d0 00000000 		.4byte	.LFB25
 2404 00d4 24000000 		.4byte	.LFE25-.LFB25
 2405 00d8 00000000 		.4byte	.LFB26
 2406 00dc 5C000000 		.4byte	.LFE26-.LFB26
 2407 00e0 00000000 		.4byte	.LFB27
 2408 00e4 02000000 		.4byte	.LFE27-.LFB27
 2409 00e8 00000000 		.4byte	0
 2410 00ec 00000000 		.4byte	0
 2411              		.section	.debug_ranges,"",%progbits
 2412              	.Ldebug_ranges0:
 2413 0000 00000000 		.4byte	.LFB2
 2414 0004 34000000 		.4byte	.LFE2
 2415 0008 00000000 		.4byte	.LFB3
 2416 000c 44000000 		.4byte	.LFE3
 2417 0010 00000000 		.4byte	.LFB1
 2418 0014 20000000 		.4byte	.LFE1
 2419 0018 00000000 		.4byte	.LFB4
 2420 001c 3C000000 		.4byte	.LFE4
 2421 0020 00000000 		.4byte	.LFB5
 2422 0024 04000000 		.4byte	.LFE5
 2423 0028 00000000 		.4byte	.LFB6
 2424 002c 02000000 		.4byte	.LFE6
 2425 0030 00000000 		.4byte	.LFB7
 2426 0034 0C000000 		.4byte	.LFE7
 2427 0038 00000000 		.4byte	.LFB8
 2428 003c 0C000000 		.4byte	.LFE8
 2429 0040 00000000 		.4byte	.LFB9
 2430 0044 10000000 		.4byte	.LFE9
 2431 0048 00000000 		.4byte	.LFB10
 2432 004c 28000000 		.4byte	.LFE10
 2433 0050 00000000 		.4byte	.LFB11
 2434 0054 12000000 		.4byte	.LFE11
 2435 0058 00000000 		.4byte	.LFB12
 2436 005c 14000000 		.4byte	.LFE12
 2437 0060 00000000 		.4byte	.LFB13
 2438 0064 24000000 		.4byte	.LFE13
 2439 0068 00000000 		.4byte	.LFB14
 2440 006c 02000000 		.4byte	.LFE14
 2441 0070 00000000 		.4byte	.LFB15
 2442 0074 0C000000 		.4byte	.LFE15
 2443 0078 00000000 		.4byte	.LFB16
 2444 007c 0C000000 		.4byte	.LFE16
 2445 0080 00000000 		.4byte	.LFB17
 2446 0084 0C000000 		.4byte	.LFE17
 2447 0088 00000000 		.4byte	.LFB18
ARM GAS  C:\Users\HENRYA~1\AppData\Local\Temp\ccSeVATh.s 			page 72


 2448 008c 18000000 		.4byte	.LFE18
 2449 0090 00000000 		.4byte	.LFB19
 2450 0094 0C000000 		.4byte	.LFE19
 2451 0098 00000000 		.4byte	.LFB20
 2452 009c 18000000 		.4byte	.LFE20
 2453 00a0 00000000 		.4byte	.LFB21
 2454 00a4 28000000 		.4byte	.LFE21
 2455 00a8 00000000 		.4byte	.LFB22
 2456 00ac 28000000 		.4byte	.LFE22
 2457 00b0 00000000 		.4byte	.LFB23
 2458 00b4 20000000 		.4byte	.LFE23
 2459 00b8 00000000 		.4byte	.LFB24
 2460 00bc 20000000 		.4byte	.LFE24
 2461 00c0 00000000 		.4byte	.LFB25
 2462 00c4 24000000 		.4byte	.LFE25
 2463 00c8 00000000 		.4byte	.LFB26
 2464 00cc 5C000000 		.4byte	.LFE26
 2465 00d0 00000000 		.4byte	.LFB27
 2466 00d4 02000000 		.4byte	.LFE27
 2467 00d8 00000000 		.4byte	0
 2468 00dc 00000000 		.4byte	0
 2469              		.section	.debug_line,"",%progbits
 2470              	.Ldebug_line0:
 2471 0000 DE020000 		.section	.debug_str,"MS",%progbits,1
 2471      02006300 
 2471      00000201 
 2471      FB0E0D00 
 2471      01010101 
 2472              	.LASF10:
 2473 0000 75696E74 		.ascii	"uint16\000"
 2473      313600
 2474              	.LASF61:
 2475 0007 43794578 		.ascii	"CyExitCriticalSection\000"
 2475      69744372 
 2475      69746963 
 2475      616C5365 
 2475      6374696F 
 2476              	.LASF43:
 2477 001d 74784461 		.ascii	"txDataByte\000"
 2477      74614279 
 2477      746500
 2478              	.LASF18:
 2479 0028 4D4F544F 		.ascii	"MOTOR_Enable\000"
 2479      525F456E 
 2479      61626C65 
 2479      00
 2480              	.LASF19:
 2481 0035 4D4F544F 		.ascii	"MOTOR_Start\000"
 2481      525F5374 
 2481      61727400 
 2482              	.LASF42:
 2483 0041 4D4F544F 		.ascii	"MOTOR_WriteTxData\000"
 2483      525F5772 
 2483      69746554 
 2483      78446174 
 2483      6100
 2484              	.LASF48:
ARM GAS  C:\Users\HENRYA~1\AppData\Local\Temp\ccSeVATh.s 			page 73


 2485 0053 73747269 		.ascii	"string\000"
 2485      6E6700
 2486              	.LASF7:
 2487 005a 6C6F6E67 		.ascii	"long long unsigned int\000"
 2487      206C6F6E 
 2487      6720756E 
 2487      7369676E 
 2487      65642069 
 2488              	.LASF44:
 2489 0071 4D4F544F 		.ascii	"MOTOR_ReadControlRegister\000"
 2489      525F5265 
 2489      6164436F 
 2489      6E74726F 
 2489      6C526567 
 2490              	.LASF33:
 2491 008b 4D4F544F 		.ascii	"MOTOR_GetRxBufferSize\000"
 2491      525F4765 
 2491      74527842 
 2491      75666665 
 2491      7253697A 
 2492              	.LASF6:
 2493 00a1 6C6F6E67 		.ascii	"long long int\000"
 2493      206C6F6E 
 2493      6720696E 
 2493      7400
 2494              	.LASF0:
 2495 00af 7369676E 		.ascii	"signed char\000"
 2495      65642063 
 2495      68617200 
 2496              	.LASF58:
 2497 00bb 74785065 		.ascii	"txPeriod\000"
 2497      72696F64 
 2497      00
 2498              	.LASF4:
 2499 00c4 6C6F6E67 		.ascii	"long int\000"
 2499      20696E74 
 2499      00
 2500              	.LASF9:
 2501 00cd 75696E74 		.ascii	"uint8\000"
 2501      3800
 2502              	.LASF13:
 2503 00d3 646F7562 		.ascii	"double\000"
 2503      6C6500
 2504              	.LASF37:
 2505 00da 61646472 		.ascii	"addressMode\000"
 2505      6573734D 
 2505      6F646500 
 2506              	.LASF11:
 2507 00e6 75696E74 		.ascii	"uint32\000"
 2507      333200
 2508              	.LASF24:
 2509 00ed 636F6E74 		.ascii	"control\000"
 2509      726F6C00 
 2510              	.LASF50:
 2511 00f5 4D4F544F 		.ascii	"MOTOR_PutArray\000"
 2511      525F5075 
 2511      74417272 
ARM GAS  C:\Users\HENRYA~1\AppData\Local\Temp\ccSeVATh.s 			page 74


 2511      617900
 2512              	.LASF55:
 2513 0104 4D4F544F 		.ascii	"MOTOR_SendBreak\000"
 2513      525F5365 
 2513      6E644272 
 2513      65616B00 
 2514              	.LASF56:
 2515 0114 7265744D 		.ascii	"retMode\000"
 2515      6F646500 
 2516              	.LASF8:
 2517 011c 756E7369 		.ascii	"unsigned int\000"
 2517      676E6564 
 2517      20696E74 
 2517      00
 2518              	.LASF54:
 2519 0129 4D4F544F 		.ascii	"MOTOR_ClearTxBuffer\000"
 2519      525F436C 
 2519      65617254 
 2519      78427566 
 2519      66657200 
 2520              	.LASF5:
 2521 013d 6C6F6E67 		.ascii	"long unsigned int\000"
 2521      20756E73 
 2521      69676E65 
 2521      6420696E 
 2521      7400
 2522              	.LASF67:
 2523 014f 4379456E 		.ascii	"CyEnterCriticalSection\000"
 2523      74657243 
 2523      72697469 
 2523      63616C53 
 2523      65637469 
 2524              	.LASF34:
 2525 0166 73697A65 		.ascii	"size\000"
 2525      00
 2526              	.LASF3:
 2527 016b 73686F72 		.ascii	"short unsigned int\000"
 2527      7420756E 
 2527      7369676E 
 2527      65642069 
 2527      6E7400
 2528              	.LASF30:
 2529 017e 4D4F544F 		.ascii	"MOTOR_GetChar\000"
 2529      525F4765 
 2529      74436861 
 2529      7200
 2530              	.LASF49:
 2531 018c 62756649 		.ascii	"bufIndex\000"
 2531      6E646578 
 2531      00
 2532              	.LASF25:
 2533 0195 696E7453 		.ascii	"intSrc\000"
 2533      726300
 2534              	.LASF66:
 2535 019c 4D4F544F 		.ascii	"MOTOR_initVar\000"
 2535      525F696E 
 2535      69745661 
ARM GAS  C:\Users\HENRYA~1\AppData\Local\Temp\ccSeVATh.s 			page 75


 2535      7200
 2536              	.LASF22:
 2537 01aa 4D4F544F 		.ascii	"MOTOR_WriteControlRegister\000"
 2537      525F5772 
 2537      69746543 
 2537      6F6E7472 
 2537      6F6C5265 
 2538              	.LASF23:
 2539 01c5 4D4F544F 		.ascii	"MOTOR_SetRxInterruptMode\000"
 2539      525F5365 
 2539      74527849 
 2539      6E746572 
 2539      72757074 
 2540              	.LASF64:
 2541 01de 433A5C55 		.ascii	"C:\\Users\\Henry Alberto\\Desktop\\Test_Robot\\Test"
 2541      73657273 
 2541      5C48656E 
 2541      72792041 
 2541      6C626572 
 2542 020c 5F4D6F64 		.ascii	"_Module.cydsn\000"
 2542      756C652E 
 2542      63796473 
 2542      6E00
 2543              	.LASF57:
 2544 021a 746D7053 		.ascii	"tmpStat\000"
 2544      74617400 
 2545              	.LASF17:
 2546 0222 73697A65 		.ascii	"sizetype\000"
 2546      74797065 
 2546      00
 2547              	.LASF39:
 2548 022b 61646472 		.ascii	"address\000"
 2548      65737300 
 2549              	.LASF20:
 2550 0233 4D4F544F 		.ascii	"MOTOR_Stop\000"
 2550      525F5374 
 2550      6F7000
 2551              	.LASF28:
 2552 023e 4D4F544F 		.ascii	"MOTOR_ReadRxStatus\000"
 2552      525F5265 
 2552      61645278 
 2552      53746174 
 2552      757300
 2553              	.LASF31:
 2554 0251 72785374 		.ascii	"rxStatus\000"
 2554      61747573 
 2554      00
 2555              	.LASF62:
 2556 025a 474E5520 		.ascii	"GNU C 4.9.3 20150303 (release) [ARM/embedded-4_9-br"
 2556      4320342E 
 2556      392E3320 
 2556      32303135 
 2556      30333033 
 2557 028d 616E6368 		.ascii	"anch revision 221220] -mcpu=cortex-m0 -mthumb -g -O"
 2557      20726576 
 2557      6973696F 
 2557      6E203232 
ARM GAS  C:\Users\HENRYA~1\AppData\Local\Temp\ccSeVATh.s 			page 76


 2557      31323230 
 2558 02c0 67202D66 		.ascii	"g -ffunction-sections -ffat-lto-objects\000"
 2558      66756E63 
 2558      74696F6E 
 2558      2D736563 
 2558      74696F6E 
 2559              	.LASF68:
 2560 02e8 4D4F544F 		.ascii	"MOTOR_IntClock_Stop\000"
 2560      525F496E 
 2560      74436C6F 
 2560      636B5F53 
 2560      746F7000 
 2561              	.LASF12:
 2562 02fc 666C6F61 		.ascii	"float\000"
 2562      7400
 2563              	.LASF63:
 2564 0302 2E5C4765 		.ascii	".\\Generated_Source\\PSoC4\\MOTOR.c\000"
 2564      6E657261 
 2564      7465645F 
 2564      536F7572 
 2564      63655C50 
 2565              	.LASF16:
 2566 0323 72656738 		.ascii	"reg8\000"
 2566      00
 2567              	.LASF1:
 2568 0328 756E7369 		.ascii	"unsigned char\000"
 2568      676E6564 
 2568      20636861 
 2568      7200
 2569              	.LASF2:
 2570 0336 73686F72 		.ascii	"short int\000"
 2570      7420696E 
 2570      7400
 2571              	.LASF60:
 2572 0340 4D4F544F 		.ascii	"MOTOR_IntClock_StartEx\000"
 2572      525F496E 
 2572      74436C6F 
 2572      636B5F53 
 2572      74617274 
 2573              	.LASF36:
 2574 0357 4D4F544F 		.ascii	"MOTOR_SetRxAddressMode\000"
 2574      525F5365 
 2574      74527841 
 2574      64647265 
 2574      73734D6F 
 2575              	.LASF51:
 2576 036e 62797465 		.ascii	"byteCount\000"
 2576      436F756E 
 2576      7400
 2577              	.LASF26:
 2578 0378 72784461 		.ascii	"rxData\000"
 2578      746100
 2579              	.LASF59:
 2580 037f 4D4F544F 		.ascii	"MOTOR_SetTxAddressMode\000"
 2580      525F5365 
 2580      74547841 
 2580      64647265 
ARM GAS  C:\Users\HENRYA~1\AppData\Local\Temp\ccSeVATh.s 			page 77


 2580      73734D6F 
 2581              	.LASF15:
 2582 0396 63686172 		.ascii	"char\000"
 2582      00
 2583              	.LASF41:
 2584 039b 4D4F544F 		.ascii	"MOTOR_SetTxInterruptMode\000"
 2584      525F5365 
 2584      74547849 
 2584      6E746572 
 2584      72757074 
 2585              	.LASF46:
 2586 03b4 4D4F544F 		.ascii	"MOTOR_PutChar\000"
 2586      525F5075 
 2586      74436861 
 2586      7200
 2587              	.LASF14:
 2588 03c2 63686172 		.ascii	"char8\000"
 2588      3800
 2589              	.LASF38:
 2590 03c8 4D4F544F 		.ascii	"MOTOR_SetRxAddress1\000"
 2590      525F5365 
 2590      74527841 
 2590      64647265 
 2590      73733100 
 2591              	.LASF40:
 2592 03dc 4D4F544F 		.ascii	"MOTOR_SetRxAddress2\000"
 2592      525F5365 
 2592      74527841 
 2592      64647265 
 2592      73733200 
 2593              	.LASF53:
 2594 03f0 4D4F544F 		.ascii	"MOTOR_GetTxBufferSize\000"
 2594      525F4765 
 2594      74547842 
 2594      75666665 
 2594      7253697A 
 2595              	.LASF21:
 2596 0406 656E6162 		.ascii	"enableInterrupts\000"
 2596      6C65496E 
 2596      74657272 
 2596      75707473 
 2596      00
 2597              	.LASF29:
 2598 0417 73746174 		.ascii	"status\000"
 2598      757300
 2599              	.LASF47:
 2600 041e 4D4F544F 		.ascii	"MOTOR_PutString\000"
 2600      525F5075 
 2600      74537472 
 2600      696E6700 
 2601              	.LASF32:
 2602 042e 4D4F544F 		.ascii	"MOTOR_GetByte\000"
 2602      525F4765 
 2602      74427974 
 2602      6500
 2603              	.LASF27:
 2604 043c 4D4F544F 		.ascii	"MOTOR_ReadRxData\000"
ARM GAS  C:\Users\HENRYA~1\AppData\Local\Temp\ccSeVATh.s 			page 78


 2604      525F5265 
 2604      61645278 
 2604      44617461 
 2604      00
 2605              	.LASF52:
 2606 044d 4D4F544F 		.ascii	"MOTOR_PutCRLF\000"
 2606      525F5075 
 2606      7443524C 
 2606      4600
 2607              	.LASF65:
 2608 045b 4D4F544F 		.ascii	"MOTOR_Init\000"
 2608      525F496E 
 2608      697400
 2609              	.LASF35:
 2610 0466 4D4F544F 		.ascii	"MOTOR_ClearRxBuffer\000"
 2610      525F436C 
 2610      65617252 
 2610      78427566 
 2610      66657200 
 2611              	.LASF45:
 2612 047a 4D4F544F 		.ascii	"MOTOR_ReadTxStatus\000"
 2612      525F5265 
 2612      61645478 
 2612      53746174 
 2612      757300
 2613              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20150303 (release) [ARM/embedded-4_9-br
